:PROPERTIES:
:header-args:    :results silent
:END:
#+TITLE: My Emacs configuration
#+STARTUP: indent show2levels

LLMs
- ollama
- gpf4all
- [[https://claude.ai/login?returnTo=%2F][cloude]]
- [[https://www.phind.com/search?home=true][phind]]
- [[https://www.infoworld.com/article/3700869/14-llms-that-arent-chatgpt.html][14 LLMs que não são chatGPT]]


TODO: Emacs 30 use-package now has a =:vc= keyword to install packages from git. Should I go
      back to standard package manager in Emacs? Once you use it (instead of elpaca), you
      can use =package-vc-upgrade-all= to update VC installed packages.

TODO: Use ~dired-hide-details-mode~

TODO: Check superword-mode

TODO: Check the project-vc-extra-root-markers variable
TODO: Check the python-shell-dedicated variable

TODO: *Check the* compilation-hidden-output variable
TODO: try the [[https://github.com/emacs-tree-sitter/ts-fold][ts-fold]] package


My hand-crafted Emacs configuration

init-time atual do emacs: ~1.2

Enable lexical binding
#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

Activate use-package report -> call the command ~use-package-report~. Ideally, you want
packages that were not used yet to be only "initialized" and only after they have been
used for the first time they should be "configured".
#+begin_src emacs-lisp
(setq use-package-compute-statistics t)
#+end_src

* Safe local variables
#+begin_src emacs-lisp
(put 'helm-make-build-dir 'safe-local-variable 'stringp)
(put 'projectile-project-compilation-cmd 'safe-local-variable 'stringp)
(put 'projectile-project-run-cmd 'safe-local-variable 'stringp)
(put 'user-mail-address 'safe-local-variable 'stringp)
(put 'reftex-default-bibliography 'safe-local-variable 'darcamo/list-of-strings-p)
(put 'abbrev-file-name 'safe-local-variable 'stringp)
(put 'TeX-master 'safe-local-variable 'stringp)
(put 'ispell-skip-html 'safe-local-variable 'booleanp)
(put 'ispell-local-dictionary 'safe-local-variable 'stringp)
(put 'org-download-image-dir 'safe-local-variable 'stringp)
(put 'org-html-table-align-individual-fields 'safe-local-variable 'booleanp)
(put 'org-attach-id-dir 'safe-local-variable 'stringp)
(put 'qml-integration-qmltestrunner-program 'safe-local-variable 'stringp)
(put 'qml-integration-qmlscene-program 'safe-local-variable 'stringp)
(put 'qml-integration-qmllint-program 'safe-local-variable 'stringp)
#+end_src

* Path for programs to run in subprocesses
#+begin_src emacs-lisp
(setenv "ORGANIZATION" "HP Development Company, L.P.")
(setenv "LD_LIBRARY_PATH" "$SQUISH_DIR/lib:$LD_LIBRARY_PATH" t)

(defun darcamo/add-folder-to-path (folder)
  "Update PATH environment var and `exec-path` with the provided FOLDER.

FOLDER is expanded using `expand-file-name`."
  (let* ((expanded-folder (expand-file-name folder))
         (new-path (concat expanded-folder ":" (getenv "PATH")))
         (new-exec-path (cons expanded-folder exec-path)))
    (setenv "PATH" new-path)
    (setq exec-path new-exec-path)))

(defun darcamo/add-node-folder-to-path (node-version)
  "Set up PATH and `exec-path` for NODE-VERSION using nvm."
  (darcamo/add-folder-to-path (format "~/.nvm/versions/node/%s/bin" node-version)))
;; Add node installed with nvm to path:
(darcamo/add-node-folder-to-path "v24.9.0")

;; Add .local/bin to path, since have a few programs there
(darcamo/add-folder-to-path "~/.local/bin")
#+end_src

* Path for remote execution with TRAMP                                        :TRAMP:
This is specially useful with docker.

#+begin_src emacs-lisp
(use-package tramp
  :defer t
  :config
  ;; The path here is specific to a given remote, but this also acts as an
  ;; example in case I need to add more paths
  (add-to-list 'tramp-remote-path "/home/ubuntu/.local/bin")
  )
#+end_src

* Set the theme and apearance                                            :Appearance:
** Theme                                                                :Theme:font:
Good themes:
- wombat (nativo)
- doom opera
- doom monokai pro
- doom monokai spectrum
- doom oceanic next
- material dark
- doom tomorrow night
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; (load-theme 'wombat)
  (load-theme 'doom-material-dark t)
  )

(use-package emacs
  :ensure nil
  :custom-face
  (cursor ((t (:background "#c96"))))
  (isearch ((t (:background "#c60" :foreground "#eee"))))
  (fringe ((t (:foreground "goldenrod"))))
  (org-todo ((t (:foreground "tomato"))))
  (bold ((t (:weight extrabold))))
  (italic ((t (:foreground "Orange"))))
  )


;; Note that `font-info' cannot be called when Emacs daemon is
;; starting because we don't have a frame yet.
(defun darcamo/set-my-default-font()
  "Set my default font."
  (if  (font-info "Menlo")
      (set-face-attribute 'default nil :family "Menlo" :height 150)
    (set-face-attribute 'default nil :family "JetBrains Mono" :height 120)
    )
  )


(use-package emacs
  :ensure nil
  :hook
  ;; The server-after-make-frame-hook only run functions when emacs daemon creates a frame
  (server-after-make-frame . darcamo/set-my-default-font)
  :config
  ;; If not running as a daemon, just set my fonts directly
  (unless (daemonp)
    (darcamo/set-my-default-font)))
#+end_src

** Customize user interface
#+begin_src emacs-lisp
(menu-bar-mode 0)
;; (when (display-graphic-p)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  ;; )

(setq inhibit-startup-screen t)
(column-number-mode)
#+end_src

** Customize apearance
#+begin_src emacs-lisp
;; Show stray whitespace.
;; (setq-default show-trailing-whitespace t)
(setq-default indicate-empty-lines t)
(setq-default indicate-buffer-boundaries 'left)
#+end_src

** Enable tab-bar-mode                                                      :TabBar:
Alternate between tabs with C-<tab>
#+begin_src emacs-lisp
(use-package tab-bar
:init
(tab-bar-mode)
:custom
;; Only show tabs if there is more than one tab
(tab-bar-show 1)
(tab-bar-tab-hints t)
(tab-bar-select-tab-modifiers '(meta)) ;; Press M-<digit> to change to that tab
:config
;; Use the foreground and background colors of the highlight face for the active bar
;; (set-face-attribute 'tab-bar-tab nil :foreground nil :background nil :inherit 'highlight)
(set-face-attribute 'tab-bar-tab nil :foreground "Black" :background "GoldenRod" :inherit 'highlight)
;; (set-face-attribute 'tab-bar-tab nil :box t)
:bind
;; tab-list command display all tabs for easy vialization and switching
;; Note that there is also the "C-x t RET" keybinding to switch to a tab by name
("C-x t l" . tab-list)
)
#+end_src

The keybindinds all start with =C-x t=
| t C-f | find-file-other-tab        |
| REF   | tag-bar-select-tab-by-name |
| 0     | tab-close                  |
| 1     | tab-close-other            |
| 2     | tab-new                    |
| b     | switch-to-buffer-other-tab |
| d     | dired-other-tab            |
| f     | find-file-other-tab        |
| m     | tab-move                   |
| o     | tab-next                   |
| p     | project-other-tab-command  |
| r     | tab-rename                 |
** Doom Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (set-face-attribute 'mode-line-inactive nil :background "#303030" :overline t)
  ;; (set-face-background 'mode-line-active "SaddleBrown")
  (set-face-background 'mode-line-active "#403030")
  ;; (set-face-background 'mode-line-active "#400101")
  )
#+end_src

*NOTE*: Doom modeline now uses [[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]] instead of [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]. If the icons are not
displaying correctly, call =nerd-icons-install-fonts= to install the fonts.

** Change some of the hi-lock faces
#+begin_src elisp
(use-package hi-lock
  :defer t
  :custom
  (hi-lock-face-defaults '("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-salmon" "hi-aquamarine"))
  :config
  (set-face-attribute 'hi-yellow nil :foreground "black")
  (set-face-attribute 'hi-pink nil :foreground "black")
  (set-face-attribute 'hi-green nil :foreground "black")
  (set-face-attribute 'hi-blue nil :foreground "black"))
#+end_src

** COMMENT Telephone Line
Alternative modeline similar to powerline

https://github.com/dbordak/telephone-line

** show-font
https://elpa.gnu.org/packages/show-font.html

Use the =show-font-tabulated= to see a preview of the many fonts.

Use =show-font-select-preview= to preview a single font.

#+begin_src emacs-lisp
(use-package show-font
  :ensure t
  :commands (show-font-tabulated show-font-select-preview)
  )
#+end_src

* Completion framework                                                   :Completion:
** COMMENT Ido Mode                                                        :IdoMode:
#+begin_src emacs-lisp
(ido-mode 1)
(ido-everywhere)
(setq ido-enable-flex-matching t)
(fido-mode)
#+end_src

** imenu
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :custom
  (imenu-flatten 'group))
#+end_src

** Vertico                                                                 :Vertico:
Veja atalhos do vertigo em https://github.com/minad/vertico#key-bindings
*** Basic configuration
#+begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :ensure t
  :custom
  ;; (vertico-scroll-margin 0) ;; Different scroll margin
  ;; (vertico-count 20) ;; Show more candidates
  ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
  (vertico-cycle t)  ;; Enable cycling for `vertico-next/previous'
  :init
  (vertico-mode)
  :bind ( :map vertico-map
          ;; Note that you can also use C-M-f and C-M-b to move cursor between directories
          ("C-l" . backward-kill-sexp))
  :hook
  ;; Clean up file path when typing
  (rfn-eshadow-update-overlay . vertico-directory-tidy)
  )


;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))


;; A few more useful configurations...
(use-package emacs
  :custom
  (enable-recursive-minibuffers t)  ;; Enable recursive minibuffers

  ;; Hide commands in M-x which do not work in the current mode.  Vertico
  ;; commands are hidden in normal buffers. This setting is useful beyond
  ;; Vertico.
  (read-extended-command-predicate #'command-completion-default-include-p)

  ;; Do not allow the cursor in the minibuffer prompt
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt))


  ;; (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  )
#+end_src

*** COMMENT Extra packages: vertico-mouse
#+begin_src emacs-lisp
(use-package vertico-mouse
  :after vertico
  :init
  (vertico-mouse-mode))
#+end_src

** Orderless                                                             :Orderless:
#+begin_src emacs-lisp
;; Optionally use the `orderless' completion style.
(use-package orderless
  :ensure t
  :custom
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
  ;; (orderless-component-separator #'orderless-escapable-split-on-space)
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Marginalia                                                           :Marginalia:
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+end_src

** completion-preview-mode
#+begin_src emacs-lisp
(use-package emacs
  :config
  (global-completion-preview-mode)
  :bind ( :map completion-preview-active-mode-map
          ("M-n" . 'completion-preview-next-candidate)
          ("M-p" . 'completion-preview-prev-candidate)
          )
  )
#+end_src
** all-the-icons-completion                                            :AllTheIcons:
#+begin_src emacs-lisp
(use-package all-the-icons-completion
:ensure t
:config
(all-the-icons-completion-mode)
;; (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup)
;; :hook
;; (marginalia-mode . all-the-icons-completion-marginalia-setup)
)
#+end_src

** Consult                                                     :Keybindings:Consult:

Use "M-x" e digite "^consult" para ver os diversos comandos.

Nota: Alguns comandos possuem múltiplos grupos. Vc pode filtrar para um grupo específico
usando "letra" + SPC. Exemplo, o comando ~consult-buffer~ possui grupos "buffer (b)", "file
(f)" e "bookmark" (m). Digitar "f SPC" vai limitar o completion a apenas arquivos.

#+begin_src emacs-lisp
(use-package consult
  :ensure t
  :bind (
         ;; Global keybindings
         ("M-i" . consult-imenu)
         ;; ("M-I" . consult-imenu-multi)

         ;; C-c keybindigs
         ;; ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ;; ("C-c k" . consult-kmacro)

         ;; C-x bindings (ctl-x-map)
         ("C-x b" . consult-buffer)
         ("C-x 4 b" . consult-buffer-other-window)
         ("C-x 5 b" . consult-buffer-other-frame)
         ("C-x r b" . consult-bookmark)

         ;; M-g bindings
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)
         ("M-g g" . consult-goto-line)
         ("M-g M-g" . consult-goto-line)
         ("M-g o" . consult-outline)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)

         ;; Other bindings
         ("M-y" . consult-yank-pop)
         ("<help> a" . consult-apropos)

         ;; M-s bindings
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ("M-s s" . consult-yasnippet)

         ;; Isearch integration
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)           ;; needed by consult-line to detect isearch

         ;; Keybindings only in org-mode
         :map org-mode-map (("M-i" . consult-outline))
         )

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
  )
#+end_src

** Consult-dir                                                             :Consult:
#+begin_src emacs-lisp
(use-package consult-dir
  :ensure t
  :bind (("C-x C-d" . consult-dir)
         ;; :map vertico-map
         ;; ("C-x C-d" . consult-dir)
         ;; ("C-x C-j" . consult-dir-jump-file)
         ))
#+end_src

** COMMENT Consult-project                                                 :Consult:
#+begin_src emacs-lisp
(use-package consult-project
  :ensure (consult-project :type git :host github :repo "Qkessler/consult-project")
  :bind
  (("M-s p" . consult-project))
  )
#+end_src

** consult-jump-project                                                    :Consult:
Quickly jump between projects, their files and buffers with consult.

#+begin_src emacs-lisp
(use-package consult-jump-project
  :ensure (consult-jump-project :type git :host github :repo "jdtsmith/consult-jump-project")
  :bind ("C-x p p" . consult-jump-project)
  )
#+end_src

** Other useful consult commands                                           :Consult:
- consult-minor-mode-men
  - Filter the groups with "g", "i", "l" and "o"

** Embark                                                       :Keybindings:Embark:
Note: During a prefix key (e.g. =C-x=, =C-c=, etc) you can use =C-h= to see all possible
completions for that prefix key. This is nicer than which key because you can use search.

Note: If you use =C-u= before calling ~embark-act~, then the session will be kept after the
action is performed (you will still be in the minibuffer)
#+begin_src emacs-lisp
(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)
   :map embark-file-map
   ;; Add sudo-edit as an action for files
   ("s" . sudo-edit)
   ) ;; alternative for `describe-bindings'

  ;; :custom
  ;; ;; Instead of the popup with actions when embark is activated, use
  ;; ;; completions to choose the action.
  ;; ;;
  ;; ;; NOTE: In the completions, if you type "@" you can then use the
  ;; ;; keybinding of the action
  ;; (embark-prompter 'embark-completing-read-prompter)

  :init
  ;; Replace the key help with a completing-read interface -> type
  ;; "C-h" after a prefix key to see completions
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil  ;; I don't need any specific action functions
                 ;; The following lines are the "action alist" passed to
                 ;; display-buffer. For now, I only want to remove the
                 ;; mode-line.
                 (window-parameters (mode-line-format . none))
                 )))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Corfu                                                                     :Corfu:
#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-commit-predicate nil)   ;; Do not commit selected candidates on next input
  ;; (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
  ;; (corfu-quit-no-match t)        ;; Automatically quit if there is no match
  (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
  ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; You may want to enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since dabbrev can be used globally (M-/).
  :init
  (global-corfu-mode)

  :bind (:map corfu-map
              ("<end>" . corfu-last)
              ("<home>" . corfu-first)
              ("<next>" . corfu-scroll-up)
              ("<prior>" . corfu-scroll-down)
              ))

;; A few more useful configurations...
(use-package emacs
  :ensure nil
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))

;; https://github.com/jdtsmith/kind-icon
;; Add nice icons in corfu popup
(use-package kind-icon
  :ensure t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** Acronyms                                                         :Acronym:abbrev:
Code to define many acronymms that I use
#+begin_src emacs-lisp

;; For each entry, the first element will be the expansion trigger, while the
;; second element is the expansion. Third element indicates if a plural
;; expansion should also be created (just adding s after the trigger). The
;; fourth element indicates if a corresponding "acronym expansion" should be
;; added to latex and org-mode. An acronym expansion corresponds to a trigger
;; which is the one in the list preceeded by "a" and the expansion will have the
;; corresponding acronyms functionality (acro package in latex and glossaries
;; package in org-mode).
(setq my-acronym-list '(
                        ;; token - expansion - use plural - add acronym expansion
                        ("arima" "ARIMA" nil t)
                        ("bd" "BD" nil t)
                        ("ber" "BER" t t)
                        ("blast" "BLAST" nil t)
                        ("bler" "BLER" t t)
                        ("bpsk" "BPSK" nil t)
                        ("bs" "BS" t t)
                        ("cam" "CAM" nil t)
                        ("cdf" "CDF" t t)
                        ("comp" "CoMP" nil t)
                        ("cqi" "CQI" nil t)
                        ("crs" "CRS" nil t)
                        ("csi" "CSI" nil t)
                        ("csit" "CSIT" nil t)
                        ("csr" "CSR" nil t)
                        ("dft" "DFT" t t)
                        ("dmrs" "DMRS" nil t)
                        ("dof" "DOF" t t)
                        ("dtdd" "DTDD" nil t)
                        ("fdd" "FDD" nil t)
                        ("gp" "GP" t t)
                        ("harq" "HARQ" nil t)
                        ("ia" "IA" nil t)
                        ("ic" "IC" nil t)
                        ("jp" "JP" nil t)
                        ("los" "LOS" nil t)
                        ("ls" "LS" nil t)
                        ("lte" "LTE" nil t)
                        ("mcs" "MCS" t t)
                        ("mimo" "MIMO" nil t)
                        ("miso" "MISO" nil t)
                        ("ml" "ML" nil t)
                        ("mlp" "MLP" nil t)
                        ("mmse" "MMSE" nil t)
                        ("mrt" "MRT" nil t)
                        ("mse" "MSE" nil t)
                        ("occ" "OCC" nil t)
                        ("ofdm" "OFDM" nil t)
                        ("pdf" "PDF" t t)
                        ("prb" "PRB" t t)
                        ("prr" "PRR" nil t)
                        ("psk" "PSK" nil t)
                        ("qam" "QAM" nil t)
                        ("qos" "QoS" nil t)
                        ("rb" "RB" t t)
                        ("re" "RE" t nil)
                        ("rsrp" "RSRP" nil t)
                        ("rsrq" "RSRQ" nil t)
                        ("rssi" "RSSI" nil t)
                        ("sdma" "SDMA" nil t)
                        ("sic" "SIC" nil t)
                        ("simo" "SIMO" nil t)
                        ("sinr" "SINR" t t)
                        ("siso" "SISO" nil t)
                        ("snr" "SNR" nil t)
                        ("srs" "SRS" nil t)
                        ("stbc" "STBC" nil t)
                        ("svd" "SVD" t t)
                        ("tdd" "TDD" nil t)
                        ("tti" "TTI" t t)
                        ("ue" "UE" t t)
                        ("ula" "ULA" t t)
                        ("ura" "URA" t t)
                        ("v2i" "V2I" nil t)
                        ("v2v" "V2V" nil t)
                        ("v2x" "V2X" nil t)
                        ("zf" "ZF" nil t)
                        ("vc" "você" t nil)
                        ))

;; List with elements in my-acronym-list where the third value is 't'
(setq plural-list (seq-filter (lambda (elem) (nth 2 elem)) my-acronym-list))

;; Construct an abbrev table for text mode from my-acronym-list
(define-abbrev-table 'my-text-mode-abbrev-table
  (append
   (mapcar (lambda (elem) (list (nth 0 elem) (nth 1 elem))) my-acronym-list)
   (mapcar (lambda (elem) (list (concat (nth 0 elem) "s") (concat (nth 1 elem) "s"))) plural-list)
   '(
     ("bayesian" "Bayesian")
     ("comunication" "communication")
     ("latence" "latency")
     ("manhattan" "Manhattan")
     ("trainning" "training")
     ("eachother" "each other")
     ("teh" "the")
     ("diferent" "different")
     ("diferent" "different")
     ("pp" "point process")
     )
   )
  )


(use-package dash
  :ensure t
  :defer t
  :config
  ;; The dash library provides the "-keep" function
  (define-abbrev-table 'my-latex-mode-abbrev-table
    (append
     (-keep (lambda (elem) (if (nth 3 elem) (list (concat "a" (nth 0 elem)) (concat "\\ac{" (nth 1 elem) "}")))) my-acronym-list)

     (-keep (lambda (elem) (if (nth 3 elem) (list (concat "a" (nth 0 elem) "s") (concat "\\acp{" (nth 1 elem) "}")))) plural-list)
     )
    )

  (define-abbrev-table 'my-org-mode-abbrev-table
    (append
     (-keep (lambda (elem) (if (nth 3 elem) (list (concat "a" (nth 0 elem)) (concat "ac:" (nth 1 elem))))) my-acronym-list)

     (-keep (lambda (elem) (if (nth 3 elem) (list (concat "a" (nth 0 elem) "s") (concat "acp:" (nth 1 elem))))) plural-list)
     )
    )
  )

(use-package emacs
  :ensure nil
  :defer t
  :custom
  ;; I will always modify my abbrev file manually or programatically and I don't
  ;; want emacs to mess the file
  (save-abbrevs nil)

  ;; Turn on abbrev-mode by default on all major modes
  (abbrev-mode t)
  :config
  (when (file-exists-p "~/.abbrev_defs")
    (read-abbrev-file "~/.abbrev_defs")
    )
  )
#+end_src

** Fill with comment
#+begin_src emacs-lisp
;; Fill with comment
(defun fill-with-comment(&optional character)
  "Insert as many comment characters as necessary to go untill
      fill-column."
  (interactive)
  (when (null character)
    (setq character "x"))
  (let (current beginning)
    (delete-horizontal-space)
    (setq current (point))
    (beginning-of-line)
    (setq beginning (point))
    (goto-char current)

    (setq number (- (min fill-column 80) (- current beginning)))

    (if (not (= current beginning))
        (progn
          (insert " ")
          (setq number (- number 1)))
      )
    (setq character (string-to-char character))
    (insert-char character number )
    )
  )


(use-package emacs
  :ensure nil
  :bind
  ([C-f1] . fill-with-comment)
  )
#+end_src

** Yasnippets                                                           :Yasnippets:
*** Config
Veja aqui
https://github.com/MatthewZMD/.emacs.d#yasnippet-1

Tip: Check the =yas-describe-tables= command

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode)
  :bind (:map yas-minor-mode-map
  ("C-c &" . nil) ;; Disable all keybindings with "C-c &" prefix (conflict with org-mode)
  )
  )

(use-package yasnippet-snippets
  :ensure t
  :after yasnippet)

(use-package consult-yasnippet
  :ensure t
  :commands consult-yasnippet
  )
#+end_src

*** Some helper functions used in my snippets
#+begin_src emacs-lisp
;; This method is used in the 'comment' yasnippets template
(defun darcamo/get-comment-block-start ()
  "Insert the correct comment start string for a block comment.
  This method is used in the 'comment' yasnippets template."
  (interactive)
  (if (equal ";" comment-start)
      ;; For emacs-lisp mode, we want two ';' symbols.
      ";;"
    ;; For all the other major modes, the line below inserts the correct
    ;; comment-start.
    (string-trim comment-start)
    )
  )

;; This method is used in the 'comment' yasnippets template
(defun darcamo/get-comment-block-end ()
  "Insert the correct comment end string for a block comment.
  This method is used in the 'comment' yasnippets template."
  (interactive)
  (string-trim comment-end)
  )


;; Get user name and e-mail address
(defun darcamo/get-user-name-and-email ()
  "Get the user full name and e-mail address from the variables
      'user-full-name' and 'user-mail-address'. This is useful for
      yasnippets. You can use this function in your snippets and if you
      need to change the email address for a project, for example, just
      change the variable 'user-mail-address' in a file variable or a
      directory variable, instead of changing the snippets."
  (interactive)
  (concat user-full-name " <" user-mail-address ">")
  )
#+end_src

* darcamo function
#+begin_src emacs-lisp
;; Got from http://stackoverflow.com/questions/17325713/looking-for-a-replace-in-string-function-in-elisp
(defun darcamo-replace-in-string (what with in)
  (replace-regexp-in-string (regexp-quote what) with in nil 'literal))


(defun darcamo/list-of-strings-p (arg)
  "Return t if ARG is a list of strings."
  (every 'stringp arg))


(defun darcamo/string-to-ascii (string)
  "Change a STRING containing unicode characters to ASCII.

Note that not all characters are replaced, but only the ones I usually
don't want."
  (s-replace-all
   '(
     ("“" . "\"")
     ("”" . "\"")
     ("→" . "->")
     ("–" . "-")
     ("—" . "-")
     ("…" . "...")
     ("’" . "'")
     ("‘" . "'")
     )
   string))


(defun darcamo/string-to-ascii-region (beg end)
  "Change text in BEG and END from unicode to ascii.

 Note that not all characters are replaced, only the ones I usually don't want."
  (interactive "r")
  (let (replacement)
    (save-restriction
      (narrow-to-region beg end)
      (save-excursion
        (setq replacement (darcamo/string-to-ascii (buffer-substring beg end)))
        (delete-region beg end)
        (goto-char beg)
        (insert replacement)))))


(defun darcamo/surround-region (beg end leftPart rightPart)
  "Surround the region (BEG, END) with LEFTPART and RIGHTPART."
  (interactive "r")
  (save-restriction
    (narrow-to-region beg end)
    (goto-char (point-min))
    (insert leftPart)
    (goto-char (point-max))
    (insert rightPart)))


(defun darcamo/surround-region-dowim (leftPart rightPart)
  "Surround a region with the content of LEFTPART and RIGHTPART variables.

If the region is not active, the region between the current point and
the point given by `forward-word' will be used."
  (interactive)
  (let (beg end)
    (if (and transient-mark-mode mark-active)
        ;; Region active code
        (progn (setq beg (region-beginning) end (region-end))
               (darcamo/surround-region beg end leftPart rightPart))
      ;; Region inactive code: beg = current point, end = end of the word
      (setq beg (point))
      (forward-word)
      (setq end (point))
      (darcamo/surround-region beg end leftPart rightPart))))


(defun darcamo/surround-with-command ()
  "Usefull to surround a region with a command.

If the command if not provided it will be asked in the minibuffer."
  (interactive)
  (let* ((command (read-from-minibuffer "Command Name: "))
         (leftPart (concat command "("))
         (rightPart ")"))
    (darcamo/surround-region-dowim leftPart rightPart)))


(defun browse-doi-url (url)
  "Open the URL corresponding to the specified DOI number in the browser."
  (interactive "sDoi Number: ")
  (browse-url (concat "http://dx.doi.org/" url)))


;; Time functions
(defun replace-nth-element (lista index valor)
  "Replace the element at position INDEX in LISTA with VALOR."
  (replace lista (list valor) :start1 index))


(defun get-current-year()
  "Get the current year."
  (interactive)
  (format-time-string "%Y" (current-time)))


(defun get-current-month()
  "Get the current month."
  (interactive)
  (capitalize (format-time-string "%B" (current-time))))


(defun get-me-an-org-id-for-the-month (categoryName)
  "Generate an org ID for my monthly expenses for CATEGORYNAME.

This is used only in my template for the finances of the month. It
return a suitable ID for the month sub-headline."
  (interactive)
  (concat (get-current-month) (get-current-year) categoryName))


(defun get-today-org-time-stamp ()
  "Insert a `time-stamp' for today.

The format is the same format that `org-mode' uses for inactive
timestamps."
  (interactive)
  (format-time-string "[%Y-%m-%d %a]" (current-time)))


(defun get-previous-month()
  "Get the name of the previous month."
  (interactive)
  (capitalize (format-time-string "%B"
                                  ;; decode-time retorna uma lista especificando a data/hora atual na forma
                                  ;; (SEC MINUTE HOUR DAY MONTH YEAR DOW DST ZONE). Depois substituo o dia
                                  ;; por 0. Com isso ao aplicar encode-time e em seguida format-time-string
                                  ;; eu vou pegar o mês anterior ao invés do mez atual (funciona até mesmo
                                  ;; para janeiro).
                                  (apply 'encode-time ( replace-nth-element (decode-time) 3 0)))))


(defun get-previous-month-year()
  "Get the year of the previous month.
This will be equal to the current yar except when we are in january"
  (interactive)
  (capitalize (format-time-string "%Y"
                                  ;; decode-time retorna uma lista especificando a data/hora atual na forma
                                  ;; (SEC MINUTE HOUR DAY MONTH YEAR DOW DST ZONE). Depois substituo o dia
                                  ;; por 0. Com isso ao aplicar encode-time e em seguida format-time-string
                                  ;; eu vou pegar o ano do mês anterior (igual ao ano atual, exceto se
                                  ;; estivermos em janeiro, quando ele retorna o ano anterior)
                                  (apply 'encode-time ( replace-nth-element (decode-time) 3 0)))))


(defun get-filebrowse-program-linux ()
  "Get the name of the file browser app to use to open a folder outside Emacs."
  (cond
   ((executable-find "nautilus") "nautilus")
   ((executable-find "dolphin") "dolphin")))


(defun browse-dir-linux (dir-as-string)
  "Open filebrowser in the DIR-AS-STRING directory in Linux."
  (interactive)
  (start-process-shell-command
   "browse"
   "*scratch*"
   ;; Trocar nautilus por pcmanfm para o lxde
   ;; (concat "xdg-open " (expand-file-name dir-as-string))
   (concat (get-filebrowse-program-linux) " " (expand-file-name dir-as-string))))


(defun browse-dir-macos (dir-as-string)
  "Open filebrowser in the DIR-AS-STRING directory in MacOS."
  (interactive)
  (start-process-shell-command
   "browse"
   "*scratch*"
   ;; Trocar nautilus por pcmanfm para o lxde
   (concat "open -a Finder " (expand-file-name dir-as-string))))


(defun browse-dir-windows (dir-as-string)
  "Open file explorer in the DIR-AS-STRING directory."
  (interactive)
  (start-process-shell-command
   "browse"
   "*scratch*"
   ;; Trocar nautilus por pcmanfm para o lxde
   (concat "start " (expand-file-name dir-as-string))))


(defun browse-dir (dir-as-string)
  "Open the file browser in directory DIR-AS-STRING."
  (cond
   ((system-type-is-linux) (browse-dir-linux dir-as-string))
   ((system-type-is-macos) (browse-dir-macos dir-as-string))
   ((system-type-is-windows) (browse-dir-windows dir-as-string))
   (t (message "browse-dir: Unknown system type"))))


(defun browse-dir-sftp (dir-as-string)
  "Use nautilus to open the ftp link in DIR-AS-STRING.

This works with something like sftp://darlan@<server>/home/blabla."
  (start-process-shell-command
   "browse"
   "*scratch*"
   (concat "nautilus --no-desktop " dir-as-string)))


(defun browse-default-dir  ()
  "Open filebrowser in the default directory."
  (interactive)
  (browse-dir default-directory))


(defun browse-default-dir-in-emacs ()
  "Open the default directory in Emacs with Dired.

The default directory is the directory of the file associated with the
current buffer."
  (interactive)
  (dired default-directory))


(defun get-terminal-fullpath ()
  "Return the path to the installed terminal emulator.

First it will try the tilix terminal emulator. If not installed
it will try gnome-terminal and if that is not installed it will
then try lxterminal."
  (seq-find
   'executable-find
   '("kitty" "tilix" "gnome-terminal" "konsole" "lxterminal" "xterm")))


(defun linux-terminal-dir (dir-as-string)
  "Open terminal in directory DIR-AS-STRING."
  (start-process-shell-command
   "browse"
   "*scratch*"
   ;; (concat (get-terminal-fullpath) " " (concat "--working-directory \"" (expand-file-name dir-as-string) "\""))
   (concat (get-terminal-fullpath))))


(defun linux-terminal-default-dir ()
  "Open terminal in the default directory."
  (interactive)
  (linux-terminal-dir default-directory))


(defun macos-terminal-dir (dir-as-string)
  "Open terminal in directory DIR-AS-STRING."
  (interactive)
  (start-process-shell-command
   "browse"
   "*scratch*"
   ;; (concat (get-terminal-fullpath) " " (concat "--working-directory \"" (expand-file-name dir-as-string) "\""))
   (concat "open -n -a Terminal " dir-as-string)))


(defun macos-terminal-default-dir ()
  "Open terminal in the default directory."
  (interactive)
  (macos-terminal-dir default-directory))


(defun open-terminal-default-dir ()
  "Open terminal in the default directory."
  (interactive)
  (if (system-type-is-linux)
      (linux-terminal-default-dir)
    (macos-terminal-default-dir)))


(defun ver-pdf-no-evince (pdf &optional page)
  "Open a PDF using evince in page PAGE."
  (start-process-shell-command
   "evince"
   "*scratch*"
   (if page
       (format "evince -i %s %s" page pdf)
     (format "evince %s" pdf))))


(defun ver-pdf-no-acroread (pdf)
  "Open a PDF using acroread."
  (start-process-shell-command
   "acroread"
   "*scratch*"
   (concat "acroread " pdf)))


;; You need to have a script called pdfxchange
(defun ver-pdf-no-pdfxchange (pdf)
    "Open a PDF using pdfxchange."
  (start-process-shell-command
   "pdfxchange"
   "*scratch*"
   (concat "pdfxchange " pdf)))


;; Abrir no OpenOffice
(defun abrir-no-openoffice (documento)
  "Open document DOCUMENTO using openoffice."
  (start-process-shell-command
   "openoffice"
   "*scratch*"
   (concat "libreoffice.org -o " "\"" documento "\"")))


;; Ver vídeo
(defun ver-arquivo-de-video (video-file)
  "Open a video file VIDEO-FILE using vlc."
  (start-process-shell-command
   "vlc"
   "*scratch*"
   (concat "vlc " (surround-with-quotes video-file))))


(defun surround-with-quotes (filename)
  "Surround a given FILENAME with quotes.

This is useful to pass that file name to functions to be executed in the
shell, since we would have to scape some characters otherwise."
  (message (concat "\"" filename "\"")))


;; Run shell command from given folder
(defun run-shell-command-from-folder (command folder)
  "Run a given COMMAND from the specified FOLDER."
  (interactive)
  (start-process-shell-command
   command
   "*scratch*"
   ;; (concat "/usr/bin/nautilus --no-desktop " (concat "\"" (expand-file-name dir-as-string) "\""))
   (concat "cd " (expand-file-name folder) " && " command)))


(defun buffer-exists (bufname)
  "Test if buffffer BUFNAME exists."
  (bufferp (get-buffer bufname)))


;; Dictionaries / Synonyms / Wikipedia

(defun lookup-wikipedia ()
  "Look up the word's in Wikipedia.

This command generates a url for Wikipedia.com and switches you to
browser. If a region is active (a phrase), lookup that phrase."
  (interactive)
  (let (myword myurl)
    (setq myword
          (if (and transient-mark-mode mark-active)
              (buffer-substring-no-properties (region-beginning) (region-end))
            (thing-at-point 'symbol)))

    (setq myword (replace-regexp-in-string " " "_" myword))
    (setq myurl (concat "http://en.wikipedia.org/wiki/" myword))
    (browse-url myurl)))


(defun system-type-is-linux ()
  "Return t if running on Linux."
  (interactive)
  "Return true if system is Linux"
  (string-equal system-type "gnu/linux"))


(defun system-type-is-windows ()
  "Return t if running on Windows."
  (interactive)
  "Return true if system Windows"
  (string-equal system-type "windows-nt"))


(defun system-type-is-macos ()
  "Return t if running on macOS."
  (interactive)
  "Return true if system MacOS"
  (string-equal system-type "darwin"))


(defun get-linux-distro-name ()
  "Return the Linux distribution name by reading /etc/os-release."
  (when (system-type-is-linux)
    (let ((command "awk -F= '/^NAME/{print $2}' /etc/os-release | tr -d '\"'"))
      (string-trim (shell-command-to-string command)))))


(defun darcamo/change-to-label (start end)
  "Change the text from START to END to lowercase and replace spaces with underscores.

This function is useful for creating labels from text, such as converting figure captions."
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region start end)
      ;; Replace spaces with underscores
      (goto-char (point-min))
      (while (search-forward " " nil t) (replace-match "_" nil t))

      ;; Convert text to lowercase and insert
      (let ((label (downcase (buffer-substring-no-properties start end))))
        (delete-region start end)
        (insert label)))))


;; Find duplicated words in a buffer
(defun darcamo/find-duplicated-words ()
  "Search forward for for a duplicated word."
  (interactive)
  (message "Searching for for duplicated words ...")
  (push-mark)
  ;; This regexp is not perfect
  ;; but is fairly good over all:
  (if (re-search-forward
       "\\b\\([^@ \n\t]+\\)[ \n\t]+\\1\\b" nil 'move)
      (message "Found duplicated word.")
    (message "End of buffer")))


(defun darcamo/is-scratch-buffer ()
  "Check if the buffer name is `*scratch*'."
  (string-equal (buffer-name) "*scratch*"))
#+end_src

* General Usability                                       :General:Usability:Utility:
** Configuration
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :mode
  ("\\.abbrev_defs\\'" . emacs-lisp-mode)
  :custom
  ;; Consider a period followed by a single space to be end of sentence.
  (sentence-end-double-space nil)

  ;; Display the distance between two tab stops as 4 characters wide.
  (tab-width 4)
  (indent-tabs-mode nil)

  (recentf-max-saved-items 100)

  ;; This controls how `toggle-truncate-lines` work. By default it
  ;; will truncate on any character (when word-wrap is nil).
  (word-wrap t)
  :init
  ;; Enable recentf-mode to save recent files
  ;; With this minor-mode emacs will save recent files when it exits
  (recentf-mode)

  ;; Deleta região selecionada quando tecla DEL ou digita algum texto
  (delete-selection-mode 1)

  ;; Treat 'y' or <CR> as yes, 'n' as no.
  (fset 'yes-or-no-p 'y-or-n-p)
  )

;; xxxxx Save backup files (files endind with ~) to specific directory xxxxxxxxx
(make-directory "~/tmp/emacs/auto-save/" t)
(setq backup-directory-alist
      `(("." . ,(expand-file-name "~/tmp/emacs/auto-save/"))))
;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


;; Indicate in the (right) fringe which lines were wrapped by visual-line-mode
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))

;; Enable visual-fill-column-mode everytime visual-line-mode is enabled
(add-hook 'visual-line-mode-hook
          (lambda ()
            ;; (visual-fill-column-mode)  ;; Nice minor-mode, but it comflicts with git-gutter
            (use-package adaptive-wrap
              :ensure t
              :config
              (adaptive-wrap-prefix-mode))
            )
          )
#+end_src

** winner-mode
#+begin_src emacs-lisp
;; Winner mode
(use-package winner
  :config
  (winner-mode)
  )
#+end_src

** COMMENT rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :defer t
  :config
  (set-face-foreground 'rainbow-delimiters-depth-1-face "#c66")  ; red
  (set-face-foreground 'rainbow-delimiters-depth-2-face "#6c6")  ; green
  (set-face-foreground 'rainbow-delimiters-depth-3-face "#69f")  ; blue
  (set-face-foreground 'rainbow-delimiters-depth-4-face "#cc6")  ; yellow
  (set-face-foreground 'rainbow-delimiters-depth-5-face "#6cc")  ; cyan
  (set-face-foreground 'rainbow-delimiters-depth-6-face "#c6c")  ; magenta
  (set-face-foreground 'rainbow-delimiters-depth-7-face "#ccc")  ; light gray
  (set-face-foreground 'rainbow-delimiters-depth-8-face "#999")  ; medium gray
  (set-face-foreground 'rainbow-delimiters-depth-9-face "#666")  ; dark gray
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+end_src

** conf-mode                                                               :Doxygen:
#+begin_src emacs-lisp
(use-package conf-mode
  ;; :ensure nil
  :mode
  ("\\PKGBUILD$" . conf-mode)
  ("\\Doxyfile" . conf-mode)
  ("\\.ini" . conf-windows-mode)
  )
#+end_src
** Ediff: use single frame
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :custom
  (ediff-window-setup-function 'ediff-setup-windows-plain)
)
#+end_src

** Keybindigns                                                         :Keybindings:
#+begin_src emacs-lisp
(defun start-term-zsh-or-bash ()
  "Start zsh, if available, or bash using `ansi-term'."
  (interactive)
  (let ((zsh "/bin/zsh")
        (bash "/bin/bash"))
    (if (file-executable-p zsh)
        (ansi-term zsh)
      (ansi-term bash))))


(use-package emacs
  :ensure nil
  :bind (
         ([f2] . delete-window)
         ([f3] . bury-buffer) ; put the current buffer at the end of the buffer list
         ([mouse-9] . bury-buffer) ; put the current buffer at the end of the buffer list
         ([C-f3] . unbury-buffer) ; change the buffert at the end of the buffer list to the current buffer
         ([mouse-8] . unbury-buffer) ; change the buffert at the end of the buffer list to the current buffer
         ([f4] . kill-current-buffer) ;C-x k
         ([C-f11] . browse-default-dir)
         ([S-f11] . browse-default-dir-in-emacs)
         ([C-S-f11] . open-terminal-default-dir)
         ("C-z" . eshell)
         ("M-z" . start-term-zsh-or-bash)
         ("C-c o" . other-frame) ; When there are multiple frames, change to another frame
         ("C-c r" . revert-buffer)
         ("C-x C-b" . ibuffer)
         ("C-x d" . duplicate-dwim)
         ;; Note that "C-x x t" calls `toggle-truncate-lines`. Thus, I
         ;; set "C-x x v" to toggle visual-line-mode
         ("C-x x v" . visual-line-mode)

         ;; Use "pause" to set a window as dedicated
         ([pause] . toggle-window-dedicated)
         )
  )

;; Default keybinging for complete-symbol is <C-M-i>
;;(global-set-key (kbd "<C-tab>") 'completion-at-point)


;; Note that the default keybind can also be used, which is "C-x c i"
;; (global-set-key (kbd "M-i") 'consult-imenu)
;; (global-set-key (kbd "M-I") 'imenu)  ;; Use Alt+Shift+i for standard imenu
#+end_src

** which-key
#+begin_src elisp
(use-package which-key
  :ensure t
  :config (which-key-mode)
  :diminish which-key-mode
  )
#+end_src

** windmove                                                            :Keybindings:
#+begin_src emacs-lisp
(use-package windmove
  :bind
  ;; Note that windmove has the "(windmove-default-keybindings 'shift)"
  ;; function to bind the keymaps, but it binds to a keymap specific to
  ;; windmove. I prefer to add them to the global keymap such that other modes
  ;; can overwrite it. This is mainly useful in org-mode.
  ("<S-right>" . windmove-right)
  ("<S-left>" . windmove-left)
  ("<S-up>" . windmove-up)
  ("<S-down>" . windmove-down)
  )
#+end_src

** Multiple Cursors                                                    :Keybindings:
#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind
  ("C-S-c C-S-c" . mc/edit-lines)
  ("C-S-c C-S-l" . mc/mark-all-like-this)
  ("C->" . mc/mark-next-like-this)
  ("C-<" . mc/mark-previous-like-this))


(use-package ace-mc
  :ensure t
  :bind (
         ("C-)" . ace-mc-add-multiple-cursors)
         ("C-M-)" . ace-mc-add-single-cursor)))
#+end_src

** Go to last change                                                   :Keybindings:
#+begin_src emacs-lisp
(use-package goto-last-change
  :ensure t
  :bind ("C-x C-n" . goto-last-change))
#+end_src

** comment-dwim-2                                                      :Keybindings:
#+begin_src emacs-lisp
(use-package comment-dwim-2
  :ensure t
  :bind ("M-;" . comment-dwim-2)
  :config
  (setq comment-dwim-2--inline-comment-behavior 'reindent-comment))
#+end_src

** Extra packages                                                      :Keybindings:
#+begin_src emacs-lisp
(use-package diminish
 :ensure t)

;; While autorevert is a native functionality, we use "use-package" here as a way to diminish its modline
(use-package autorevert
  :defer t
  :diminish auto-revert-mode)

(use-package discover-my-major
  :ensure t
  :bind
  ;; Discover Major mode keybindings with 'discover-my-major'
  ("C-h C-m" . discover-my-major)
  )

(use-package drag-stuff
  :ensure t
  :bind (
         ;; Allow you to use M-up and M-down to move a line up or down
         ([(meta up)] . drag-stuff-up)
         ([(meta down)] . drag-stuff-down)
         ([(meta right)] . drag-stuff-right)
         ([(meta left)] . drag-stuff-left)
         )
  )

(use-package rainbow-mode
  :ensure t
  :defer t
  :hook
  (help-mode . rainbow-mode)  ;; Enable by default in help buffers (useful for faces)
  :config
  ;; Add help-mode to rainbow-html-colors-major-mode-list such that HTML colors are also colored
  (add-to-list 'rainbow-html-colors-major-mode-list 'help-mode)
  (add-to-list 'rainbow-html-colors-major-mode-list 'org-mode)
  (add-to-list 'rainbow-html-colors-major-mode-list 'qml-mode)
  )


(use-package expand-region
  :ensure t
  :bind (
         ("C-=" . er/expand-region)
         ("C-M-=" . er/contract-region)
         )
  )

(use-package smartparens
  :ensure t
  :defer t
  :hook
  (prog-mode . smartparens-mode)
  (markdown-mode . smartparens-mode)
  (org-mode . smartparens-mode)
  :config
  ;; Stop pairing single quotes in elisp
  (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
  (sp-local-pair 'org-mode "=" "=" :actions '(wrap))
  (sp-local-pair 'org-mode "~" "~" :actions '(wrap))
  (sp-local-pair 'org-mode "*" "*" :actions '(wrap))
  (sp-local-pair 'org-mode "/" "/" :actions '(wrap))
  )

(use-package unfill
  :ensure t
  :bind
  (("M-Q" . unfill-paragraph))
  )

(use-package anzu
  :ensure t
  :init
  (global-anzu-mode)
  ;; Remap query-replace and query-replace-regexp with anzu versions
  (global-set-key [remap query-replace] 'anzu-query-replace)
  (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
  )

(use-package lorem-ipsum
  :ensure t
  :commands (Lorem-ipsum-insert-list Lorem-ipsum-insert-sentences Lorem-ipsum-insert-paragraphs)
  )
#+end_src

** ace window: Easily jump to any window with "C-x o"                          :Ace:
Replace the standard ~other-window~ (=C-x o=) function with ace-window.

Note that with a prefix argument (=C-u=) ace-window swaps to current and the other window.
With *two* prefix arguments (=C-u C-u=) it deletes the other window instead.

You can also start by calling ace-window and then decide to switch the action to delete or
swap etc. By default the bindings are:
x - delete window
m - swap windows
M - move window
c - copy window
j - select buffer
n - select the previous window
u - select buffer in the other window
c - split window fairly, either vertically or horizontally
v - split window vertically
b - split window horizontally
o - maximize current window
? - show these command bindings

#+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :bind
  ([remap other-window] . ace-window)
  )
#+end_src

** Find-file-at-point                                                         :ffap:
Replace regular find-file and related functions with ffap versions
#+begin_src emacs-lisp
(use-package ffap
  :init
  (ffap-bindings)
  )
#+end_src

*** Disable ffap bindings in dired-mode buffers                              :Dired:
Getting the file name at point is problematic in dired buffers, since it requires me to
delete the text in order to use the completion system to open a file.
#+begin_src emacs-lisp
(use-package dired
  ;; :custom
  ;; (dired-at-point-require-prefix t)
  :bind (:map dired-mode-map
              ("C-x C-f" . ido-find-file)
              )
  )
#+end_src

** sudo-edit                                                                  :sudo:
#+begin_src emacs-lisp
(use-package sudo-edit
  :ensure t
  :commands sudo-edit
  )
#+end_src

** World clock
Use the ~world-clock~ command to see the times
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :custom
  (zoneinfo-style-world-list '(
                               ("America/Fortaleza" "Fortaleza")
                               ;; ("America/New_York" "New York")
                               ;; ("Europe/London" "London")
                               ;; ("Europe/Paris" "Paris")
                               ;; ("CET" "Stockholm")
                               ("Australia/Sydney" "Sydney")
                               ("America/Vancouver" "Vancouver")
                               ("Asia/Kolkata" "India")
                               ))
  )

#+end_src

** Address Mode: Buttonize URLs and e-mail addresses
You can open links by clicking or with the =C-c RET= keybinding.

#+begin_src emacs-lisp
;; global-goto-address-mode is only available since Emacs28
(when (fboundp 'global-goto-address-mode)
  (global-goto-address-mode 1)
  )
#+end_src

** auto-insert
#+begin_src emacs-lisp
(use-package autoinsert
  :custom
  (auto-insert-directory (concat user-emacs-directory "auto-insert"))
  :config
  (add-to-list 'auto-insert-alist
               (cons '(cmake-mode "Basic CMakeLists template")
                     "CMakeLists.txt"))
  (add-to-list 'auto-insert-alist
               (cons '("conanfile.txt" "Basic conanfile template")
                     "conanfile.txt"))
  (add-to-list 'auto-insert-alist
               (cons '("CMakePresets.json" "Basic CMakePresets template")
                     "CMakePresets.json"))
  (add-to-list 'auto-insert-alist
               (cons '("CMakeUserPresets.json" "Basic CMakeUserPresets template")
                     "CMakeUserPresets.json"))
  (add-to-list 'auto-insert-alist
               (cons '("qmldir" "Basic qmldir template")
                     "qmldir"))
  )
#+end_src

** pulsar
#+begin_src emacs-lisp
(use-package pulsar
  :ensure t
  :config
  (add-to-list 'pulsar-pulse-functions 'jump-to-register)
  (add-to-list 'pulsar-pulse-functions 'pixel-scroll-interpolate-down)
  (add-to-list 'pulsar-pulse-functions 'pixel-scroll-interpolate-up)

  (pulsar-global-mode 1)
  )
#+end_src

** googles -> Highlight modified region using pulse
#+begin_src emacs-lisp
(use-package goggles
  :ensure t
  :hook ((prog-mode text-mode) . goggles-mode)
  :config
  (setq-default goggles-pulse t)) ;; set to nil to disable pulsing
#+end_src

** COMMENT olivetti -> similar to writeroom and darkroom
#+begin_src emacs-lisp
(use-package olivetti
  :ensure t
  :bind ("C-x x o" . olivetti-mode)
  )
#+end_src

** TODO turbo-log
Check https://github.com/Artawower/turbo-log

** TODO file-info
https://github.com/Artawower/file-info.el

** helpful
A better Emacs *help* buffer

#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :bind
  (("C-h f" . #'helpful-callable)
   ("C-h v" . #'helpful-variable)
   ("C-h k" . #'helpful-key)
   ("C-h x" . #'helpful-command))
  )
#+end_src

** Setting display-buffer-alist: bottom-buffer-manager
Here I only define an "action function" that I can use when adding an entry to
=display-buffer-alist=. When this "action function" is used, it will try to display the
buffer in the following order of preference:
- If there is already a window displaying the buffer, use that.
- If there is a window displaying the =*compilation*= buffer, use that.
- If none of the above, display the buffer at bottom.


#+begin_src emacs-lisp
(use-package bottom-buffer-manager
  :ensure (bottom-buffer-manager :type git :host github :protocol ssh
                                 :repo "darcamo/bottom-buffer-manager" :depth nil)
  :commands (bottom-buffer-manager-display-action-function))
#+end_src

** tldr client
A [[https://github.com/tldr-pages/tldr][tldr]] client for Emacs.
- https://github.com/kuanyui/tldr.el


#+begin_src emacs-lisp
(use-package tldr
  :ensure t
  :commands (tldr)
  ;; :custom
  ;; (tldr-enabled-categories '("common" "linux"))
)
#+end_src

Usage

- =M-x tldr=
- Use =C-c C-b=, =C-c C-f= or =r=, =l=, or =[=, =]= to navigate in lookup history.
- Use =SPC= to lookup another command
- Notice that at the first time using, it will automatically download the latest tldr docs to local.
- You can use =M-x tldr-update-docs= to update docs.

** Systemd

#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :mode
  ("\\.service\\'" . conf-mode))
#+end_src
* Scrolling and mouse                                               :Mouse:Scrolling:
#+begin_src emacs-lisp
;; (setq scroll-step 1)
;; (setq scroll-margin 1)
(setq scroll-conservatively 101)
;; (setq scroll-up-aggressively 0.01)
;; (setq scroll-down-aggressively 0.01)
;; (setq auto-window-vscroll nil)
;; (setq fast-but-imprecise-scrolling nil)
(setq mouse-wheel-scroll-amount '(3 ((shift) . 1)))
(setq mouse-wheel-progressive-speed nil)
;; ;; Horizontal Scroll
;; (setq hscroll-step 1)
;; (setq hscroll-margin 1)

(pixel-scroll-precision-mode)
#+end_src

* Version control
** git-gutter
#+begin_src emacs-lisp
(use-package git-gutter
  :ensure t
  :config
  (global-git-gutter-mode +1)
  ;; The default is " GitGutter", but I don't want to waste
  ;; space in the modeline with that
  (setq git-gutter:lighter ""))
#+end_src

** git-modes: Major mode for gitconfig, gitignore and gitattributes
package: git-modes
#+begin_src emacs-lisp
(use-package git-modes
  :ensure t
  :defer t)
#+end_src

** Magit                                                                     :Magit:
*** General configuration
#+begin_src emacs-lisp
(use-package transient
  :ensure (transient :type git :host github :repo "magit/transient")
  )

(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status)
  :custom
  (magit-diff-refine-hunk t)  ;; Note sure about the effect of this one
  (magit-format-file-function 'magit-format-file-nerd-icons)
  )


;; Add an option to magit to update all submodules
;; You can use "-r" to add "--recursive"
;; https://www.reddit.com/r/emacs/comments/1187mmq/can_magit_update_synce_and_init_all_submodules/
(defun evz/setup-magit-submodule-update-all ()
  (unless (condition-case nil
              (transient-get-suffix 'magit-submodule "U")
            (error nil)) ;; catch error if suffix does not exist, and return nil to (unless)
    (transient-define-suffix magit-submodule-update-all (args)
      "Update all submodules"
      :class 'magit--git-submodule-suffix
      :description "Update all modules    git submodule update --init [--recursive]"
      (interactive (list (magit-submodule-arguments "--recursive")))
      (magit-with-toplevel
        (magit-run-git-async "submodule" "update" "--init" args)))
    (transient-append-suffix 'magit-submodule '(2 -1) ;; add as last entry in the 3rd section
      '("U" magit-submodule-update-all))))

(add-hook 'magit-mode-hook #'evz/setup-magit-submodule-update-all)
#+end_src
*** Enable smartparens-mode in git-commit-mode
#+begin_src emacs-lisp
(use-package magit
  :hook
  (git-commit-mode . smartparens-mode)
  )
#+end_src
*** Magit with Difftastic
See [[https://tsdh.org/posts/2022-08-01-difftastic-diffing-with-magit.html][this link]].

*** Magit-delta
You need to install the =delta= program in the machine.

In Arch Linux, the name of the package is =git-delta=.

#+begin_src emacs-lisp
(defun has-delta? ()
  "Return t if the delta program is installed."
  (if (executable-find "delta")
      t
    nil))

(when (has-delta?)
  ;; We only add the magit-delta package if delta is installed in the machine.
  (use-package magit-delta
  :ensure t
  :hook (magit-mode . magit-delta-mode)))
#+end_src
** Git timemachine
#+begin_src emacs-lisp
(use-package git-timemachine
  :ensure t
  :commands (git-timemachine)
  )
#+end_src

** Blamer
#+begin_src emacs-lisp
(use-package blamer
  :ensure t
  ;; :demand t
  :commands (blamer-show-posframe-commit-info blamer-mode global-blamer-mode)
  :bind (("s-i" . blamer-show-posframe-commit-info))
  ;; :defer 20
  :custom
  (blamer-idle-time 0.3)
  (blamer-min-offset 70)
  ;; (blamer-datetime-formatter "[%s] ")
  ;; (blamer-author-formatter "%s ")
  ;; (blamer-commit-formatter "✏ %s")
  (blamer-self-author-name "🙋")
  (blamer-type 'visual)
  ;; :custom-face
  ;; (blamer-face ((t :foreground "#7a88cf"
  ;;                  :background nil
  ;;                  :height 140
  ;;                  :italic t)))
  ;; :config
  ;; (global-blamer-mode 1)
  )
#+end_src

** magit-todos                                                               :Magit:
#+begin_src emacs-lisp
(use-package magit-todos
  :ensure t
  :after magit
  :config (magit-todos-mode 1)
  :custom
  (magit-todos-exclude-globs '(".git/" "debug-adapters" "snippets/" "org-mode-setup/new_task.org"))
  )
#+end_src

* COMMENT Emacs server
#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+end_src

* Artist-mode
#+begin_src emacs-lisp
(use-package artist
  :defer artist
  :hook
  (artist-mode . (lambda ()
   (add-to-list 'prettify-symbols-alist '("->" . "→"))
   (setq prettify-symbols-unprettify-at-point t)
   (prettify-symbols-mode)
   ))
  )
#+end_src

* Spell and grammar checking                                          :SpellChecking:
** Spell checking config
#+begin_src emacs-lisp
;; find aspell and hunspell automatically
(cond
 ;; try hunspell at first
 ;; if hunspell does NOT exist, use aspell
 ((executable-find "hunspell")
  (setq ispell-program-name "hunspell")
  (setq ispell-local-dictionary "english")  ;; en_US
  (setq ispell-local-dictionary-alist
        ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
        ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
        '(
          ("english" "[[:alpha:]]" "[^[:alpha:]]" "[']" t ("-d" "en_US") nil utf-8)
          ("brasileiro" "[[:alpha:]]" "[^[:alpha:]]" "[']" t ("-d" "pt_BR") nil utf-8)
          )))


 ((executable-find "aspell")
  (setq ispell-program-name "aspell")
  ;; (set-default 'ispell-local-dictionary "english")
  ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
  (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))))



;; Spell checking in org-mode files
;; Make spell checking ignore PROPERTIES and LOGBOOK drawers
(add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
;; Make spell checking ignore SRC blocks
(add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))

;; Skip some math environments
(add-to-list 'ispell-skip-region-alist '("\\\\begin{multline}" . "\\\\end{multline}"))
(add-to-list 'ispell-skip-region-alist '("\\\\begin{equation}" . "\\\\end{equation}"))
(add-to-list 'ispell-skip-region-alist '("\\\\begin{align}" . "\\\\end{align}"))
#+end_src

** Gramar checking config
See [[https://languagetool.org/pt-BR/premium][languagetool]] and the flycheck-languagetool package.

There is also lsp-grammarly, but it requires an account.
** Functions
#+begin_src emacs-lisp
;; Synonyms (Lookup in a browser)
(defun lookup-synonym ()
  "Look up the current word's synonyms in a browser.
    If a region is active (a phrase), lookup that phrase."
  (interactive)
  (let (myword myurl)
    (setq myword
          (if (and transient-mark-mode mark-active)
              (buffer-substring-no-properties (region-beginning) (region-end))
            (thing-at-point 'symbol)))

    (setq myword (replace-regexp-in-string " " "_" myword))
    (setq myurl (concat "http://thesaurus.reference.com/browse/" myword))
    (browse-url myurl)
    ))


(defun darcamo/toggle-ispell-dictionary ()
  "Toggle between 'english' and 'brasileiro' dictionaries."
  (interactive)
  (if (string= ispell-local-dictionary "english")
      (setq ispell-local-dictionary "brasileiro")
    (setq ispell-local-dictionary "english")
    )
  (message (concat "Set 'ispell-local-dictionary' to " ispell-local-dictionary))
  )
#+end_src

** Keybindings                                                         :Keybindings:
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :bind (
         ([f7] . ispell)
         ([S-f7] . ispell-region)
         ([C-f7] . darcamo/toggle-ispell-dictionary)
         ([f12] . ispell-word)

         ;; Use Ctrl + f12 to lookup the definition of the word at point in the
         ;; Cambridge dictionary and Ctrl + Shift + f12 to lookup for synonyms in
         ;; www.thesaurus.com
         ([C-f12] . dictionary-search)
         ;; ([C-f12] . dictionary-lookup-definition)
         ([C-S-f12] . lookup-synonym)
         ;; ([M-f12] . thesaurus-choose-synonym-and-replace)
         :map prog-mode-map
         ;; In any programming mode, change the F7 keybinding to be a programming
         ;; specific function that only spellchecks comments and strings
         ([f7] . ispell-comments-and-strings)
         )
  )
#+end_src

* Org-mode                                                                  :OrgMode:
** General
*** Config
#+begin_src emacs-lisp
(defun my-get-org-file-apps ()
  "Get the value that I want to pass to org-file-apps."
  '(
    (auto-mode . emacs)
    (directory . emacs)
    ("\\.mm\\'" . default)
    ("\\.x?html?\\'" . default)
    ("pdf" . "evince %s")
    ("\\.pdf::\\([0-9]+\\)\\'" . "evince -p %1 %s")  ;; Link containing a specific page
    ("\\.od[s|p|t]" . default)
    ("xmind" . "xmind-zen %s")
    )
  )

(use-package org
  :mode
  ;; Usa o org-mode para arquivos README
  ("README$" . org-mode)
  ;; Usa o org-mode para arquivos com extensão
  ("\.org_archive$" . org-mode)
  :custom
  ;; Enable org-indent-mode by default
  (org-startup-indented t)

  ;; When tags are added, sort them alfabetically. However, always put
  ;; the "ATTACH" tag at the end
  (org-tags-sort-function (lambda (x y)
                            (if (string= "attach" (downcase x))
                                nil
                              (if (string= "attach" (downcase y))
                                  t
                                (string< x y)))))

  (org-attach-use-inheritance t)

  (org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                          (vm-imap . vm-visit-imap-folder-other-frame)
                          (gnus . org-gnus-no-new-news)
                          (file . find-file)
                          (wl . wl-other-frame)))
  (org-preview-latex-default-process 'dvisvgm)
  (org-hide-emphasis-markers t)  ;; font-lock should hide the emphasis markers
  (org-image-actual-width '(600))


  ;; T0D0 Keywords and colors
  (org-todo-keywords
   '((sequence "TODO(t)" "WAIT(w!)"  "|" "DONE(d!)" "DELE(e!)")
     (sequence "|" "CANC(c!)")
     (sequence "STARTED" "|")
     (sequence "CYCLIC" "|")
     (sequence "PROJ" "SOMEDAY" "|" "FINALIZADO(!)" "CANC(!)")
     (sequence "|" "FINALIZADO(!)") ; Para compras na internet após receber o produto e qualificar
     ;; (sequence "TODO(t) STARTED WAIT(w@/!) | PUBLISHED(p) REJECTED(r@/!)")
     ))

  ;; General
  (org-directory (if (system-type-is-windows) "~/../../Dropbox/org/"
                   "~/org"))

  ;; Change C-a and C-e behaviour in org-mode
  (org-special-ctrl-a/e t)

  ;; Indica se uma linha em branco deve ser inserida antes de um heading, mas não
  ;; antes de uma lista. O ideal é usar auto, mas parece não funcionar direito
  (org-blank-before-new-entry
   '((heading . auto) (plain-list-item . nil)))

  ;; tell org-mode to use the default system programn to open open office documents
  (org-file-apps (my-get-org-file-apps))

  ;; When editing source code (with C-c ') Show edit buffer in the
  ;; current window, keeping all other windows.
  (org-src-window-setup 'current-window)

  ;; The column to which tags should be indented in a headline. If this
  ;; number is positive, it specifies the column.  If it is negative, it
  ;; means that the tags should be flushright to that column.  For example,
  ;; -80 works well for a normal 80 character screen.
  ;;
  ;; We use the value -85 here because in org-mode we set the value of fill-column
  ;; to 90. Then we need 3 characters for the ellipsis and a bit more because the
  ;; "ATTACH" tag uses a larger font size.
  (org-tags-column -85)

  ;; Disallow editing invisible parts (folded headlines) to avoid accidental
  ;; modifications.
  (org-catch-invisible-edits 'error)

  ;; Non-nil means single character alphabetical bullets are allowed.
  (org-list-allow-alphabetical t)

  ;; Logging
  ;; insert state change notes and time stamps into a drawer called LOGBOOK
  (org-log-into-drawer t)

  ;; Properties
  ;; Set global properties such that you do not need a line such as
  ;; #+PROPERTY: Effort_ALL 0 0:10 0:20 0:30 1:00 2:00 3:00 4:00 8:00
  ;; in the beginning of each org file.
  (org-global-properties
   '(("Effort_ALL". "0 0:10 0:20 0:30 1:00 1:30 2:00 3:00 4:00 5:00 6:00 7:00 8:00")))

  ;; Persistent Tags
  (org-tag-persistent-alist
   '(
     ("ignore" . ?I)
     ("Doutorado" . ?d) ("noexport" . ?N) ("Errands" . ?E) ("crypt" . ?C) ("Projeto" . ?p) ("Leituras" . ?l)

     ;; An exclusive group with either Home or Trabalho. Trabalho is a
     ;; group tag that matches both "Atlântico" and "GTEL"
     (:startgroup . nil) ("Home" . ?h)
     (:startgrouptag) ("Trabalho" . ?t) (:grouptags) ("Atlântico" . ?a) ("GTEL" . ?g) ("Teradici") (:endgrouptag)
     (:endgroup . nil)

     (:startgroup . nil) ("Someday" . ?s) ("NextActions" . ?n) (:endgroup . nil)
     ))

  ;; Speed Commands
  ;; Enable speed-commands
  ;; Non-nil means, activate single letter commands at beginning of a headline.
  ;; Press "?" in the beginning of a headline to see the available commands.
  (org-use-speed-commands t)

  ;; Stuck Projects
  ;; Let's assume that you, in your own way of using Org mode, identify
  ;; projects with a tag "ProjTasks", and that you use a TODO keyword MAYBE
  ;; to indicate a project that should not be considered yet. Let's further
  ;; assume that the TODO keyword DONE marks finished projects, and that NEXT
  ;; and TODO indicate next actions. The tag "ProjInfo" indicates that the
  ;; headline is a information headline and should not be counted. Finally,
  ;; if the project contains the special word "IGNORE" anywhere, it should
  ;; not be listed either. In this case you would start by identifying
  ;; eligible projects with a tags/todo match1 ‘+ProjTasks/-MAYBE-DONE’, and
  ;; then check for TODO, NEXT, ProjInfo, and IGNORE in the subtree to identify
  ;; projects that are not stuck. The correct customization for this is
  (org-stuck-projects
   '("+Projeto-Someday/-MAYBE-DONE-FINALIZADO-CANC" ("NEXT" "TODO" "STARTED") ("ProjInfo")
     "\\<IGNORE\\>"))

  ;; Org-bibtex
  (org-bibtex-prefix "BIB_")
  (org-bibtex-export-arbitrary-fields t)
  ;; (setq org-bibtex-autogen-keys)
  :init



  ;; Allow unicode non-breaking space before and after org-mode emphasis
  ;;
  ;; By default it is not allowed and something like "/text/ bla" the "text" would
  ;; not be in italics. Here we change org-emphasis-regexp-components to allow " "
  ;; before and after org-mode emphasis.
  ;; See this question https://stackoverflow.com/questions/1218238/how-to-make-part-of-a-word-bold-in-org-mode
  (setcar org-emphasis-regexp-components "-[:space:]('\"{ ")
  (setcar (nthcdr 1 org-emphasis-regexp-components) "-[:space:].,:!?;'\")}\\[ ")
  (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)

  (when (boundp 'org-speed-commands)
    (add-to-list 'org-speed-commands
                 '("d" org-decrypt-entry))
    )

  ;; (add-to-list 'org-modules 'org-tempo t)  ;; org-tempo add completions for "<KEY" to create blocks. See
  ;; (add-to-list 'org-modules 'org-inlinetask t)  ;; org-tempo add completions for "<KEY" to create blocks. See

  ;; Only the headline with the tag is a project. Any children are part of the
  ;; project and not project themselves.
  (add-to-list 'org-tags-exclude-from-inheritance "Projeto")

  :hook
  (org-mode . (lambda () (setq fill-column 90)))
  (org-mode . (lambda () (outline-minor-mode t)))

  ;; Integration with Windmove
  (org-shiftup-final . windmove-up)
  (org-shiftdown-final . windmove-down)
  (org-shiftright-final . windmove-right)
  (org-shiftleft-final . windmove-left)
  )
#+end_src

*** Functions
#+begin_src emacs-lisp
;; Used in a speed comamnd
(defun ded/org-show-next-heading-tidily ()
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (outline-next-heading)
    (unless (and (bolp) (org-at-heading-p))
      (org-up-heading-safe)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))


;; Used in a speed comamnd
(defun ded/org-show-previous-heading-tidily ()
  "Show previous entry, keeping other entries closed."
  (let ((pos (point)))
    (outline-previous-heading)
    (unless (and (< (point) pos) (bolp) (org-at-heading-p))
      (goto-char pos)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))

;; https://stackoverflow.com/questions/10969617/hiding-markup-elements-in-org-mode
(defun darcamo/org-toggle-emphasis ()
  "Toggle hiding/showing of org emphasize markers."
  (interactive)
  (if org-hide-emphasis-markers
      (set-variable 'org-hide-emphasis-markers nil)
    (set-variable 'org-hide-emphasis-markers t))
  (org-mode-restart))


;; Advice org-fill-paragraph such that id does nothing inside code blocks
;; src-block. This will be be binded to M-q in org-mode buffers
(defun my-org-fill-paragraph ()
  (interactive)
  (when (not (equal (org-element-type (org-element-at-point)) 'src-block))
    (org-fill-paragraph)))

(defun my-org-unfill-paragraph ()
  (interactive)
  (when (not (equal (org-element-type (org-element-at-point)) 'src-block))
    (unfill-paragraph)))
#+end_src

*** Keybindings                                                        :Keybindings:
#+begin_src emacs-lisp
;; Local Keybinding
(defun my-org-at-citation-p ()
  "docstring"
  (not (null (citar-org-key-at-point)))
  )

(use-package org
  :bind (
         ;; Map "C-c l" globally to org-store-link
         ("C-c l" . org-store-link)
         :map org-mode-map
         ([C-M-return] . org-meta-return)
         ([f8] . org-toggle-link-display)
         ([S-f8] . org-toggle-inline-images)
         ([C-f8] . darcamo/org-toggle-emphasis)

         ;; This will open a PDF file with the same name of the org-mode file
         ;; Useful when you are exporting the org-mode buffer to PDF
         ([f10] . (lambda () (interactive) (find-file (concat (file-name-sans-extension (file-name-nondirectory (buffer-file-name))) ".pdf"))))
         ([S-f10] . (lambda () (interactive) (find-file (concat (file-name-sans-extension (file-name-nondirectory (buffer-file-name))) ".html"))))
         ([S-f10] . (lambda () (interactive) (ver-pdf-no-evince (concat (file-name-sans-extension (file-name-nondirectory (buffer-file-name))) ".pdf"))))
         ([C-f10] . (lambda () (interactive) (browse-url (concat (file-name-sans-extension (file-name-nondirectory (buffer-file-name))) ".html"))))
         ("M-q" . my-org-fill-paragraph)
         ("M-Q" . my-org-unfill-paragraph)

         ;; xxxxx Enable Drag-stuff when not in an org-mode heading xxxxxxxxxxxxxxxxx
         ;; If cursor is in a headline or in a list item, use default org-mode
         ;; function, otherwise use drag-stuff function
         ("<M-up>" . (lambda ()
                       (interactive)
                       (call-interactively
                        (if (or (org-at-heading-p) (org-at-item-p) )
                            'org-metaup
                          'drag-stuff-up))))

         ;; If cursor is in a headline or in a list item, use default org-mode
         ;; function, otherwise use drag-stuff function
         ("<M-down>" . (lambda ()
                         (interactive)
                         (call-interactively
                          (if (or (org-at-heading-p) (org-at-item-p) )
                              'org-metadown
                            'drag-stuff-down))))

         ;; If cursor is in a headline, list item, or in a table,
         ;; use default org-mode function, otherwise use
         ;; drag-stuff function
         ("<M-right>" . (lambda ()
                          (interactive)
                          (call-interactively
                           (if (or (org-at-heading-p) (org-at-item-p) (org-at-table-p) (my-org-at-citation-p))
                               'org-metaright
                             'drag-stuff-right))))

         ;; If cursor is in a headline, list item, or in a table,
         ;; use default org-mode function, otherwise use
         ;; drag-stuff function
         ("<M-left>" . (lambda ()
                         (interactive)
                         (call-interactively
                          (if (or (org-at-heading-p) (org-at-item-p) (org-at-table-p) (my-org-at-citation-p))
                              'org-metaleft
                            'drag-stuff-left))))
         ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
         )
  )
#+end_src

** Agenda                                                                   :Agenda:
*** Config
#+begin_src emacs-lisp
;; My agenda super-agenda groups -> Used in my custom command to show the agenda
(setq my-agenda-org-super-agenda-groups '(
                                          (:name "Tarefas Concluídas"
                                                 :todo "DONE"
                                                 ;; :and (:regexp "State \"DONE\""
                                                 ;;               )
                                                 :face (:foreground "gray40")
                                                 :order 200) ;; Any item without order has a value of zero
                                          (
                                           :name "Started"
                                           :todo "STARTED")
                                          (
                                           :name "Importantes"
                                           :priority "A"
                                           :face "bold")
                                          (:name "Atrasadas"
                                                 :deadline past)
                                          (:name "Demais Tarefas"
                                                 :anything t)
                                          ))


(use-package org
  :bind ("C-c a" . org-agenda)
  :custom
  ;; Category Icons
  ;; ~/.emacs.d/Icons_For_Org-Mode_Category
  (org-agenda-category-icon-alist
   `(
     ("Papers" "/usr/share/icons/Humanity/mimes/24/application-pdf.svg" nil nil :ascent  center)
     ("Doutorado" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/registry-book.svg") nil nil :ascent  center)
     ("Book" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/registry-book.svg") nil nil :ascent  center)
     ("Carro" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/car.svg") nil nil :ascent  center)
     ("Escrever" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/write.svg") nil nil :ascent  center)
     ("Estudos" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/estudos.svg") nil nil :ascent  center)
     ("gtd" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/gtd.svg") nil nil :ascent  center)
     ("Refile" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/refile.svg") nil nil :ascent  center)
     ("IAB\\|GTEL\\|NAIVE\\|UFC.32\\|UFC.35\\|UFC.42" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/gtel.svg") nil nil :ascent  center)
     ("Patent" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/gtel25x25.png") nil nil :ascent  center)
     ("Projeto" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/project.svg") nil nil :ascent  center)
     ("Atlântico" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/atlantico.svg") nil nil :ascent center)
     ("Cíclicas" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/recycle.svg") nil nil :ascent center)
     ("Compras\\|Finanças" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/finances.svg") nil nil :ascent center)
     ("Someday" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/Global_thinking.svg") nil nil :ascent center)
     ("Stanford" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/graduate.svg") nil nil :ascent center)
     ("References" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/estudos.svg") nil nil :ascent  center)
     ("Eventos" ,(concat user-emacs-directory "Icons_For_Org-Mode_Category/event.svg") nil nil :ascent  center)
     ))

  ;; General
  (org-agenda-inhibit-startup t)

  ;; Vc pode incluir cada arquivo individualmente ou usar o comando abaixo para incluir todos
  ;; Including all org files from a directory into the agenda
  ;; (setq org-agenda-files (file-expand-wildcards "~/org/*.org"))
  ;; (setq org-agenda-files (quote ("~/org")))
  (org-agenda-files (file-name-concat org-directory "org-agenda-files.org"))


  (org-agenda-text-search-extra-files
   (append
    `(,(file-name-concat org-directory "escrever.org")
      ,(file-name-concat org-directory "supelec/supelec.org"))
    (directory-files (file-name-concat org-directory "OrgWiki/") t "^[^.#].*\\.\\(org$\\|org_archive$\\)")
    )
   )

  ;; Set refile targets to the agenda files
  (org-refile-targets '((org-agenda-files :maxlevel . 1)))

  ;; Use outline-path when refiling
  (org-refile-use-outline-path (quote file))

  ;; Non-nil means complete the outline path in hierarchical steps. We don't
  ;; want that, since we will use the refile with helm.
  (org-outline-path-complete-in-steps nil)

  ;; Faz com que tarefas escalonadas ou com deadlines não apareçam na lista
  ;; de todos (C-c a t)
  ;; (setq org-agenda-todo-ignore-with-date t)

  ;; Non-nil means, restore window configuration open exiting agenda.  Before
  ;; the window configuration is changed for displaying the agenda, the
  ;; current status is recorded.  When the agenda is exited with `q' or `x'
  ;; and this option is set, the old state is restored.
  (org-agenda-restore-windows-after-quit t)

  (org-tag-alist '((:startgrouptag)
                   ("Year")
                   (:grouptags)
                   ("{20[0-9][0-9]}")
                   (:endgrouptag)))

  ;; Custom agenda views
  (org-agenda-custom-commands
   '(
     ("a" "Agenda" (
                    (agenda "" ((org-super-agenda-groups my-agenda-org-super-agenda-groups)))
                    (tags-todo "NextActions" ((org-agenda-overriding-header "Task with tag NextActions")))
                    )
      )

     ("n" "Escolher tarefas para adicionar tag NextActions" todo "" (
                                                                     (org-agenda-todo-ignore-scheduled 'all)
                                                                     (org-agenda-filter-preset '("-NextActions" "-Finanças"))
                                                                     ))

     ("d" "Upcoming deadlines" agenda ""
      ((org-agenda-time-grid nil)
       (org-deadline-warning-days 365)
       (org-agenda-entry-types '(:deadline))
       ))
     ;; ("P" "Papers para Ler" tags-todo "+CATEGORY=\"LeituraDePapers\"")
     ("p" "Lista de Projetos" tags-todo "Projeto" ((org-use-tag-inheritance nil)))
     ("S" "Started Tasks" todo "STARTED" ((org-agenda-todo-ignore-with-date nil) (org-agenda-todo-ignore-scheduled nil)))
     ("W" "Tasks waiting on something" todo "WAIT" ((org-agenda-todo-ignore-with-date nil) (org-agenda-todo-ignore-scheduled nil)))
     ("R" "Refile New Notes and Tasks" tags "REFILE" ((org-agenda-todo-ignore-with-date nil) (org-agenda-todo-ignore-scheduled nil)))
     ;; ("g" "Agenda GTEL (exclui Francês e Home e Supélec)" agenda "" ((org-agenda-filter-preset (quote ("-Home" "-Francês" "-Supelec" "-Finanças")))))
     ;; ("f" "Agenda do Francês" agenda "" ((org-agenda-filter-preset (quote ("+Francês")))))
     ;; ("A" "Relatório de Atividades" agenda "" ((org-agenda-filter-preset (quote ("-Francês" "-Finanças" "-Revistas" "-Congressos" "-Feriado" "-Aniversários" "-CLOCK"))) (org-agenda-start-with-log-mode t) (org-agenda-archives-mode 'tree) (org-agenda-ndays 31)) "teste_relatorio.html")
     ("F" "Agenda das Finanças" agenda "" ((org-agenda-filter-preset (quote ("+Finanças")))))
     ;; Abaixo um exemplo de prefix key. Note que a primeira linha
     ;; (uma con-cell) serve para setar uma descrição para a
     ;; prefix key "h" e não é obrigatória.
     ;; ("h" . "HOME+Name tags searches") ; description for "h" prefix
     ;; ("hl" tags "+home+Lisa")
     ;; ("hp" tags "+home+Peter")
     ;; ("hk" tags "+home+Kim")
     ))



  ;; Agenda Sorting
  (org-agenda-sorting-strategy
   '(
     (agenda habit-down category-down time-up priority-down)
     (todo category-down priority-down)
     (tags priority-down category-keep)
     (search category-keep)
     )
   )
  )

(use-package org-indent
  :diminish org-indent-mode
  :commands org-indent-mode
  :defer t
  :hook
  (org-mode . org-indent-mode)
  )


(use-package org-tempo
  :defer t
  :commands (org-tempo-setup org-tempo-complete-tag)
  :hook
  (org-mode . org-tempo-setup)
  (org-tab-before-tab-emulation . org-tempo-complete-tag)
  )


(use-package org-super-agenda
  :ensure t
  :after org
  :custom
  (org-super-agenda-header-separator "--- ")
  :config
  (org-super-agenda-mode)

  ;; Customise some of the org-agenda faces
  ;; (set-face-attribute 'org-agenda-date nil :height 1.5 :foreground "Orange")
  (set-face-attribute 'org-agenda-date-today nil :height 1.5 :inherit 'org-agenda-date)
  )


;; (use-package origami
;;   :ensure t
;;   :after org-super-agenda
;;   :bind (:map org-super-agenda-header-map
;;               ;; Enable origami-mode in org-agenda
;;               ("<tab>" . origami-toggle-node)
;;               ;; ("C-M-p" . origami-previous-fold)
;;               ;; ("C-M-n" . origami-next-fold)
;;               )
;;   :hook
;;   (org-agenda-mode . origami-mode)
;;   )
#+end_src

** Attach
#+begin_src emacs-lisp
(use-package org-attach
  ;; The "attach" link type that I defined in my main gtd file uses the
  ;; org-attach-expand function.
  :commands (org-attach-expand org-attach-expand-link)
  :custom
  (org-attach-dir-relative t)

  ;; Only defined after org-attach is loaded
  (org-attach-store-link-p 'attached)

  (org-link-elisp-skip-confirm-regexp
   (regexp-opt '("org-open-file" "browse-dir-sftp" "browse-dir")))
                                        ; )
  )
#+end_src

** Extra packages for org-babel language suport
*** Jupyter
#+begin_src emacs-lisp
(use-package jupyter
  :defer t
  :ensure t
  )

(use-package jupyter-org-client
  :after jupyter
  :config
  (jupyter-org-define-key (kbd "M-<return>") (lambda () (interactive) (org-ctrl-c-ctrl-c) (org-babel-next-src-block)))
  (jupyter-org-define-key (kbd "C-M-p") (lambda () (interactive) (org-babel-previous-src-block) (next-line)))
  (jupyter-org-define-key (kbd "C-M-n") (lambda () (interactive) (org-babel-next-src-block) (next-line)))
  )

  ;; (defun darlan-exec ()
  ;;   "docstring"
  ;;   (interactive)
  ;;   (org-ctrl-c-ctrl-c) (org-babel-next-src-block)
  ;;   )
#+end_src

** Babel                                                                     :Babel:
#+begin_src emacs-lisp
(defun get-plantuml-jar-path ()
  "Get the path of the plantuml jar file."
  (let* ((distro-name (get-linux-distro-name))
         (is-ubuntu? (string= "Ubuntu" distro-name)))
    (if is-ubuntu?
        "/usr/share/plantuml/plantuml.jar"
      "/usr/share/java/plantuml/plantuml.jar")))


(use-package org
  :defer t
  :custom

  ;; General Configuration
  ;; turn-off confirmation when evaluating babel blocks
  (org-confirm-babel-evaluate nil)

  ;; If set to t, TAB works natively in code blocks (Deixa o TAB muito lento)
  (org-src-tab-acts-natively nil)

  ;; Don't add any leading space to code inside src blocks (default is 2 spaces)
  (org-edit-src-content-indentation 0)

  ;; Change this to the appropriated jar location
  (org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0.11.jar")

  ;; Change this to the appropriated jar location
  (org-plantuml-jar-path (get-plantuml-jar-path))

  :bind
  ( :map org-mode-map
  ("M-." . org-babel-pop-to-session)
  )

  :init
  ;; Load Languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     ;; (R . nil)
     (ditaa . t)
     ;; (dot . nil)
     (emacs-lisp . t)
     ;; (gnuplot . t)
     ;; (haskell . t)
     ;; (ocaml . nil)
     (python . t)
     ;; ipython can be a better option then standard python
     ;;(ipython . t)
     (C . t)  ;; Adds 'C' and 'cpp' languages to org-babel
     ;; (ruby . nil)
     ;; (screen . nil)
     (shell . t)
     ;; (sql . nil)
     ;; (sqlite . nil)
     ;; (octave . t)
     ;; (matlab . t)
     (latex . t)
     (plantuml . t)
     (java . t)
     ;; (jupyter . t) ;; Requires the 'jupyter' emacs package and this must come last
     ))
  )
#+end_src

** Capture                                                                 :Capture:
*** Config
#+begin_src emacs-lisp
(setq my-financas-table-line-template "| | %^{Nome do gasto} | %^u | %^{Valor no débito} | %^{Valor no cartão} |")

(use-package org-capture
  :defer t
  :bind (("C-c c" . org-capture))
  :custom
  ;; Veja o E-mail [[wl:%25Newsletter/Org-Mode!#80wrgxs3yg.fsf@somewhere.org][Email from Sebastien Vauban: Re: {O} Feature request: two-l]]
  (org-capture-templates
        `(
          ;; xxxxx Start Capture a new tasks xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          ("t" "Adiciona nova tarefa")
          ("tt" "Nova Tarefa rápida (refile depois)" entry
           (file+headline "refile.org" "Inbox")
           (file ,(concat user-emacs-directory "org-mode-setup/new_task.org")))
          ("ta" "Tarefa do Atlântico" entry
           (file+headline "atlantico.org" "Lista de Tarefas")
           (file ,(concat user-emacs-directory "org-mode-setup/new_task.org")))
          ("tp" "Tarefa do Projeto NCR" entry
           (file+headline "ufc51-NCR.org" "Lista de Tarefas do Projeto")
           (file ,(concat user-emacs-directory "org-mode-setup/new_task.org")))
          ("td" "Tarefa do Doutorado" entry
           (file+headline "doutorado.org" "Lista de Tarefas")
           (file ,(concat user-emacs-directory "org-mode-setup/new_task.org")))
          ("tc" "Tarefa dentro do clock atual" entry
           (clock)
           (file ,(concat user-emacs-directory "org-mode-setup/new_task.org")))
          ;; xxxxx End Capture a new tasks xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          ;;
          ;; xxxxx Start Capture expenses data xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          ("f" "Adiciona novo gasto")
          ("fa" "Gasto com alimentação" table-line
           (id ,(get-me-an-org-id-for-the-month "Alimentação"))
           ,my-financas-table-line-template
           :table-line-pos "II-1"
           :immediate-finish t
           :jump-to-captured t)
          ("fc" "Gasto com contas" table-line
           (id ,(get-me-an-org-id-for-the-month "Contas"))
           ,my-financas-table-line-template
           :table-line-pos "II-1"
           :immediate-finish t
           :jump-to-captured t)
          ("ft" "Gasto com o carro ou transporte" table-line
           (id ,(get-me-an-org-id-for-the-month "Carro"))
           ,my-financas-table-line-template
           :table-line-pos "II-1"
           :immediate-finish t
           :jump-to-captured t)
          ("fe" "Gasto com Entretenimento" table-line
           (id ,(get-me-an-org-id-for-the-month "Entretenimento"))
           ,my-financas-table-line-template
           :table-line-pos "II-1"
           :immediate-finish t
           :jump-to-captured t)
          ("fd" "Gasto diversos" table-line
           (id ,(get-me-an-org-id-for-the-month "Diversos"))
           ,my-financas-table-line-template
           :table-line-pos "II-1"
           :immediate-finish t
           :jump-to-captured t)
          ;; xxxxx End Capture expenses data created with tasker xxxxxxxxxxxx
          ))
  )
#+end_src

*** Function to capture in other frame
#+begin_src emacs-lisp
;; Função que peguei na lista do org-mode
;; [[wl:%25Newsletter/Org-Mode!#877ha9nfgy.fsf@ginnungagap.bsc.es][Email from Lluís: {O} org-capture-other-frame]]
;; #########################################################################
;; # I've made a little function to launch org-capture on another frame,   #
;; # which is very handy when plugged into a hotkey and working with other #
;; # applications.                                                         #
;; #                                                                       #
;; # It lacks some settings that I already have active system wide (like   #
;; # no scrollbars, no toolbar and the like), so you should probably tune  #
;; # those (a defcustom for the frame parameters should suffice).          #
;; #                                                                       #
;; # In any case, tell me (directly, as I'm not not subscribed) if you're  #
;; # going to install this into org-mode. Otherwise I'll upload the        #
;; # snippet into emacs wiki:                                              #
;; #########################################################################

;; *Para usar, basta chamar a função my-org-capture-other-frame*
;; Para usar fora do emacs (com emacs --daemon rodando) tente algo como
;; : emacsclient -d $DISPLAY -e '(my-org-capture-other-frame)'
(defun my-org-capture-other-frame ()
  "Create a new frame and run org-capture."
  (interactive)
  (make-frame '((name . "Org-Capture")
                (width  . 120)
                (height .  20)
                (menu-bar-lines . 0)
                (tool-bar-lines . 0)
                (auto-lower . nil)
                (auto-raise . t)))
  (select-frame-by-name "Org-Capture")
  (if (condition-case nil
          (progn (org-capture) t)
        (error nil))
      (delete-other-windows)
    (my-org-capture-other-frame-cleanup)))

(defun my-org-capture-other-frame-cleanup ()
  "Close the Org-Capture frame."
  (if (equal "Org-Capture" (frame-parameter nil 'name))
      (delete-frame)))

(add-hook 'org-capture-after-finalize-hook 'my-org-capture-other-frame-cleanup)
#+end_src

** Clock In/Out
*** Functions
#+begin_src emacs-lisp
;; General Configuration
(defun my-clock-change-state (state)
  "If state is 'CYCLIC' return 'CYCLIC'. If it is any other todo keyword return
        'STARTED'. This is useful to set in the variable org-clock-in-switch-to-state."
  (interactive)
  (if (equal state "CYCLIC")
      (message "CYCLIC")
    (message "STARTED")
    )
  )


;; Automaticamente muda uma tarefa para STARTED se uma subtarefa for mudada p/ STARTED
;; Pegue em http://doc.norang.ca/org-mode.html#sec-15-44

;; Mark parent tasks as started
(defvar bh/mark-parent-tasks-started nil)

(defun bh/mark-parent-tasks-started ()
  "Visit each parent task and change TODO states to STARTED"
  (unless bh/mark-parent-tasks-started
    (when (equal org-state "STARTED")
      (let ((bh/mark-parent-tasks-started t))
        (save-excursion
          (while (org-up-heading-safe)
            (when (member (nth 2 (org-heading-components)) (list "TODO" "NEXT"))
              (org-todo "STARTED"))))))))

(add-hook 'org-after-todo-state-change-hook 'bh/mark-parent-tasks-started 'append)
#+end_src

*** Config
#+begin_src emacs-lisp
(use-package org-clock
  :custom
  ;; Change task state to STARTED when clocking in
  (org-clock-in-switch-to-state 'my-clock-change-state)

  ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
  (org-clock-out-remove-zero-time-clocks t)

  ;; When equal to "t", the current clocked task is included in clock reports
  (org-clock-report-include-clocking-task t)

  :bind
  (("C-c C-x C-j" . org-clock-goto))
  )

(use-package emacs
  :ensure nil
  :after org-clock
  :hook (post-command . (lambda ()
                          (let ((color (cond ((org-clocking-p) "green")
                                             (t "red"))))
                            (set-face-attribute 'mode-line nil :box `(:line-width 1 :color ,color))
                            )))
  )
#+end_src

** Crypt
#+begin_src emacs-lisp
(use-package epg
  :config
  ;; Org-crypt stoped working and emacs just hanged forever when trying to enncript.
  ;; In this link (https://stackoverflow.com/questions/76388376/emacs-org-encrypt-entry-hangs-when-file-is-modified)
  ;; I found the solution to set epg-wait-for-status to ignore.
  (fset 'epg-wait-for-status 'ignore)
  )

(use-package org-crypt
  :commands (org-decrypt-entry org-decrypt-entries org-encrypt-entry org-encrypt-entries)
  :custom
  (org-crypt-key "15798E79")

  ;; Possible values:
  ;; t        : Disable auto-save-mode for the current buffer
  ;;            prior to decrypting an entry.
  ;; nil      : Leave auto-save-mode enabled.
  ;;            This may cause data to be written to disk unencrypted!
  ;; 'ask     : Ask user whether or not to disable auto-save-mode
  ;;            for the current buffer.
  ;; 'encrypt : Leave auto-save-mode enabled for the current buffer,
  ;;            but automatically re-encrypt all decrypted entries
  ;;            *before* auto-saving.
  ;;            NOTE: This only works for entries which have a tag
  ;;            that matches `org-crypt-tag-matcher'.
  (org-crypt-disable-auto-save t)

  :config
  ;; (setq org-tags-exclude-from-inheritance (quote ("crypt" "Projeto")))
  (add-to-list 'org-tags-exclude-from-inheritance "crypt")
  ;; darcamo@gmail.com (see in the seahorse program)

  :init
  ;; Automatically encrypts everything that has the tag "crypt"
  ;; when you save the file
  (org-crypt-use-before-save-magic)
  )
#+end_src

** Export
*** Filter functions used in export
#+begin_src emacs-lisp
;; Use unicode character for non-breaking space in org-mode
;;
;; In org-mode one must use `\nbsp{}` to represent a non-breaking space. This is
;; replaced by `~` in Latex and by `&nbsp;` in HTML. However, its annoying and
;; ugly to have `\nbsp{}` in the org-mode buffer. The code below adds a filter
;; in org-export that replaces the unicode character for non-breaking space with
;; the appropriated value such that it can be used instead of `\nbsp{}`.
;; NOTE: You can enter the unicode non-breaking space with `C-x 8 SPC`
(defun darcamo/replace-unicode-non-break-space-org-filter (text backend info)
  "Replace the unicode character for nonbreaking space with '~' in latex,
'&nbsp;' in HTML, and a regular space in other backends."
  (if (org-export-derived-backend-p backend 'latex)
      (replace-regexp-in-string " "
                                "~"
                                text)
    (if (org-export-derived-backend-p backend 'html)
        (replace-regexp-in-string " "
                                  "&nbsp;"
                                  text)
      (replace-regexp-in-string " "
                                " "
                                text))
    )
  )


;; use speaker notes that work both with reveal.js and beamer
(defun darcamo/replace-notes-environment (text backend info)
  "Replace '\begin{notes} content \end{notes}' in beamer export
with a \note{content}. This is useful when you are creating
presentations in org-mode with both reveal and beamer. You can
add speaker notes inside '#+begin_notes' and '#+end_notes' as in
reveal."
  (if (org-export-derived-backend-p backend 'beamer)
      (replace-regexp-in-string "\\\\end{notes}"
                                "}"
                                (replace-regexp-in-string "\\\\begin{notes}"
                                                          "\\\\note{"
                                                          text))
    text
    )
  )
#+end_src

*** Config
#+begin_src emacs-lisp
(use-package org
  :config
  ;; Org Default Backends
  (add-to-list 'org-export-backends 'md)
  )


(use-package ox-extra
  :ensure org-contrib  ;; ox-extra is part of the org-contrib package
  :commands ox-extras-activate
  ;; NOTE: To avoid loading this package during emacs startup, the
  ;; ox-extras-activate function will be called in
  ;; org-export-before-processing
  ;;
  ;; :config
  ;; (ox-extras-activate '(ignore-headlines))
  )

(use-package ox
  :defer t
  :config
  (add-to-list 'org-export-filter-body-functions 'darcamo/replace-unicode-non-break-space-org-filter)
  (add-to-list 'org-export-filter-special-block-functions 'darcamo/replace-notes-environment)
  :custom
  (org-export-with-broken-links  'mark)
  :hook
  (org-export-before-processing . (lambda (arg) (ox-extras-activate '(ignore-headlines))))

  )


(use-package ox-latex
  :defer t
  :config
  (setq org-latex-pdf-process
        ;; This requires latexmk, but it has many advantages such as running
        ;; latex the correct number of times, support calling biber when
        ;; biblatex is used, etc
        '("latexmk -shell-escape -bibtex -output-directory=%o -lualatex %f")
        )
  (add-to-list 'org-latex-logfiles-extensions "glo")
  (add-to-list 'org-latex-logfiles-extensions "bbl")
  (add-to-list 'org-latex-logfiles-extensions "acn")
  (add-to-list 'org-latex-logfiles-extensions "ist")
  )
#+end_src

*** Latex templates
#+begin_src emacs-lisp
(use-package ox-latex
  :defer t
  :config
  (add-to-list
   'org-latex-classes
   '("sbrt"
     "\\documentclass{sbrt2017eng}
\\usepackage{hyperref}
\\usepackage[nolist]{acronym}
\\usepackage[backend=biber,doi=false,isbn=false, url=false, sorting=none, maxbibnames=3, giveninits=true, dateabbrev=true]{biblatex}
\\addbibresource{~/Dropbox/org/references/articles.bib}
\\addbibresource{~/Dropbox/org/references/articles_without_notes.bib}
\\usepackage{amssymb}
\\usepackage{amsmath}
\\usepackage{tikz}
\\usepackage{MathDefinitions}
[NO-DEFAULT-PACKAGES]  % do not include any of the default packages
[PACKAGES]             % \\usepackage statements for packages
[EXTRA]                % the stuff from #+LATEX_HEADER(_EXTRA)
     "
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  ;; NOTE: hyperref PACKAGE IS NOT INCLUDED! Add the file variable
  ;; org-latex-hyperref-template and set it to nil
  (add-to-list
   'org-latex-classes
   '("IEEEtran"
     "\\documentclass{IEEEtran}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{graphicx}
\\usepackage{longtable}
\\usepackage{amsmath}
\\usepackage{amssymb}
\\usepackage{capt-of}
\\usepackage{wrapfig}
\\usepackage{rotating}
\\usepackage[normalem]{ulem}
\\usepackage{MathDefinitions}
\\usepackage{siunitx}
\\usepackage{tikz}
\\usepackage{algorithm}
\\usepackage{algorithmic}
\\usepackage{booktabs}
\\usepackage{makecell}  % Provide the \\thead command
\\usepackage{subcaption}
\\usepackage[backend=biber,doi=false,isbn=false, url=false, sorting=none, maxbibnames=3, giveninits=true, dateabbrev=true]{biblatex}
\\usepackage[acronym, nomain, shortcuts, sanitizesort, nogroupskip, nopostdot, nonumberlist]{glossaries}
[NO-DEFAULT-PACKAGES]  % do not include any of the default packages
[PACKAGES]             % \\usepackage statements for packages
[EXTRA]                % the stuff from #+LATEX_HEADER(_EXTRA)
     "
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list
   'org-latex-classes
   '("gtelabnt"
     "\\documentclass[doutorado, brazil, english]{gtelabnt}
\\usepackage{csquotes}
\\usepackage{MathDefinitions}
\\usepackage{booktabs}
[NO-DEFAULT-PACKAGES]  % do not include any of the default packages
[PACKAGES]             % \\usepackage statements for packages
[EXTRA]                % the stuff from #+LATEX_HEADER(_EXTRA)
     "
     ("\\chapter{%s}" . "\\chapter*{%s}")
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list
   'org-latex-classes
   '("thesischapter"
     "\\documentclass{article}
\\usepackage{csquotes}
\\usepackage{MathDefinitions}
\\usepackage{booktabs}
\\usepackage{hyperref}
[NO-DEFAULT-PACKAGES]  % do not include any of the default packages
[PACKAGES]             % \\usepackage statements for packages
[EXTRA]                % the stuff from #+LATEX_HEADER(_EXTRA)
     "
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  )
#+end_src

*** Functions
#+begin_src emacs-lisp
;; Orgtbl Translator function for the GitHub-Flavored-Markdown(GFM)
;; Taken from https://gist.github.com/yryozo/5807243
(defun orgtbl-to-gfm (table params)
  "Convert the Orgtbl mode TABLE to GitHub Flavored Markdown."
  (let* ((alignment (mapconcat (lambda (x) (if x "|--:" "|---"))
                               org-table-last-alignment ""))
         (params2
          (list
           :splice t
           :hline (concat alignment "|")
           :lstart "| " :lend " |" :sep " | ")))
    (orgtbl-to-generic table (org-combine-plists params2 params))))


(defun darcamo/save-buffer-and-export-to-last-target ()
  "Save the burrent buffer and export org-mode buffer to the last exported target"
  (interactive)
  (progn
    (save-buffer)
    (if org-export-dispatch-last-action
        (org-export-dispatch 4)
      (message "Please export to some target first"))
    )
  )
#+end_src

*** Keybindings                                                        :Keybindings:
#+begin_src emacs-lisp
(use-package org
  :defer t
  :bind (:map org-mode-map
              ([f9] . darcamo/save-buffer-and-export-to-last-target)
              ))
#+end_src

*** HTML and Reveal export
#+begin_src emacs-lisp
(use-package ox-html
:defer t
:custom
(org-html-html5-fancy t)
(org-html-doctype "html5")
(org-html-validation-link nil)
)
#+end_src

*** Jira                                                                      :Jira:
#+begin_src emacs-lisp
(use-package ox-jira
  :ensure t
  :defer t
  :init
  (add-to-list 'org-export-backends 'jira) ;; This will load ox-jira on demand
  )
#+end_src

*** COMMENT Use highlightjs for code blocks
See https://emacs.stackexchange.com/questions/9832/how-to-insert-the-content-of-a-org-modes-code-block-inside-precode-tags-whe

You need to add the CSS and JS links for highlightjs to your org-mode file
Try with the lines
: #+HTML_HEAD: <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/styles/base16/zenburn.min.css">
: #+HTML_HEAD: <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/highlight.min.js"></script>
: #+HTML_HEAD: <script>hljs.highlightAll();</script>

#+begin_src emacs-lisp
(defun rasmus/org-html-wrap-blocks-in-code (src backend info)
  "Wrap a source block in <pre><code class=\"lang\">.</code></pre>"
  (when (org-export-derived-backend-p backend 'html)
    (replace-regexp-in-string
     "\\(</pre>\\)" "</code>\n\\1"
     (replace-regexp-in-string "<pre class=\"src src-\\([^\"]*?\\)\">"
                               "<pre>\n<code class=\"\\1\">\n" src))))

(add-to-list 'org-export-filter-src-block-functions
             'rasmus/org-html-wrap-blocks-in-code)

(setq org-html-htmlize-output-type nil)
#+end_src

*** COMMENT ODT and docx export
Set ~org-odt-preferred-output-format~ to "docx" to export to docx instead.
** Org useful functions
#+begin_src emacs-lisp
;; Quick Access to projects
(defun my-find-org-heading (projectName)
  (let (heading org-indirect-buffer-display)
    (setq heading (concat "* " projectName))
    (setq org-indirect-buffer-display 'current-window)
    (if (buffer-exists projectName)
        (switch-to-buffer projectName)
      ;; Else
      (progn
        (find-file (file-name-concat org-directory "gtd.org"))
        (goto-char (point-min))
        (search-forward heading)
        (org-tree-to-indirect-buffer)
        (rename-buffer projectName)
        (org-overview)
        (show-children)
        )
      )
    )
  )

(defun my-find-gtd-org-heading nil
  (interactive)
  (find-file (file-name-concat org-directory "gtd.org"))
  )

(defun my-find-relatorio-atividades-org-heading nil
  (interactive)
  ;; (org-id-goto "RelatorioUFC35Wiki")
  (find-file (file-name-concat org-directory "RelatoriosDeAtividade/RelatoriosDeAtividade.org"))
  )

(defun my-find-doutorado-org-heading nil
  (interactive)
                                        ;(my-find-org-heading "Doutorado")
  (find-file (file-name-concat org-directory "doutorado.org"))
  )

(defun my-find-references-org-heading nil
  (interactive)
  (find-file (file-name-concat org-directory "references/articles.org"))
  )

(defun my-find-articles-org-heading nil
  "Same as my-find-references-org-heading"
  (interactive)
  (find-file (file-name-concat org-directory "references/articles.org"))
  )

(defun my-find-stanford-org-heading nil
  (interactive)
  (find-file (file-name-concat org-directory "Stanford.org"))
  )

(defun my-find-ufc32-org-heading nil
  (interactive)
  ;; (my-find-org-heading "UFC.32")
  (find-file (file-name-concat org-directory "ufc32.org"))
  )

(defun my-find-ufc35-org-heading nil
  (interactive)
  ;; (my-find-org-heading "UFC.35")
  (find-file (file-name-concat org-directory "ufc35.org"))
  )

(defun my-find-ufc42-org-heading nil
  (interactive)
  ;; (my-find-org-heading "UFC.42")
  (find-file (file-name-concat org-directory "ufc42.org"))
  )

(defun my-find-ufc45-org-heading nil
  (interactive)
  ;; (my-find-org-heading "UFC.45")
  (find-file (file-name-concat org-directory "ufc45.org"))
  )

(defun my-find-naive-org-heading nil
  (interactive)
  (find-file (file-name-concat org-directory "ufc46-NAIVE.org"))
  )

(defun my-find-ufc49-iab-org-heading nil
  (interactive)
  (find-file (file-name-concat org-directory "ufc49-IAB.org"))
  )

(defun my-find-ufc51-org-heading nil
  (interactive)
  ;; (my-find-org-heading "UFC.32")
  (find-file (file-name-concat org-directory "ufc51-NCR.org"))
  )

(defun my-find-atlantico-org-heading nil
  (interactive)
  (find-file (file-name-concat org-directory "atlantico.org"))
  )

(defun my-find-financas-org-heading nil
  (interactive)
                                        ;(my-find-org-heading "Finanças")
  (find-file (file-name-concat org-directory "Financas.org"))
  ;;(org-id-open "Novembro2020" nil)
  )

(defun my-find-financas-heading-by-id (value)
  (require 'org-id)
  (org-id-open (concat (get-current-month) (get-current-year) value) nil)
  (recenter-top-bottom 0)
  )

(defun my-find-gastos-org-heading nil
  (interactive)
  (require 'org-id)
  (my-find-financas-heading-by-id "")
  )

(defun my-find-gastos-alimentacao-org-heading nil
  (interactive)
  (my-find-financas-heading-by-id "Alimentação")
  )

(defun my-find-gastos-contas-org-heading nil
  (interactive)
  (my-find-financas-heading-by-id "Contas")
  )

(defun my-find-gastos-entretenimento-org-heading nil
  (interactive)
  (my-find-financas-heading-by-id "Entretenimento")
  )

(defun my-find-gastos-carro-org-heading nil
  (interactive)
  (my-find-financas-heading-by-id "Carro")
  )

(defun my-find-gastos-diversos-org-heading nil
  (interactive)
  (my-find-financas-heading-by-id "Diversos")
  )


(defun my-find-senhas-org-heading nil
  (interactive)
                                        ;(my-find-org-heading "Senhas")
  (require 'org-crypt)
  (find-file (file-name-concat org-directory "Senhas.org"))
  )

(defun my-find-carro-org-heading nil
  (interactive)
                                        ;(my-find-org-heading "Carro")
  (find-file (file-name-concat org-directory "Carro.org"))
  )

(defun my-find-calendario-org-heading nil
  (interactive)
  (my-find-org-heading "Calendário")
  )


;; Functions to surround some text with an org-mode macro for red color
;; You need the org-macros.setup file or to manyally add the macro below to your org-mode file
;; #+MACRO: color @@html:<span style="color: $1">$2</span>@@@@latex:\textcolor{$1}{$2}@@@@odt:<text:span text:style-name="$1">$2</text:span>@@

(defun my-org-textcolor-red-macro ()
  "Surround current region with {{{color(red, content)}}} if mark is active or prompts for a text and insert {{{color(red, the text)}}}."
  (interactive)
  (let (pos1 pos2 text)
    (if (and transient-mark-mode
             mark-active)
        (my-org-surround-textcolor-red-macro (region-beginning) (region-end))
      (insert "{{{color(red," (read-from-minibuffer "Text in red: ") ")}}}")
      )))

(defun my-org-surround-textcolor-red-macro (beg end)
  "Surround the region with \textcolor{red}{ }"
  (interactive "r")
  (save-restriction
    (narrow-to-region beg end)
    (goto-char (point-min))
    (insert "{{{color(red,")
    (goto-char (point-max))
    (insert ")}}}")))


;; Transpose a Table
(defun org-transpose-table-at-point ()
  "Transpose orgmode table at point, eliminate hlines"
  (interactive)
  (let ((contents
         (apply #'mapcar* #'list
                ;; remove 'hline from list
                (remove-if-not 'listp
                               ;; signals error if not table
                               (org-table-to-lisp)))))
    (delete-region (org-table-begin) (org-table-end))
    (insert (mapconcat (lambda(x) (concat "| " (mapconcat 'identity x " | " ) "  |\n" ))
                       contents ""))
    (org-table-align)))



;; Get full path of a file relative to the current file
(defun fullpath-relative-to-current-file (file-relative-path)
  "Returns the full path of FILE-RELATIVE-PATH, relative to file location where this function is called.

        Example: If you have this line
         (fullpath-relative-to-current-file \"../xyz.el\")
        in the file at
         /home/mary/emacs/emacs_lib.el
        then the return value is
         /home/mary/xyz.el
        Regardless how or where emacs_lib.el is called.

        This function solves 2 problems.

         1. If you have file A, that calls the `load' on a file at B, and
            B calls 'load' on file C using a relative path, then Emacs
            will complain about unable to find C. Because, emacs does not
            switch current directory with 'load'.

            To solve this problem, when your code only knows the relative
            path of another file C, you can use the variable
            `load-file-name' to get the current file's full path, then
            use that with the relative path to get a full path of the
            file you are interested.

         2. To know the current file's full path, emacs has 2 ways:
            `load-file-name' and `buffer-file-name'. If the file is
            loaded by 'load', then load-file-name works but
            buffer-file-name doesn't. If the file is called by
            `eval-buffer', then load-file-name is nil. You want to be
            able to get the current file's full path regardless the file
            is run by 'load' or interactively by 'eval-buffer'."
  (concat (file-name-directory (or load-file-name buffer-file-name)) file-relative-path)
  )

#+end_src

** Keybindings                                                         :Keybindings:
#+begin_src emacs-lisp
(use-package org
  :defer t
  :bind
  (("<C-S-f5>" . my-org-textcolor-red-macro))
  )
#+end_src

** Add more structure templates
#+begin_src emacs-lisp
;; Allow expanding "<p" to a "begin_src python" block
(add-to-list 'org-structure-template-alist (cons "p" "src python"))
;; Allow expanding "<j" to a "begin_src jupyter-python" block
(add-to-list 'org-structure-template-alist (cons "j" "src jupyter-python"))
;; Allow expanding "<P" to a "begin_src plantuml" block
(add-to-list 'org-structure-template-alist (cons "P" "src plantuml"))
;; Allow expanding "<n" to a "begin_src notes" block
(add-to-list 'org-structure-template-alist (cons "n" "notes"))
#+end_src

** Appearance                                                           :Appearance:
*** Different link colors depending on link type
#+begin_src emacs-lisp
(use-package org
  :init
  (defface org-link-id
    '((t :foreground "Gold"
         :weight bold
         :underline t))
    "Face for Org-Mode links starting with id:."
    :group 'org-faces)

  (defface org-link-file
    '((t :foreground "OrangeRed"
         :weight bold
         :underline t))
    "Face for Org-Mode links starting with file:."
    :group 'org-faces)

  :config
  (org-link-set-parameters
   "id"
   :face 'org-link-id)

  (org-link-set-parameters
   "file"
   :face 'org-link-file)
  )
#+end_src

*** org-modern
#+begin_src emacs-lisp
(use-package org-modern
  :ensure t
  :custom
  (org-modern-timestamp nil)
  (org-modern-hide-stars nil)
  (org-modern-fold-stars '(("▶" . "▼") ("▷" . "▽") ("▷" . "▽") ("▹" . "▿") ("▸" . "▾")))
  :hook
  (org-mode . org-modern-mode)
  (org-agenda-finalize . org-modern-agenda)
  )
#+end_src

*** org-modern-indent
#+begin_src emacs-lisp
(use-package org-modern-indent
  :ensure (org-modern-indent :type git :host github :repo "jdtsmith/org-modern-indent")
  ;; :hook
  ;; (org-mode . org-modern-indent)
  :config
  (add-hook 'org-mode-hook #'org-modern-indent-mode 90)
  )
#+end_src

*** COMMENT org-superstar
#+begin_src emacs-lisp
;; The org-bullets package replaces all headline markers with
;; different Unicode bullets
;; (use-package org-bullets
;;   :ensure t
;;   :config
;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

;; Alternative to org-bullets package
(use-package org-superstar
  :defer t
  :ensure t
  :custom
  (org-superstar-special-todo-items 'hide)
  :hook
  (org-mode . org-superstar-mode)
  )
#+end_src

*** Face and prettify-symbols
#+begin_src emacs-lisp
(use-package org-faces
  :custom
  ;; Set to "t" to hide leading stars in org files by default
  (org-hide-leading-stars t)

  ;; Change the face of the ellipsis that represent folded text. I like
  ;; something with a slightly different color so that I can spot the
  ;; ellipsis easily
  (org-ellipsis 'org-column)

  ;; Faces of some tags (ATTACH tag)
  ;;(org-tag-faces '(("ATTACH" :inherit org-done :box nil :underline t :height 1.2)))
  (org-tag-faces '(
                   ("ATTACH" :inherit org-done :foreground "Gold")
                   ("REFILE" :inherit org-done :foreground "SandyBrown")
                   ("GTEL" :inherit org-done :foreground "LimeGreen")
                   ("Atlântico" :inherit org-done :foreground "DeepSkyBlue")
                   ("NextActions" :inherit org-done :foreground "OrangeRed")
                   ("habit" :inherit org-done :foreground "HotPink")
                   ))

  :config
  ;; By default both org-code and org-vertavim faces just inherit from the shadow
  ;; face. This makes them undistinguishable. Let's modify the color of the
  ;; org-code face to something different
  (set-face-attribute 'org-code nil :foreground "indian red")
  ;; Background color of my theme is gray14 and I'm choosing a value just a bit
  ;; brighter than it, such that the drawer is very discrete
  (set-face-attribute 'org-drawer nil :foreground "gray28")
  (set-face-attribute 'org-footnote nil :foreground "firebrick1")

  ;; Background color of src blocks will be slightly darken than default
  ;; background
  (set-face-attribute 'org-block nil :background
                      ;; (color-darken-name
                      ;;  (face-attribute 'default :background) 2)
                      "gray11"
                      )

  ;; Change background of the begin line and underline it
  (set-face-attribute 'org-block-begin-line nil
                      ;; :background (color-saturate-name (face-attribute 'default :background) 15)
                      :underline t)

  ;; Change background of the begin line and overline it
  ;;
  ;; Note that usually org-block-end-line inherits from org-block-begin-line,
  ;; but since we don't want the underline we set in org-block-begin-line we
  ;; change it to inherit from org-meta-line (which org-block-end-line inherits
  ;; from)
  (set-face-attribute 'org-block-end-line nil
                      ;; :background (color-saturate-name (face-attribute 'default :background) 10)
                      :inherit 'org-meta-line
                      :overline t)
  :hook
  (org-mode . (lambda ()
                (add-to-list 'prettify-symbols-alist '("<->" . "↔"))
                (add-to-list 'prettify-symbols-alist '("->" . "→"))
                (add-to-list 'prettify-symbols-alist '("<-" . "←"))
                (add-to-list 'prettify-symbols-alist '("[ ]" . "☐"))
                (add-to-list 'prettify-symbols-alist '("[X]" . "☑"))
                (add-to-list 'prettify-symbols-alist '("[-]" . "❍"))

                (add-to-list 'prettify-symbols-alist '("#+begin_src" . "↦" ))
                (add-to-list 'prettify-symbols-alist '("#+end_src" . "⇤" ))

                (setq prettify-symbols-unprettify-at-point t)
                (prettify-symbols-mode)
                ))
  ;; Enable visual-line-mode in all org-mode buffers
  ;; (org-mode . visual-line-mode)
  )
#+end_src

*** Org-appear
Show emphasis markers when cursor is on marked text. The default only shows emphasis
markers, but not other things like links. This is good enough for me.

This is controlled by the variables
- org-appear-autolinks
- org-appear-autoemphasis (default is ~t~)
- org-appear-autoentities
- org-appear-autokeywords
- org-appear-autosubmarker

#+begin_src emacs-lisp
(use-package org-appear
  :ensure t
  :hook (org-mode . org-appear-mode)
  )
#+end_src

*** Some font-lock rules for Info buffers                                     :Info:
#+begin_src emacs-lisp
(defun darcamo/fontify-info-buffer ()
  "Some custom font-lock rules to make info buffers prettier."
  ;; Fontify text between ‘ and ’ in Info buffers.
  (font-lock-add-keywords
   nil
   '(("‘\\(.*?\\)’\\|“\\(.*?\\)”"
      (1 'font-lock-string-face t t) ; Fontify text between ‘ and ’
      (2 'bold t t))))

  ;; Fontify anything between < and >
  (font-lock-add-keywords
   nil
   '(("<\\(.*?\\)>"
      (1 'font-lock-variable-name-face))))

  ;; Fontify 'Function' and function names in Info buffers.
  (font-lock-add-keywords
   nil
   '((" -- \\(Function\\): \\([a-zA-Z0-9-]+\\)"
      (1 'font-lock-keyword-face)  ; Highlight 'Function'
      (2 'font-lock-function-name-face))))
  )


(add-hook 'Info-mode-hook #'darcamo/fontify-info-buffer)
#+end_src
** Specific faces for TODO keywords
https://www.i3s.unice.fr/~malapert/emacs_orgmode.html

Try addapting the example below
#+begin_example
(setq org-todo-keyword-faces
      '(("IDEA" . (:foreground "GoldenRod" :weight bold))
        ("NEXT" . (:foreground "IndianRed1" :weight bold))
        ("STARTED" . (:foreground "OrangeRed" :weight bold))
        ("WAITING" . (:foreground "coral" :weight bold))
        ("CANCELED" . (:foreground "LimeGreen" :weight bold))
        ("DELEGATED" . (:foreground "LimeGreen" :weight bold))
        ("SOMEDAY" . (:foreground "LimeGreen" :weight bold))
        ))
#+end_example

** all-the-icons-ibuffer                                               :AllTheIcons:
#+begin_src emacs-lisp
(use-package all-the-icons-ibuffer
  :ensure t
  :config
  (all-the-icons-ibuffer-mode 1))
#+end_src

** COMMENT SVG tag mode
#+begin_src emacs-lisp
(use-package svg-tag-mode
  :ensure t
  :custom
  (svg-tag-tags
                                        ; ATTACH
      '(
        (":\\(ATTACH\\):" . ((lambda (tag)
                               ;; (svg-tag-make "ATTACH" :font-family "DejaVu Sans" :face 'org-agenda-structure :font-size 13 :margin 1 :padding 3 :alignment 0.5)
                               ;; (svg-lib-tag "ATTACH" (svg-lib-style svg-lib-style-default
                               ;; :foreground "gold"
                               ;; :font-family "Arial"
                               ;; :font-size 15
                               ;; :margin 1
                               ;; :padding 3
                               ;; :alignment 0.5))

                               ;; See the svg-lib-icon-collections variable
                               (svg-lib-icon "paperclip" nil :margin 3 :foreground "gold")
                               )))
        ;; Icon names can be searched in https://materialdesignicons.com/
        ("#\\+TITLE:" . ((lambda (tag) (svg-lib-button "format-title" "TITLE" nil :padding 3))))
        ("#\\+AUTHOR:" . ((lambda (tag) (svg-lib-button "account" "AUTHOR" nil :padding 2))))
        ("#\\+DATE:" . ((lambda (tag) (svg-lib-button "calendar" "DATE" nil :padding 4))))
        ("#\\+PROPERTY:" . ((lambda (tag) (svg-lib-button "cog" "PROPERTY" nil :padding 0 :foreground "gray40"))))
        ("#\\+CATEGORY:" . ((lambda (tag) (svg-lib-button "notebook" "CATEGORY" nil :padding 0 :foreground "gray40"))))
        ("#\\+OPTIONS:" . ((lambda (tag) (svg-lib-button "cog" "OPTIONS" nil :padding 1 :foreground "gray40"))))
        ("#\\+COLUMNS:" . ((lambda (tag) (svg-lib-button "format-columns" "COLUMNS" nil :padding 1 :foreground "gray40"))))
        ("#\\+STARTUP:" . ((lambda (tag) (svg-lib-button "wrench-clock" "STARTUP" nil :padding 1 :foreground "gray40"))))
        ;; Attribute of include blocks (figures, tables, src, etc)
        ("#\\+NAME:" . ((lambda (tag) (svg-lib-button "label" "NAME" nil :font-family "DejaVu Sans" :padding 4))))
        ("#\\+CAPTION:" . ((lambda (tag) (svg-lib-button "tooltip" "CAPTION" nil :font-family "DejaVu Sans"))))
        ;;("#\\+CAPTION:" . ((lambda (tag) (svg-tag-make "CAPTION" :font-family "DejaVu Sans" :font-size 12))))
        ;;("#\\+HEADER:" . ((lambda (tag) (svg-lib-button "format-header-pound" "HEADER" nil :padding 0))))
        ("#\\+ATTR_LATEX:" . ((lambda (tag) (svg-lib-button "cog" "LATEX" nil :padding 3))))
        ("#\\+ATTR_HTML:" . ((lambda (tag) (svg-lib-button "cog" "HTML" nil :padding 4))))

        ))
  :hook
  (org-mode . svg-tag-mode)
  )
#+end_src

** Extra packages for org-mode
#+begin_src emacs-lisp
(use-package org-download
  :ensure t
  :after org
  :commands (org-download-screenshot org-download-yank)
  ;; :bind
  ;; (:map org-mode-map
  ;;       (("s-Y" . org-download-screenshot)
  ;;        ("s-y" . org-download-yank)))
  )
#+end_src

** org-journal
Default prefix is =C-c C-=
   This prefix key is used for:
   - ‘org-journal-next-entry’ (key "f")
   - ‘org-journal-previous-entry’ (key "b")
   - ‘org-journal-new-entry’ (key "j")
   - ‘org-journal-search’ (key "s")

#+begin_src emacs-lisp
(use-package org-journal
  :ensure t
  :custom
  (org-journal-dir (file-name-concat org-directory "journal/"))
  (org-journal-file-format "%Y%m%d.org")
  (org-journal-date-format "%a, %x")
  :bind (
         ("C-c C-j" . org-journal-new-entry)
         :map org-mode-map
         ("C-c C-j" . org-journal-new-entry)
         ))
#+end_src

** org-transclusion
https://nobiot.github.io/org-transclusion/

#+begin_src emacs-lisp
(use-package org-transclusion
  :ensure t
  )
#+end_src

** org-present
#+begin_src emacs-lisp
(use-package org-present
  :ensure t)
#+end_src

* org-remark
Org-remark lets you highlight and annotate any text file with using Org mode.

Note that the text file being highlighted can be any text file (including source code).

See https://github.com/nobiot/org-remark

This package is not in melpa yet.

#+begin_src emacs-lisp
(use-package org-remark
  :ensure t
  :custom
  ;; The default pens do not work well with dark background and I'll define my own pens
  (org-remark-create-default-pen-set nil)
  :bind ( ;; :map org-mode-map
         ("C-c h m" . org-remark-mark)
         ("C-c h o" . org-remark-open)
         ("C-c h v" . org-remark-view)
         ("C-c h c" . org-remark-change)
         ("C-c h r" . org-remark-remove) ;; Remove the highlight
         ("C-c h d" . org-remark-delete) ;; Remove the highlight and delete any note
         ("C-c h n" . org-remark-next)
         ("C-c h p" . org-remark-prev)
         :map org-remark-pen-map
         ("M-n" . org-remark-next)
         ("M-p" . org-remark-prev)
         )
  :config
  (setq org-remark-notes-file-path 'org-remark-notes-file-name-function)
  ;; Change color of the default pen (only the default pen seems to have a corresponding face)
  (set-face-background 'org-remark-highlighter "yellow")
  (set-face-foreground 'org-remark-highlighter "#000")

  ;; Define an "important" pen
  (org-remark-create "important"
                     '(:background "OrangeRed")
                     '(CATEGORY "important"))
  (org-remark-create "review"
                     '(:background "LightGreen" :foreground "black")
                     '(CATEGORY "review"))
  :init
  (org-remark-global-tracking-mode)
  )
#+end_src

* COMMENT org-reveal

Parece que o org-reveal não é mais mantido e não está mais funcionando.

Veja o [[https://gitlab.com/oer/org-re-reveal][org-re-reveal]] como alternativa.

#+begin_src emacs-lisp
(use-package ox-reveal
  :ensure t
  :defer t
  :custom
  (org-reveal-reveal-js-version 4)
  :init
  (add-to-list 'org-export-backends 'reveal) ;; This will load ox-reveal on demand
  )
#+end_src

* org-re-reveal
#+begin_src emacs-lisp
(use-package org-re-reveal
  :ensure t
  :defer t
  :init
  (add-to-list 'org-export-backends 're-reveal) ;; This will load ox-reveal on demand
  :custom
  (org-re-reveal-history t)
  (org-re-reveal-transition "slide")
  (org-re-reveal-width 1920)
  (org-re-reveal-height 1080)
  (org-re-reveal-viewport "width=device-width, initial-scale=1.0, minimum-scale=0.1, maximum-scale=10.0, user-scalable=yes")
  ;; (org-re-reveal-highlight-url "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.10.0/styles/base16/zenburn.min.css")
  (org-re-reveal-plugins '(markdown notes search zoom highlight math))
)
#+end_src

* Org-roam                                                                  :OrgRoam:
** Configuration
#+begin_src emacs-lisp
;; Format of the filename used for my org-roam notes
(setq my--note-filename-format "%<%Y%m%d%H%M%S>-${slug}.org")

;; Template used for the title part of my org-roam notes (not including filetags)
(setq my--note-title-template "#+title: ${title}\n#+SETUPFILE: org-roam-setup.org\n")

(defun my--get-note-title-template (tags-string)
  "Get a note head template with `#+filetags: TAGS-STRING' in the end."
  (concat my--note-title-template "#+filetags: " tags-string))

(use-package org-roam
  :ensure t
  :defer t
  :custom
  (org-roam-directory "~/org/org-roam-notes/")
  (org-roam-db-location (concat user-emacs-directory ".cache/org-roam.db"))
  ;;(org-roam-graph-exclude-matcher "index.org")
  (org-roam-graph-extra-config '(("rankdir" . "LR")))

  ;; Which information is shown when finding a note -> Note that the
  ;; size after ":" indicates what is shown, but anything after that
  ;; size can still be matched during completion even if it is not
  ;; shown.
  (org-roam-node-display-template (let ((backlinks-count (propertize "${backlinkscount:6}" 'face 'org-checkbox))
                                        (title (propertize "${title:70} " 'face 'org-document-title))
                                        (hierarchy (propertize "${hierarchy:80} " 'face 'org-document-title))
                                        (id (propertize "${id:8} " 'face 'org-cite))
                                        (tags (propertize "${tags:*}" 'face 'org-tag)))
                                    ;; (concat backlinks-count title id tags)
                                    (concat backlinks-count hierarchy id tags)
                                    ))

  ;; It's nice to type [[something<cursor>]] and use `complete-symbol' for org-roam to complete with a note.
  (org-roam-completion-everywhere t)

  ;; Since headlines with ATTACH will have an ID, org-roam would consider them as
  ;; nodes. This exclude all headlines with the ATTACH tag from the Org-roam
  ;; database to avoid that.
  ;; (org-roam-db-node-include-function (lambda () (not (member "ATTACH" (org-get-tags)))))

  (org-roam-capture-templates `(
                                ("d" "default" plain "Criado em %u\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,my--note-title-template)
                                 :unnarrowed t :immediate-finish t)
                                ("e" "De um E-mail" plain "Criado em %u\n\nE-mail-original: %a\nEnviado por %:from em %:date\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,my--note-title-template)
                                 :unnarrowed t)
                                ("s" "Software (uso)")
                                ("ss" "Software" plain "Criado em %u\n\n- Links :: [[id:1b77a1c0-3212-4c53-b65e-d62af140721c][Softwares Interessantes]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":Software:"))
                                 :unnarrowed t :immediate-finish t)
                                ("sc" "Conan" plain "Criado em %u\n\n- Links :: [[id:97c2db81-ac99-4bae-a06d-f81434ce3748][Conan]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":conan:Software:"))
                                 :unnarrowed t :immediate-finish t)
                                ("se" "Emacs" plain "Criado em %u\n\n- Links :: [[id:070ea2e3-309c-4b76-84e7-5e61e9a57e79][Emacs]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":Emacs:Software:"))
                                 :unnarrowed t :immediate-finish t)
                                ("sl" "Linux" plain "Criado em %u\n\n- Links :: [[id:157dad02-42b3-4e27-bfad-b09b60f32719][Linux]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":Linux:Software:"))
                                 :unnarrowed t :immediate-finish t)

                                ("a" "Atlântico")
                                ("aa" "Atlântico" plain "Criado em %u\n\n- Links :: [[id:0a6e477a-8a22-4fe1-8e09-1f94a5626516][Atlântico]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":Atlantico:"))
                                 :unnarrowed t :immediate-finish t)
                                ("ap" "Pessoas no Atlântico" entry "* ${title}\n:PROPERTIES:\n:ID:       %(org-id-new)\n:END:\nCriado em %u\n\n%?" :target (node "9beb52e5-65df-458f-8ea4-88eb5dc2ee97"))
                                ("a5" "Grupo de estudos de 5G" plain "Criado em %u\n\n- Links :: [[id:4079723a-ed8a-4c73-85df-df85716ce4d7][Grupo de 5G no Atlântico]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":5G:Atlantico:"))
                                 :unnarrowed t :immediate-finish t)

                                ("o" "PCoIP" plain "Criado em %u\n\n- Links :: [[id:c22ceaa8-2aac-4105-8900-a6cfb7d24c2f][PCoIP]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":PCoIP:"))
                                 :unnarrowed t :immediate-finish t)
                                ("T" "Teradici" plain "Criado em %u\n\n- Links :: [[id:1140ec0c-b2d2-4566-aa8f-7748201241d5][Teradici]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":Atlantico:Teradici:HP:"))
                                 :unnarrowed t :immediate-finish t)
                                ("D" "Doutorado" plain "Criado em %u\n\n- Links :: [[id:685ce449-937c-4977-9bbc-6177273c8c49][Doutorado]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":Doutorado:"))
                                 :unnarrowed t :immediate-finish t)
                                ("l" "Literature" plain "Criado em %u\n\n- Links :: [[id:84fd39bd-cc24-41cb-a173-b23a0c72ebd8][Leituras de papers e outros documentos]]\n\nPDF: <Add PDF Link here>\nBib Entry: <Add bib entry link here>\n\nDon't forget to add a ROAM_REFS property%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":Literature:"))
                                 :unnarrowed t :immediate-finish t)
                                ("c" "Conhecimentos gerais" plain "Criado em %u\n\n- Links :: [[id:0c2e1ffb-fa6e-4907-a7dc-30574bca2f43][Conhecimentos Gerais e lembrestes diversos]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format "#+title: ${title}\n#+SETUPFILE: org-roam-setup.org\n")
                                 :unnarrowed t :immediate-finish t)
                                ("f" "Filhos" plain "Criado em %u\n\n- Links :: [[id:70177ece-325d-49cc-9419-810001aa5fb5][Filhos]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":filhos:"))
                                 :unnarrowed t :immediate-finish t)

                                ("q" "Qt e QML")
                                ("qq" "Qt" plain "Criado em %u\n\n- Links :: [[id:ea1b8aaa-d8c8-4f77-b3ef-1e30c76cbef4][Qt]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":Programação:Qt:"))
                                 :unnarrowed t :immediate-finish t)
                                ("qm" "QML" plain "Criado em %u\n\n- Links :: [[id:0742709f-7604-47e8-bd2e-0489fd1864fe][QML]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":Programação:Qml:Qt:"))
                                 :unnarrowed t :immediate-finish t)

                                ("G" "Garantias e notas fiscais" entry "* ${title}\n:PROPERTIES:\n:ID:       %(org-id-new)\n:END:\nCriado em %u\n%?" :target (node "9a56dad9-505c-40c9-a910-ec20fa017e2e"))

                                ("t" "Telecomunicações")
                                ("t5" "5G" plain "Criado em %u\n\n- Links :: [[id:5485e2b7-c4a9-47c7-b52d-bafd36f114ad][5G]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":5G:"))
                                 :unnarrowed t :immediate-finish t)

                                ("g" "GTEL")
                                ("gg" "GTEL" plain "Criado em %u\n\n- Links :: [[id:ae896e12-b884-4de9-84ba-5b794b5878d5][GTEL]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":GTEL:"))
                                 :unnarrowed t :immediate-finish t)
                                ("gi" "IAB" plain "Criado em %u\n\n- Links :: [[id:0878fa71-2454-4d2d-a63f-8327a8a70681][IAB]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":GTEL:IAB:"))
                                 :unnarrowed t :immediate-finish t)
                                ("gN" "NCR" plain "Criado em %u\n\n- Links :: [[id:06bb82e9-6eb6-4e32-a953-f08adf08d428][NCR]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":GTEL:NCR:"))
                                 :unnarrowed t :immediate-finish t)
                                ("gn" "NTN" plain "Criado em %u\n\n- Links :: [[id:49bcec38-0a18-47d6-8bde-102587d6fcad][NTN]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":GTEL:NTN:"))
                                 :unnarrowed t :immediate-finish t)

                                ("p" "Programação")
                                ("pp" "Python" plain "Criado em %u\n\n- Links :: [[id:0cd3f915-9476-43b8-a17c-f113f912a2ae][Python]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":Programação:Python:"))
                                 :unnarrowed t :immediate-finish t)
                                ("pc" "C++" plain "Criado em %u\n\n- Links :: [[id:a0967201-ec8d-4061-a27d-81590c840bff][C++]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":Programação:CPP:"))
                                 :unnarrowed t :immediate-finish t)
                                ("pe" "Emacs Lisp" plain "Criado em %u\n\n- Links :: [[id:4f5b688f-6f4e-4f21-b466-7674e30be51c][Emacs Lisp]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":Elisp:Emacs:Programação:"))
                                 :unnarrowed t :immediate-finish t)

                                ("P" "Pessoas")
                                ("Pp" "Geral" entry "* ${title}\n:PROPERTIES:\n:ID:       %(org-id-new)\n:END:\nCriado em %u\n\n%?" :target (node "10f28a11-1a4f-4385-af25-1f0335293527"))
                                ("Pa" "Atlantico" entry "* ${title}\n:PROPERTIES:\n:ID:       %(org-id-new)\n:END:\nCriado em %u\n\n%?" :target (node "9beb52e5-65df-458f-8ea4-88eb5dc2ee97"))
                                ("Pt" "Teradici" entry "* ${title}\n:PROPERTIES:\n:ID:       %(org-id-new)\n:END:\nCriado em %u\n\n%?" :target (node "6d6ac5f9-0ae3-4c93-aebc-caf212e3fc5d"))
                                ("Pe" "Ericsson" entry "* ${title}\n:PROPERTIES:\n:ID:       %(org-id-new)\n:END:\nCriado em %u\n\n%?" :target (node "77acdf6f-19a5-43b0-912f-64616f6aa28b"))
                                ("Pg" "GTEL" entry "* ${title}\n:PROPERTIES:\n:ID:       %(org-id-new)\n:END:\nCriado em %u\n\n%?" :target (node "b1011fcd-ebb7-48e1-abbd-6ab5d74ac83f"))

                                ("S" "Squish" plain "Criado em %u\n\n- Links :: [[id:9894551a-5732-4d48-ae4c-6bff53083bdf][Squish]]\n\n%?" :if-new
                                 (file+head ,my--note-filename-format ,(my--get-note-title-template ":Squish:Programação:"))
                                 :unnarrowed t :immediate-finish t)
                                ))
  :init
  (org-roam-db-autosync-mode)

  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 display-buffer-in-direction
                 ;; The following lines are the "action alist" passed to
                 ;; display-buffer. For now, I only want to remove the
                 ;; mode-line.
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer)))
  :bind (([f6] . org-roam-node-find)
         ("C-c n f" . org-roam-node-find)
         ("C-c n c" . org-roam-capture)
         :map org-mode-map
         ("C-c n l" . org-roam-buffer-toggle)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n t a" . org-roam-tag-add)
         ("C-c n t r" . org-roam-tag-remove)
         )

  :config
  ;; I add the "category" tag to notes that I use to group related notes.
  (add-to-list 'org-tags-exclude-from-inheritance "category")

  ;; Define an acessor for the number of backlinks to a note -> we
  ;; will use this in org-roam-node-display-template
  ;; Taken from https://github.com/org-roam/org-roam/wiki/User-contributed-Tricks#showing-the-number-of-backlinks-for-each-node-in-org-roam-node-find
  (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
    (let* ((count (caar (org-roam-db-query
                         [:select (funcall count source)
                                  :from links
                                  :where (= dest $s1)
                                  :and (= type "id")]
                         (org-roam-node-id node)))))
      (format "[%d]" count)))

  ;; https://github.com/org-roam/org-roam/wiki/User-contributed-Tricks#showing-node-hierarchy
  (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
    (let ((level (org-roam-node-level node)))
      (concat
       (when (> level 0) (concat (org-roam-node-file-title node) " > "))
       ;; (when (> level 1) (concat (string-join (org-roam-node-olp node) " > ") " > "))
       (when (> level 1) (concat "... > "))
       (org-roam-node-title node))))

  ;; org-roam-title is the face used for the titles in the backlinks buffer
  ;; (set-face-foreground 'org-roam-title (face-foreground 'org-level-1))
  (set-face-foreground 'org-roam-title "Yellow")
  (set-face-attribute 'org-roam-title nil :height 1.3)
  )

(use-package org-roam-dailies
  :custom
  ;;                                                              Time
  ;; (org-roam-dailies-capture-templates '(("d" "default" entry "* %<%I:%M %p>: %?" :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: :daily:\n"))))
  (org-roam-dailies-capture-templates '(("d" "default" entry "* %<%H:%M %p>: %?"
                                         :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: :daily:\n"))))
  :bind (
         ("C-c n j" . org-roam-dailies-goto-today)
         ("C-c n g" . org-roam-dailies-goto-date)
         ;; ("C-c n j" . org-roam-dailies-capture-today)
         ;; To learn more about org-roam dailies, see
         ;; https://systemcrafters.net/build-a-second-brain-in-emacs/keep-a-journal/
         :map org-roam-dailies-map
         ;; Note that "y" and "t" are already in org-roam-dailies-map
         ;; as "go to yesterday/tomorrow". Here we are adding the "Y"
         ;; and "T" for the capture version of the commands. This is
         ;; useful for writing concluding thoughts for the previous
         ;; day or leaving notes for yourself for tomorrow!
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow)
         )

  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  )

(defun my-orb-action-copy-pdf-location-to-killring (citekey)
  (let ((key (car citekey)))
    (kill-new (org-ref-get-pdf-filename key))
    ))

(defun my-orb-action-open-pdf-file-in-emacs (citekey)
  (let ((key (car citekey)))
    (find-file (org-ref-get-pdf-filename key))
    ))
#+end_src
** Roam buffer improvements
#+begin_src emacs-lisp
(defun darcamo/go-to-next-backlink ()
  "Go to the next link pointint to `org-roam-buffer-current-node'."
  (interactive)
  (let ((search-invisible t)
        (id (slot-value org-roam-buffer-current-node 'id)))
    (forward-char 1)
    (search-forward (format "[[id:%s" id))))


(defun darcamo/go-to-previous-backlink ()
  "Go to the next link pointint to `org-roam-buffer-current-node'."
  (interactive)
  (let ((search-invisible t)
        (id (slot-value org-roam-buffer-current-node 'id)))
    (search-backward (format "[[id:%s" id))))


(use-package org-roam
  :bind (:map org-roam-mode-map
              ("C-n" . darcamo/go-to-next-backlink)
              ("C-p" . darcamo/go-to-previous-backlink)))
#+end_src
** consult-org-roam                                                        :Consult:
https://github.com/jgru/consult-org-roam
#+begin_src emacs-lisp
(use-package consult-org-roam
  :ensure t
  :after org-roam
  :init
  (require 'consult-org-roam)
  ;; Activate the minor mode -> regular org-roam commands will now have preview
  (consult-org-roam-mode 1)
  :custom
  ;; Use `ripgrep' for searching with `consult-org-roam-search'
  (consult-org-roam-grep-func #'consult-ripgrep)

  ;; Note: consult-org-roam adds a source for the `consult-buffer'
  ;; command (C-x b).
  ;;
  ;; Here we set the narrow key for this source to 'r'. That means you
  ;; can call consult-buffer with C-x b to list opened buffers, then
  ;; type 'r' and space to limit the buffers to opened org-roam
  ;; buffers.
  (consult-org-roam-buffer-narrow-key ?r)

  ;; :config
  ;; Eventually suppress previewing for certain functions
  ;; (consult-customize
  ;;  consult-org-roam-forward-links
  ;;  :preview-key (kbd "M-."))
  :bind
  ;; Define some convenient keybindings as an addition
  ("C-c n e" . consult-org-roam-file-find)
  ("C-c n b" . consult-org-roam-backlinks)
  ("C-c n B" . consult-org-roam-backlinks-recursive)
  ;; ("C-c n l" . consult-org-roam-forward-links)
  ("C-c n r" . consult-org-roam-search)
  ([C-f6] . consult-org-roam-search) ;; Search roam notes with ripgrep
  )
#+end_src

** COMMENT Org-roam-bibtex                                            :Bibtex:Latex:
#+begin_src emacs-lisp
(use-package org-roam-bibtex
  :ensure t
  :after org-roam
  :defer t
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (add-to-list 'orb-preformat-keywords "year")
  (add-to-list 'orb-preformat-keywords "doi")

  ;; Add some useful extra "notes actions"
  ;; Use the `C-c ) a` keybinding to call one of the actions
  (add-to-list 'orb-note-actions-user (cons "Copy PDF location to kill-ring" #'my-orb-action-copy-pdf-location-to-killring))
  (add-to-list 'orb-note-actions-user (cons "Open PDF file in Emacs" #'my-orb-action-open-pdf-file-in-emacs))
  ;; :custom
  ;; (orb-templates '(("r" "ref" plain (function org-roam-capture--get-point) ""
  ;;                   :file-name "paper_${citekey}"
  ;;                   :head "#+TITLE: ${title}\n#+ROAM_KEY: ${ref}\n#+ROAM_TAGS: §Literature §${year}\n#+STARTUP: indent\n\n\nPDF: [[file:${file}][${title}]]\nBib entry: [[file:~/org/references/articles.bib::${citekey}][${title}]]\n\n* ${title}\n:PROPERTIES:\n:Custom_ID: ${citekey}\n:DOI:       ${doi}\n:AUTHOR:   ${author}\n:NOTER_DOCUMENT: ${file}\n:NOTER_PAGE:\n:END:\n" ; <--
  ;;                   :unnarrowed t)))
  )
#+end_src

** TODO org-roam-ql
Veja mais sobre ele
** Functions to find IDs in all roam files
*Note*: If IDs are not known and you need to search all org-roam files for IDs, run the
~my/org-id-update-org-roam-files~ function.

#+begin_src emacs-lisp
(defun my/org-id-update-all-org-roam-files ()
  "Update Org-ID locations for all Org-roam files."
  (interactive)
  (org-id-update-id-locations (org-roam-list-files)))

(defun my/org-id-update-id-current-file ()
  "Scan the current buffer for Org-ID locations and update them."
  (interactive)
  (org-id-update-id-locations (list (buffer-file-name (current-buffer)))))
#+end_src

** Org-roam UI
#+begin_src emacs-lisp
(use-package org-roam-ui
  :ensure t
  :after org-roam
  :commands (org-roam-ui-mode)
  :bind (:map org-mode-map
              ("C-c n u u" . org-roam-ui-mode)
              ("C-c n u o" . org-roam-ui-open)
              ("C-c n u l" . org-roam-ui-node-local))
  )
#+end_src

** Delve
It provides tools to collect, inspect and edit Org Roam Nodes in a separate application
buffer.

See in
https://github.com/publicimageltd/delve

Currently it is not in melpa yet

** TODO orgnote
https://github.com/Artawower/orgnote

** COMMENT nursery
https://github.com/chrisbarrett/nursery

Several small packages that extend org-roam in some way.

The package =org-roam-dblocks= seems particularly nice.

The package =org-roam-gc= seems useful if you start using roam dailies.

The package =org-roam-rewrite= has commands for renaming nodes, rewriting links and deleting
nodes with redirection so you can refactor notes without leaving broken links.

* COMMENT Denote                                                             :Denote:
** General configuration
#+begin_src emacs-lisp
(use-package denote
  :ensure t
  :hook
  ( ;; If you use Markdown or plain text files, then you want to make
   ;; the Denote links clickable (Org renders links as buttons right
   ;; away)
   (text-mode . denote-fontify-links-mode-maybe)
   ;; Apply colours to Denote names in Dired.  This applies to all
   ;; directories.  Check `denote-dired-directories' for the specific
   ;; directories you may prefer instead.  Then, instead of
   ;; `denote-dired-mode', use `denote-dired-mode-in-directories'.
   (dired-mode . denote-dired-mode))
  :bind
  ;; Denote DOES NOT define any key bindings.  This is for the user to
  ;; decide.  For example:
  ( :map global-map
    ([f6] . denote-open-or-create)
    ("C-c n n" . denote)
    ("C-c n d" . denote-dired)
    ("C-c n g" . denote-grep)
    ;; If you intend to use Denote with a variety of file types, it is
    ;; easier to bind the link-related commands to the `global-map', as
    ;; shown here.  Otherwise follow the same pattern for `org-mode-map',
    ;; `markdown-mode-map', and/or `text-mode-map'.
    ("C-c n l" . denote-link)
    ("C-c n L" . denote-add-links)
    ("C-c n b" . denote-backlinks)
    ("C-c n B" . denote-refs-mode) ;; Toggle showing links and backlinks in Denote notes (after front matter).
    ("C-c n q c" . denote-query-contents-link) ; create link that triggers a grep
    ("C-c n q f" . denote-query-filenames-link) ; create link that triggers a dired
    ;; Note that `denote-rename-file' can work from any context, not just
    ;; Dired bufffers.  That is why we bind it here to the `global-map'.
    ("C-c n r" . denote-rename-file)
    ("C-c n R" . denote-rename-file-using-front-matter)

    ;; Key bindings specifically for Dired.
    :map dired-mode-map
    ("C-c C-d C-i" . denote-dired-link-marked-notes)
    ("C-c C-d C-r" . denote-dired-rename-files)
    ("C-c C-d C-k" . denote-dired-rename-marked-files-with-keywords)
    ("C-c C-d C-R" . denote-dired-rename-marked-files-using-front-matter))

  :custom
  (xref-search-program 'ripgrep)

  (denote-directory (expand-file-name "~/org/denote/"))
    ;; (setq denote-save-buffers nil)
  ;; (setq denote-known-keywords '("emacs" "philosophy" "politics" "economics"))
  ;; (setq denote-infer-keywords t)
  ;; (setq denote-sort-keywords t)
  ;; (setq denote-prompts '(title keywords))
  ;; (setq denote-excluded-directories-regexp nil)
  ;; (setq denote-excluded-keywords-regexp nil)
  ;; (setq denote-rename-confirmations '(rewrite-front-matter modify-file-name))

  ;; Pick dates, where relevant, with Org's advanced interface:
  (denote-date-prompt-use-org-read-date t)


  ;; ;; Prefer ripgrep, then ugrep, and fall back to regular grep.
  ;; (setq xref-search-program
  ;;       (cond
  ;;        ((or (executable-find "ripgrep")
  ;;             (executable-find "rg"))
  ;;         'ripgrep)
  ;;        ((executable-find "ugrep")
  ;;         'ugrep)
  ;;        (t
  ;;         'grep)))


  :config
  ;; Automatically rename Denote buffers using the `denote-rename-buffer-format'.
  (denote-rename-buffer-mode 1)
  )
#+end_src

** Consult Denote                                                          :Consult:
#+begin_src emacs-lisp
(use-package consult-denote
  :ensure t
  :bind
  (("C-c n f" . consult-denote-find)
   ("C-c n g" . consult-denote-grep))
  :config
  (consult-denote-mode 1))
#+end_src

** Denote menu
Just call =list-denotes=.

In the tabulated list, call =denote-menu-filter-*= functions to filter and
=denote-menu-clear-filters= to clear the filters.

#+begin_src emacs-lisp
(use-package denote-menu
  :ensure t
  :bind
  ( :map global-map
    ("C-c n t" . list-denotes)
    :map denote-menu-mode-map
    ("+" . denote-menu-filter-by-keyword)
    ("-" . denote-menu-filter-out-keyword)
    ("r" . denote-menu-filter)
    ("c" . denote-menu-clear-filters)
    ("/" . denote-menu-clear-filters)))
#+end_src

** Denote refs
Add a comment after the front matter with the backlinks.

Use =denote-refs-mode= in a denote file to toggle the minnor mode.

#+begin_src emacs-lisp
(use-package denote-refs
:ensure t
:commands (denote-refs-mode)
;; :config
;; denote-refs-mode
)
#+end_src

** Denote Journal
Note that in the calendar view you can use ="F"= on a date with a journal to go to the
journal entry, and ="N"= to create a new entry.

TODO: See [[https://elpa.gnu.org/packages/denote-journal.html#h:create-a-journal-entry-using-org-capture][documentation]] about how to create a journal entry using capture.

#+begin_src emacs-lisp
(use-package denote-journal
  :ensure t
  ;; Bind those to some key for your convenience.
  :commands ( denote-journal-new-entry
	          denote-journal-new-or-existing-entry
	          denote-journal-link-or-create-entry )
  :hook (calendar-mode . denote-journal-calendar-mode)
  :bind
  (
  ("C-c n j j" . denote-journal-new-or-existing-entry)
  ("C-c n j l" . denote-journal-link-or-create-entry)
  )

  :custom
  ;; %F format gives the iso date -> see docstring for `format-time-string'
  (denote-journal-title-format "%F")

  ;; Use the "journal" subdirectory of the `denote-directory'.  Set this
  ;; to nil to use the `denote-directory' instead.
  ;; (denote-journal-directory (expand-file-name "journal" denote-directory))

  ;; Default keyword for new journal entries. It can also be a list of
  ;; strings.
  ;; (denote-journal-keyword "journal")
  )
#+end_src

* Markdown                                                                 :markdown:
** General config
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :custom
  (markdown-fontify-code-blocks-natively t)
  :config
  (set-face-attribute 'markdown-code-face nil :background "gray10")
  (set-face-attribute 'markdown-header-face-1 nil :height 1.5)
  (set-face-attribute 'markdown-header-face-2 nil :height 1.3)
  (set-face-attribute 'markdown-header-face-3 nil :underline t)
  )
#+end_src

** COMMENT Flymake support
Note: You need to install the =markdownlint= package in the system.
- The name of the executable is =mdl=.

#+begin_src emacs-lisp
(use-package flymake-markdownlint
  :ensure t
  :hook
  (markdown-mode . flymake-mode)
  (markdown-mode . flymake-markdownlint-setup)
  :custom
  (flymake-markdownlint-program "mdl")
  )
#+end_src

** Formatting
Check the https://github.com/executablebooks/mdformat (system) package and how to
configure it with apheleia

Another alternative is the https://github.com/nlamirault/emacs-markdownfmt emacs package
- But it requires [[https://github.com/shurcooL/markdownfmt][markdownfmt]], which is not in the Arch repository of in the AUR.


#+begin_src emacs-lisp
(use-package markdown-mode
:after apheleia
:config
  (push '(mdformat . ("/usr/bin/mdformat" "-" file))
        apheleia-formatters)
(add-to-list 'apheleia-mode-alist '(markdown-mode . mdformat))
:bind (:map markdown-mode-map
              ;; Save the buffer to file, format the file and reload the disk
              ("C-c f" . apheleia-format-buffer)
              )
)
#+end_src

** Generate table of contents
Call the command =markdown-toc-generate-toc= and a TOC will be inserted in the cursor position.

#+begin_src elisp
(use-package markdown-toc
  :ensure t
  :commands markdown-toc-generate-toc
  )
#+end_src

** Preview using Guthub README preview
Check the https://github.com/seagle0128/grip-mode package

You need to install the python-grip package.

#+begin_src emacs-lisp
(use-package grip-mode
  :ensure t
  ;; Add a binding for `C-c C-c g` in markdown buffers
  :bind (:map markdown-mode-command-map
              ("g" . grip-mode)))
#+end_src

* Edit indirect buffer
Edit regions in separate buffers, like `org-edit-src-code' but for arbitrary
regions.

See the docstring of [[help:edit-indirect-region][edit-indirect-region]] for details.

#+begin_src emacs-lisp
(use-package edit-indirect
  :ensure t)
#+end_src

* eww
** Modify a few shr faces
#+begin_src emacs-lisp
(use-package shr
  :defer t
  :config
  ;; Use the same color as org-code for the shr-code face
  (let ((color (plist-get (custom-face-attributes-get 'org-code nil) :foreground)))
    (set-face-attribute 'shr-code nil :foreground color))

  (set-face-attribute 'shr-h1 nil :height 1.5)
  (set-face-attribute 'shr-h2 nil :height 1.2)
  )
#+end_src

** Syntax highlight for code blocks in eww
#+begin_src emacs-lisp
(use-package shr-tag-pre-highlight
  :ensure t
  :commands shr-tag-pre-highlight
  :hook
  (eww-mode . (lambda () (require 'shr-tag-pre-highlight)))
  :config
  (add-to-list 'shr-external-rendering-functions
               '(pre . shr-tag-pre-highlight)))
#+end_src

* Atomic-chrome: Edit text-fields in the browser
https://github.com/alpha22jp/atomic-chrome

With the atomic-chrome Emacs can work with the ghost-text browser extension in order to
edit text-fields in the browser.

Use =Ctrl+Shift+H= in the browser (or click in the ghost text extension icon) whenever a
text-field is focused to open in Emacs. Once you edit the text in Emacs, use =Ctrl+c Ctrl+c=
to accept.
#+begin_src emacs-lisp
(use-package atomic-chrome
  :ensure t
  :config
  (atomic-chrome-start-server)
  )
#+end_src

The default major mode of editing buffer is text-mode. You can change the major mode
manually. If you want to use a different major mode as the default, set
atomic-chrome-default-major-mode like below.

: (setq atomic-chrome-default-major-mode 'markdown-mode)
Additionally, you can use atomic-chrome-url-major-mode-alist to choose the major mode for
a specific website based on the page URL (or, with GhostText, URL hostname) like below.

#+begin_example
(setq atomic-chrome-url-major-mode-alist
      '(("github\\.com" . gfm-mode)
        ("redmine" . textile-mode)))
#+end_example
This is an association list of regexp and major mode function. If the page URL matches to on of the regexp, the corresponding major mode is selected.
* COMMENT Visual-fill-column in org-mode
#+begin_src emacs-lisp
(use-package visual-fill-column
  :ensure t
  :custom
  (visual-fill-column-center-text t)
  (visual-fill-column-width 120)
  :hook
  (org-mode . visual-fill-column-mode)
  )
#+end_src

* Outline
#+begin_src emacs-lisp
(use-package outline
  :diminish outline-minor-mode
  :defer t
  :commands outline-minor-mode
  :bind (:map outline-minor-mode-map
              ("C-M-n" . outline-next-visible-heading)
              ("C-M-p" . outline-previous-visible-heading)
              ("C-M-u" . outline-up-heading)
              )
  )

(defun darcamo/set-up-outline-minor-mode (local-outline-regexp)
  "Set the outline-regex to local-outline-regexp"
  (set (make-local-variable 'outline-regexp) local-outline-regexp)
  (outline-minor-mode t)
  )
#+end_src

* Calendar and Holidays                                                    :Calendar:
Useful keybindings:
| .   | go to today             |
| <   | calendar-scroll-right   |
| >   | calendar-scroll-left    |
| C-@ | calendar-set-mark       |
| ?   | calendar-gogo-info-node |
| a   | list holidays           |
| c   | goto org-agenda         |
| g   | prefix -> go to date     |
| h   | Show holiday at point   |
| x   | mark holidays           |
| u   | unmark calendar         |
| M-= | count days in region    |
| S   | calendar-sunrise-sunset |

#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :custom
  (calendar-mark-holidays-flag nil)
  (calendar-latitude -3.77)
  (calendar-longitude -38.57)
  :bind (("C-c C" . calendar)))

;; Adaptado de https://github.com/xboard/emacs-brazilian-holidays/blob/master/brazilian-holidays.el
(setq feriados-nacionais-fixos
      `((holiday-fixed 1 1 "Feriado de Confraternização Mundial")
        (holiday-fixed 4 21 "Feriado de Tiradentes")
        (holiday-fixed 5 1 "Feriado do Dia do Trabalho")
        (holiday-fixed 9 7 "Feriado da Independência do Brasil")
        (holiday-fixed 10 12 "Feriado de Nossa Senhora Aparecida")
        (holiday-fixed 11 2 "Feriado de Finados")
        (holiday-fixed 11 15 "Feriado de Proclamação da República")
        (holiday-fixed 11 20 "Feriado da Conciência Negra")
        (holiday-fixed 12 25 "Feriado de Natal")
        ))

(setq feriados-nacionais-moveis
      `((holiday-easter-etc 0 "Feriado de Páscoa")
        (holiday-easter-etc -48 "Feriado de Carnaval (segunda)")
        (holiday-easter-etc -47 "Feriado de Carnaval (terça)") ;; terça
        (holiday-easter-etc -46 "Quarta-feira de cinzas") ;; terça
        (holiday-easter-etc -2 "Feriado da Sexta-feira Santa - Paixão de Cristo")
        ;;(holiday-easter-etc 49 "Feriado de Pentecostes")
        ;;(holiday-easter-etc 56 "Feriado do Domingo da Santíssima Trindade")
        (holiday-easter-etc 60 "Feriado de Corpus Christi")))

(setq feriados-facultativos-fixos
      `(
        (holiday-fixed 10 15 "Dia do Professor")
        (holiday-fixed 10 28 "Dia do Servidor Público")
        ))

(setq feriados-estaduais-ce
      `(
        (holiday-fixed 3 19 "Dia de São José")
        (holiday-fixed 3 25 "Data magna do Ceará")
        (holiday-fixed 8 15 "Nossa Senhora da Assunção (Fortaleza)")
        ))

(setq calendar-holidays
      (append feriados-nacionais-fixos
              feriados-nacionais-moveis
              feriados-estaduais-ce
              feriados-facultativos-fixos
              ))
#+end_src

* General Programming (not including any specific language)             :Programming:
** Set "C-c &" keybinding for org-mark-ring-goto in programming modes
If in an org-mode file I activated a link that went to a source code, then =C-c &= will go
back to the org file.

#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :bind (:map prog-mode-map
              ;; Set keybindings similar to the ones I used wit flycheck
              ;; NOTE: Consult will add the "M-g f" keybinding for `consult-flymake'
              ("C-c &" . org-mark-ring-goto)))
#+end_src

** Line numbers
#+begin_src emacs-lisp
(use-package display-line-numbers-mode
  :ensure nil
  :hook
  (prog-mode . display-line-numbers-mode))
#+end_src

** breadcrumbs
The breadcrumb package uses information from imenu. Hence, as long as the major mode has
imenu support breadcrumbs should work.
#+begin_src elisp
(use-package breadcrumb
  :ensure t
  :hook
  (prog-mode . (lambda () (unless (darcamo/is-scratch-buffer) (breadcrumb-local-mode))))
  )
#+end_src

** Some pretty symbols
#+begin_src emacs-lisp
(add-hook
 'prog-mode-hook
 (lambda ()
   (add-to-list 'prettify-symbols-alist '("<=" . "≤"))
   (add-to-list 'prettify-symbols-alist '(">=" . "≥"))
   (setq prettify-symbols-unprettify-at-point t)
   (prettify-symbols-mode)
   )
 )
#+end_src

** Handle ansi colors in compilation buffer                            :Compilation:
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
:hook
(compilation-filter . ansi-color-compilation-filter)
)

;; (use-package ansi-color
;;   :defer t
;;   :commands ansi-color-apply-on-region
;;   :config
;;   (defun colorize-compilation-buffer ()
;;     (toggle-read-only)
;;     (ansi-color-apply-on-region compilation-filter-start (point))
;;     (toggle-read-only))

;;   :hook
;;   (compilation-filter . colorize-compilation-buffer)
;;   )
#+end_src

** Scroll down compilation buffer                                      :Compilation:
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :custom
  ;; (compilation-scroll-output t)
  (compilation-scroll-output 'first-error)
  )
#+end_src

** Popper-mode                                                         :Compilation:

To set which buffers should be a popup, see the =popper-reference-buffers= varaible.

NOTE: Pass an argument to the =popper-toggle= command will keep the current popup and open
the other one separately.

#+begin_src emacs-lisp
(use-package popper
  :ensure t ; or :straight t
  :bind (("C-S-p"   . popper-toggle)
         ("C-}"   . popper-cycle)
         ("C-{"   . popper-cycle-backwards)
         ;; ("C-{" . popper-toggle-type)
         )
  :config
  (popper-mode +1)
  :custom
  (popper-reference-buffers
   '("\\*Messages\\*"
     "Output\\*$"
     "\\*Async Shell Command\\*"
     help-mode
     compilation-mode
     ert-results-mode))
  (popper-display-control 'user)
  (popper-group-function #'popper-group-by-project)
  )
#+end_src

** COMMENT shackle
THIS MPACKAGE IS INTERFERING WITH TRANSIENT PACKAGE when using `:choices`.

NOTE: Shackle provides a nicer way to handle buffers, compared to change
=display-buffer-alist= directly.

#+begin_src elisp
(use-package shackle
  :ensure t

  :custom
  (shackle-rules '(("*compilation*" :noselect t :align 'below :size 12)
                   ("*Help*" :select t :same t :inhibit-window-quit t)
                   ("*ert*" :align 'below :size 12)))
  (shackle-default-rule '(:select t))
  :config
  (shackle-mode)
  )
#+end_src

** Compilation buffer always at the bottom                             :Compilation:
#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
               '("\\*compilation\\*"
                 bottom-buffer-manager-display-action-function
                 ;; The following lines are the "action alist" passed to
                 ;; display-buffer. For now, I only want to remove the
                 ;; mode-line.
                 (window-height . 0.28)
                 ))
#+end_src

** Syntax check
*** COMMENT Flycheck                                                      :Flycheck:
https://www.flycheck.org/en/latest/index.html

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :commands flycheck-mode
  ;; :init
  ;;(global-flycheck-mode)
  :hook
  (prog-mode . flycheck-mode)
  (LaTeX-mode . flycheck-mode)
  )
#+end_src

*** Flymake                                                                :Flymake:
**** General Configuration
#+begin_src emacs-lisp
(use-package flymake
  :hook
  (prog-mode . flymake-mode)
  ;; (LaTeX-mode . flymake-mode)
  :bind (:map flymake-mode-map
              ;; Set keybindings similar to the ones I used wit flycheck
              ;; NOTE: Consult will add the "M-g f" keybinding for `consult-flymake'
              ("C-c ! n" . flymake-goto-next-error)
              ("C-c ! p" . flymake-goto-prev-error)
              ("C-c ! l" . flymake-show-buffer-diagnostics)
              ("C-c ! v" . flymake-switch-to-log-buffer)
              ("C-c ! P" . flymake-show-project-diagnostics)))
#+end_src

**** COMMENT flymake-json
#+begin_src emacs-lisp
(use-package flymake-json
  :ensure t
  :hook
  (json-mode . flymake-json-load))
#+end_src

** Enable folding in programming buffers
#+begin_src emacs-lisp
;; (use-package origami
;;   :ensure t
;;   :hook
;;   (prog-mode . origami-mode)
;;   :bind (
;;          :map origami-mode-map
;;          ("<backtab>" . origami-recursively-toggle-node) ;; Shift+TAB
;;          ("C-S-<iso-lefttab>" . origami-show-only-node)  ;; Ctrl+Shift+TAB
;;          ))

(use-package emacs
  :hook
  (prog-mode . hs-minor-mode)
  :bind (
         :map prog-mode-map
         ("<backtab>" . hs-toggle-hiding) ;; Shift+TAB
         ("C-(" . hs-toggle-hiding)
         ("C-S-<iso-lefttab>" . hs-show-all)  ;; Ctrl+Shift+TAB
         ("C-M-(" . hs-show-all)
         ))
#+end_src

** Obvious-mode
#+begin_src emacs-lisp
(use-package obvious
  :ensure (obvious :type git :host github :protocol ssh :repo "alphapapa/obvious.el")
  :bind
  ("<C-f8>" . obvious-mode)
  :custom
  (obvious-fringe-bitmap 'filled-rectangle)
  )
#+end_src

** Highlight TODO and similar keywords with hl-todo
https://github.com/tarsius/hl-todo
*Tip*: Check the =hl-todo-keyword-faces= variable for the keywords and colors.
*Tip2*: Check the navigation methods
: (keymap-set hl-todo-mode-map "C-c p" #'hl-todo-previous)
: (keymap-set hl-todo-mode-map "C-c n" #'hl-todo-next)
: (keymap-set hl-todo-mode-map "C-c o" #'hl-todo-occur)
: (keymap-set hl-todo-mode-map "C-c i" #'hl-todo-insert)

#+begin_src emacs-lisp
(use-package hl-todo
  :ensure t
  :hook
  (prog-mode . hl-todo-mode)
  )
#+end_src

** Consult documentation in zeal
See https://github.com/jinzhu/zeal-at-point

You need to have [[https://zealdocs.org/][zeal]] installed.

#+begin_src emacs-lisp
(use-package zeal-at-point
  :ensure t
  :bind (:map prog-mode-map
              ;; Pass C-u before to specify the search item instead of
              ;; using the thing at point
              ("C-c d" . zeal-at-point))
  :config
  ;; Add more docsets beyond the standard library
  (add-to-list 'zeal-at-point-mode-alist '(c++-mode . ("cpp" "Boost")))
  (add-to-list 'zeal-at-point-mode-alist '(c++-ts-mode . ("cpp" "Boost" "Qt")))
  (add-to-list 'zeal-at-point-mode-alist '(python-mode . ("python3" "NumPy" "SciPy" "Pandas")))
  (add-to-list 'zeal-at-point-mode-alist '(python-ts-mode . ("python3" "NumPy" "SciPy" "Pandas")))
  )
#+end_src

** page-break-lines
#+begin_src emacs-lisp
;; Note that if page-break-lines is enabled in org-mode buffers it
;; breaks the org-roam buffer for some reason. Therefore, only enabled
;; it in programming modes
(use-package page-break-lines
  :ensure t
  :custom
  (page-break-lines-lighter "")
  :hook
  (prog-mode . page-break-lines-mode))
#+end_src
* Eldoc
Replace HTML characters with plain text ones in eldoc buffers.

Code from https://emacs.stackexchange.com/questions/80740/how-to-correctly-format-nbsp-in-eldoc-using-eglot
#+begin_src emacs-lisp
(defvar rb--eldoc-html-patterns
  '(("&nbsp;" " ")
    ("&lt;" "<")
    ("&gt;" ">")
    ("&amp;" "&")
    ("&quot;" "\"")
    ("&apos;" "'"))
  "List of (PATTERN . REPLACEMENT) to replace in eldoc output.")

(defun rb--string-replace-all (patterns in-string)
  "Replace all cars from PATTERNS in IN-STRING with their pair."
  (mapc (lambda (pattern-pair)
          (setq in-string
                (string-replace (car pattern-pair) (cadr pattern-pair) in-string)))
        patterns)
  in-string)

(defun rb--eldoc-preprocess (orig-fun &rest args)
  "Preprocess the docs to be displayed by eldoc to replace HTML escapes."
  (let ((doc (car args)))
      ;; The first argument is a list of (STRING :KEY VALUE ...) entries
      ;; we replace the text in each such string
      ;; see docstring of `eldoc-display-functions'
    (when (listp doc)
      (setq doc (mapcar
                 (lambda (doc) (cons
                                (rb--string-replace-all rb--eldoc-html-patterns (car doc))
                                (cdr doc)))
                 doc
                 ))
      )
    (apply orig-fun (cons doc (cdr args)))))

(advice-add 'eldoc-display-in-buffer :around #'rb--eldoc-preprocess)
#+end_src

* YAML                                                                         :YAML:
** yaml-ts-mode
#+begin_src emacs-lisp
(use-package emacs
  :mode
  (".clang-tidy" . yaml-ts-mode)
  ("\\.ya?ml\\'" . yaml-ts-mode)
  )
#+end_src

** yaml-pro
yaml-pro is a package that provides conveniences for editing yaml.

This package has been written to leverage tree-sitter parsing facilities, allowing all of
these actions to be performed fast and accurate, even in the absence of parsing errors.
The tree-sitter version is orders of magnitudes faster and I highly recommend its usage if
your Emacs version permits.

Check how to use in https://github.com/zkry/yaml-pro

It seems you use this as a minnor-mode (it does not replace yaml-mode
#+begin_src emacs-lisp
(use-package yaml-pro
  :ensure t
  :hook
  (yaml-ts-mode . yaml-pro-ts-mode)
  )
#+end_src

** flymake-yamllint
You need to innstall =yamllint= using your OS package manager
#+begin_src emacs-lisp
(use-package flymake-yamllint
  :ensure t
  :hook
  (yaml-mode . flymake-yamllint-setup)
  (yaml-mode . flymake-mode)
  )
#+end_src

* PDF                                                                           :PDF:
** PDF-tools package
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :commands pdf-view-mode
  ;; :config
  ;; First argument "t" means "Build the program (if necessary)
  ;; without asking first". The second argument "t" means "Don't
  ;; attempt to install system packages".
  ;; (pdf-tools-install t t)
  :hook
  (pdf-view-mode . pdf-tools-enable-minor-modes)
  :mode
  ("\\.pdf" . pdf-view-mode)
  )
#+end_src

** Restore page in the PDF on next visit - saveplace-pdf-view
#+begin_src emacs-lisp
(use-package saveplace-pdf-view
  :ensure t
  :config
  (save-place-mode 1))
#+end_src

** COMMENT Integration with org (create org-links)                         :OrgMode:
#+begin_src emacs-lisp
(use-package org-pdftools
  :ensure t
  :hook (org-mode . org-pdftools-setup-link))
#+end_src

** Keybindings                                                         :Keybindings:
#+begin_src emacs-lisp
(use-package pdf-view
  :defer t
  :bind (
         :map pdf-view-mode-map
         ("i" . pdf-view-midnight-minor-mode)
         ([f9] . tex-all)  ; We want to compile when viewing the PDF
         ([f10] . (lambda () (interactive) (ver-pdf-no-evince (concat (file-name-sans-extension (file-name-nondirectory (buffer-file-name))) ".pdf"))))
         ([S-f10] . (lambda () (interactive) (eaf-open (concat (file-name-sans-extension (file-name-nondirectory (buffer-file-name))) ".pdf"))))

         ;; Set "g" as keybinding to "pdf-view-goto-page" when viewing pdfs
         ("g" . pdf-view-goto-page)
         ("<C-mouse-4>" . pdf-view-enlarge)
         ("<C-mouse-5>" . pdf-view-shrink)
         ("<S-mouse-4>" . (lambda () (interactive) (image-backward-hscroll 4)))
         ("<S-mouse-5>" . (lambda () (interactive) (image-forward-hscroll 4)))

         ("<M-left>" . (lambda () (interactive) (image-backward-hscroll 6)))
         ("<M-right>" . (lambda () (interactive) (image-forward-hscroll 6)))
         ("<C-left>" . (lambda () (interactive) (image-backward-hscroll 6)))
         ("<C-right>" . (lambda () (interactive) (image-forward-hscroll 6)))

         ("<C-M-left>" . (lambda () (interactive) (image-backward-hscroll 15)))
         ("<C-M-right>" . (lambda () (interactive) (image-forward-hscroll 15)))

         ("<C-up>" . (lambda () (interactive) (pdf-view-previous-line-or-previous-page 4)))
         ("<C-down>" . (lambda () (interactive) (pdf-view-next-line-or-next-page 4)))
         ("<M-up>" . (lambda () (interactive) (pdf-view-previous-line-or-previous-page 4)))
         ("<M-down>" . (lambda () (interactive) (pdf-view-next-line-or-next-page 4)))
         )
  )
#+end_src

* Dired                                                                       :Dired:
** Configuration
#+begin_src emacs-lisp
;; (use-package dired-git
;; :ensure t
;; :config (add-hook 'dired-mode-hook 'dired-git-mode)
;; )

(use-package dired
  :custom
  (dired-dwim-target 'dired-dwim-target-next)
  )

(use-package dired-x
  :bind (:map dired-mode-map
  ("C-x M-o" . dired-omit-mode))
  :custom
  (dired-listing-switches "-alhv")  ;; Add "h" to switches to get human-readable sizes

  (dired-guess-shell-alist-user '(
                                  ("\\.pdf\\'" "evince")
                                  ("\\.xmind" "xmind-zen")
                                  ))
  :config
  (add-to-list 'dired-omit-extensions ".fdb_latexmk")
  (add-to-list 'dired-omit-extensions "synctex.gz")
  (add-to-list 'dired-omit-extensions "log")
  (add-to-list 'dired-omit-extensions "fls")
  (add-to-list 'dired-omit-extensions "converted-to.pdf")
  (add-to-list 'dired-omit-extensions "bcf")
  (add-to-list 'dired-omit-extensions "acn")
  (add-to-list 'dired-omit-extensions "acr")
  (add-to-list 'dired-omit-extensions "alg")
  (add-to-list 'dired-omit-extensions "ist")
  (add-to-list 'dired-omit-extensions "loc")
  (add-to-list 'dired-omit-extensions "soc")
  (add-to-list 'dired-omit-extensions "slg")
  (add-to-list 'dired-omit-extensions "slo")
  (add-to-list 'dired-omit-extensions "sls")
  (add-to-list 'dired-omit-extensions "wrt")
  (add-to-list 'dired-omit-extensions "tikz.pdf")
  (add-to-list 'dired-omit-extensions ".figlist")
  (add-to-list 'dired-omit-extensions ".ilg")
  (add-to-list 'dired-omit-extensions ".ind")
  (add-to-list 'dired-omit-extensions ".out")
  (add-to-list 'dired-omit-extensions ".run.xml")
  (add-to-list 'dired-omit-extensions ".org_archive")
  (add-to-list 'dired-omit-extensions ".bak")
  (add-to-list 'dired-omit-extensions ".tramp_history")
  (add-to-list 'dired-omit-extensions ".python_history")
  (add-to-list 'dired-omit-extensions "qmlc")
  (setq dired-omit-files (concat dired-omit-files "\\|^.idea"))
  (setq dired-omit-files (concat dired-omit-files "\\|^.ipynb_checkpoints"))
  (setq dired-omit-files (concat dired-omit-files "\\|^.cache"))
  (setq dired-omit-files (concat dired-omit-files "\\|^.mypy_cache"))
  (setq dired-omit-files (concat dired-omit-files "\\|^.ccls-cache"))
  (setq dired-omit-files (concat dired-omit-files "\\|^.vscode"))
  (setq dired-omit-files (concat dired-omit-files "\\|^__pycache__"))
  )
#+end_src

** Icons in dired                                                      :AllTheIcons:
#+begin_src emacs-lisp
;; ;; Use the nice icons from treemacs in dired buffers
;; (use-package treemacs-icons-dired
;;   :ensure t
;;   :commands treemacs-icons-dired-mode
;;   :hook
;;   (dired-mode . treemacs-icons-dired-mode)
;;   )

(use-package all-the-icons-dired
  :ensure t
  :commands all-the-icons-dired-mode
  :hook
  (dired-mode . all-the-icons-dired-mode)
  :custom
  (all-the-icons-color-icons t)
  ;; (all-the-icons-dired-monochrome t)
  ;; :config
  ;; (set-face-attribute 'all-the-icons-dired-dir-face nil :foreground "gold")
  )
#+end_src

** Some pretty symbols
#+begin_src emacs-lisp
(add-hook
 'dired-mode-hook
 (lambda ()
   (add-to-list 'prettify-symbols-alist '("AUTH\\\\" . "★"))
   ;; (add-to-list 'prettify-symbols-alist `(,(s-replace "\\" "\\\\" (user-login-name)) . "🙋"))
   ;; (add-to-list 'prettify-symbols-alist `(,(s-replace "\\" "\\\\" (group-name (group-gid))) . "🫂"))
   (setq prettify-symbols-unprettify-at-point t)
   (prettify-symbols-mode)
   )
 )
#+end_src

* Project                                                                   :Project:
Emacs already has a notion of a "project" with native =project.el=

Keybindings are in "C-x p <something>".

Ex:
- ~C-x p f~ for project-find-file
- ~C-x p g~ for project-find-regexp
- ~C-x p D~ for project-dired


The problem with =project.el= is that it currently only supports VC and EDE backends. Most
of the time this is enough, since I'm usually using git. However, sometimes being able to
specify that a folder is a project with the presence of a special file (such as
.projectile with the =projectile= library) is useful.

** Make folders with .project file act as a project
The code below will make emacs recognize a folder with a =.project= file as a project.
#+begin_src emacs-lisp
;; Taken from https://manueluberti.eu/emacs/2020/11/14/extending-project/
(cl-defmethod project-root ((project (head local)))
  (cdr project))


(defun get-fd-program ()
  "Get the name of the fd program."
  (let* ((distro-name (get-linux-distro-name))
         (is-ubuntu? (string= "Ubuntu" distro-name)))
    (if is-ubuntu?
        "fdfind"
      "fd")))


(defun mu--project-files-in-directory (dir)
  "Use `fd' to list files in DIR."
  (let* ((default-directory dir)
         (localdir (file-local-name (expand-file-name dir)))
         (command (format "%s -t f -0 . %s" (get-fd-program) localdir)))
    (project--remote-file-names
     (sort (split-string (shell-command-to-string command) "\0" t)
           #'string<))))


(cl-defmethod project-files ((project (head local)) &optional dirs)
  "Override `project-files' to use `fd' in local projects."
  (mapcan #'mu--project-files-in-directory
          (or dirs (list (project-root project)))))


(defun mu-project-try-local (dir)
  "Determine if DIR is a non-Git project.
DIR must include a .project file to be considered a project."
  (let ((root (locate-dominating-file dir ".project")))
    (and root (cons 'local root))))


(use-package project
  :defer t
  :config
  (add-to-list 'project-find-functions 'mu-project-try-local))
#+end_src

** Make project ignore the .venv folder                                       :venv:
#+begin_src emacs-lisp
(add-to-list 'project-vc-ignores "./.venv/")
#+end_src

* Tree-sitter                                                 :CPP:Python:treesitter:
https://www.masteringemacs.org/article/how-to-get-started-tree-sitter

NOTE: If you want to use tree-sitter major modes in place of the regular major modes, you
can use the =major-mode-remap-alist= variable. Just set it to map regular major modes with
their corresponding -ts- one. Ex:
: (setq major-mode-remap-alist
:  '((yaml-mode . yaml-ts-mode)
:    (bash-mode . bash-ts-mode)
:    (js2-mode . js-ts-mode)
:    (typescript-mode . typescript-ts-mode)
:    (json-mode . json-ts-mode)
:    (css-mode . css-ts-mode)
:    (python-mode . python-ts-mode)))
** Configuration
#+begin_src emacs-lisp
(use-package tree-sitter
  :ensure t
  :defer t
  :config
  (global-tree-sitter-mode)
  :custom
  (treesit-font-lock-level 4) ;; Default is 3
  (treesit-language-source-alist
   '(
     (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
     (c "https://github.com/tree-sitter/tree-sitter-c")
     (bash "https://github.com/tree-sitter/tree-sitter-bash")
     ;; (cmake "https://github.com/uyha/tree-sitter-cmake")
     (css "https://github.com/tree-sitter/tree-sitter-css")
     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
     (html "https://github.com/tree-sitter/tree-sitter-html")
     ;; (javascript "https://github.com/tree-sitter/tree-sitter-javascript")
     (json "https://github.com/tree-sitter/tree-sitter-json")
     (make "https://github.com/alemuller/tree-sitter-make")
     (python "https://github.com/tree-sitter/tree-sitter-python")
     (toml "https://github.com/tree-sitter/tree-sitter-toml")
     (yaml "https://github.com/ikatyang/tree-sitter-yaml")
     (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
     (doxygen
       "https://github.com/tree-sitter-grammars/tree-sitter-doxygen"
       "v1.1.0")
     (qmljs "https://github.com/yuja/tree-sitter-qmljs")
     ))
  ;; Indentation
  (c-ts-mode-indent-offset 4)
  )

;; (use-package tree-sitter-langs
;;   :ensure t
;;   :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
;;          (c-mode-common . tree-sitter-hl-mode)
;;          (python-mode . tree-sitter-hl-mode)))
#+end_src

* COMMENT LSP                                                       :LSP:Programming:
** General configuration

Configuration specific to a language should be in that language configuration heading

#+begin_src emacs-lisp
;; Note that this must come before the use-package for LSP to have an effect
(setq lsp-keymap-prefix "C-c C-l")

(use-package lsp-mode
  :ensure t
  :hook (;; replace XXX-mode with concrete major-mode (e. g. python-mode)
         (c-mode-common . lsp-deferred)
         (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-deferred)))
         (cmake-mode . lsp-deferred)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp
  :custom
  (lsp-file-watch-threshold 6000)
  (lsp-enable-snippet t)
  ;; See https://emacs-lsp.github.io/lsp-mode/page/performance/#performance
  (read-process-output-max (* 1024 1024)) ;; 1mb
  )
#+end_src

** Consult-LSP                                                         :Consult:LSP:
#+begin_src emacs-lisp
(use-package consult-lsp
  :ensure t
  :bind (
         :map c-mode-base-map (
                            ("M-i" . consult-lsp-file-symbols)
                            ;; ("M-i" . consult-imenu)
                            ("M-I" . consult-lsp-symbols)
                            ("C-c ! L" . consult-lsp-diagnostics)
                            )
         :map python-mode-map (
                            ("M-i" . consult-lsp-file-symbols)
                            ;; ("M-i" . consult-imenu)
                            ("M-I" . consult-lsp-symbols)
                            ("C-c ! L" . consult-lsp-diagnostics)
                            )
         )
  )
#+end_src

** LSP-UI                                                                      :LSP:
#+begin_src emacs-lisp
(use-package lsp-ui
  :ensure t
  :commands (lsp-ui-doc-glance)
  :custom
  ; Position of the popup shown by lsp-ui-doc-glance -> C-c C-l h g
  (lsp-ui-doc-position 'at-point)
  (lsp-ui-doc-enable nil) ;; You can use "C-c C-l h g" to see the doc
  (lsp-ui-doc-header t)
  (lsp-ui-doc-max-height 20)
  (lsp-ui-doc-max-width 250)
)
#+end_src

* Eglot                                                                       :Eglot:

Eglot here relies on Emacs' built-in functionality as well. =xref-find-references= is bound
to =M-?=. Additionally, Eglot provides the following similar commands:
=eglot-find-declaration=, =eglot-find-implementation=, =eglot-find-typeDefinition=.

| Command                            | Keybinding | Description                                                 |
|------------------------------------+------------+-------------------------------------------------------------|
| xref-find-references               | (M-?)      | Find references to the identifier at point                  |
| xref-go-back                       | (M-,)      | Go back to the previous position in xref history            |
| xref-go-forward                    | (C-M-,)    | Go to the point where a previous M-, was invoked            |
| xref-find-apropos                  | (C-M-.)    | Find all meaningful symbols that match PATTERN              |
| xref-find-definitions-other-frame  | (C-x 5 .)  | Like ‘xref-find-definitions’ but switch to the other frame  |
| xref-find-definitions-other-window | (C-x 4 .)  | Like ‘xref-find-definitions’ but switch to the other window |

** General Configuration
https://joaotavora.github.io/eglot/

To add support to more server, see the =eglot-server-programs= variable.

: (add-hook 'foo-mode-hook 'eglot-ensure)

#+begin_src emacs-lisp
(use-package eglot
  :hook (;; replace XXX-mode with concrete major-mode (e. g. python-mode)
         (c-ts-base-mode . eglot-ensure)
         (c-mode-common . eglot-ensure)
         (python-mode . eglot-ensure)
         (python-ts-mode . eglot-ensure)
         (cmake-mode . eglot-ensure)
         (eglot-managed-mode . (lambda () (eglot-inlay-hints-mode -1)))
         (json-ts-mode . eglot-ensure)
         )
  :commands eglot-ensure
  :custom
  (eldoc-echo-area-use-multiline-p nil)
  :custom-face
  (eglot-highlight-symbol-face ((t (:underline (:style dots)))))
  :bind
  (:map eglot-mode-map
        ("C-c C-l ==" . eglot-format-buffer)
        ("C-c C-l =i" . eglot-code-action-organize-imports)
        ("C-c C-l rr" . eglot-rename)
        ("C-c C-l ti" . eglot-inlay-hints-mode)
        ("C-c C-l ." . eglot-code-action-quickfix)
        ("C-c C-l aa" . eglot-code-actions)
        ;; "C-c C-l s" prefix for server information commands
        ("C-c C-l se" . eglot-stderr-buffer)
        ("C-c C-l sE" . eglot-events-buffer)
        ("C-c C-l sc" . eglot-list-connections)
        ("C-c C-l sr" . eglot-reconnect)
        ("C-c C-l d" . eldoc)
        ))
#+end_src

- =eglot-mode-map=

  This variable is the keymap for binding Eglot-related command. It is in effect only as
  long as the buffer is managed by Eglot. By default, it is empty, with the single
  exception: C-h . is remapped to invoke eldoc-doc-buffer. You can bind additional
  commands in this map. For example:

: (define-key eglot-mode-map (kbd "C-c r") 'eglot-rename)
: (define-key eglot-mode-map (kbd "C-c o") 'eglot-code-action-organize-imports)
: (define-key eglot-mode-map (kbd "C-c h") 'eldoc)
: (define-key eglot-mode-map (kbd "<f6>") 'xref-find-definitions)
** Consult-Eglot                                                     :Consult:Eglot:
#+begin_src emacs-lisp
(use-package consult-eglot
  :ensure t
  :bind (
         :map c-mode-base-map (("M-I" . consult-eglot-symbols))
         :map c-ts-base-mode-map (("M-I" . consult-eglot-symbols))
         :map c++-ts-mode-map (("M-I" . consult-eglot-symbols))
         :map python-mode-map (("M-I" . consult-eglot-symbols))
         :map python-ts-mode-map (("M-I" . consult-eglot-symbols))
         )
  )
#+end_src

** Project specific configuration
See the =eglot-workspace-configuration= variable. [[https://gist.github.com/doolio/8c1768ebf33c483e6d26e5205896217f][Here]] is an example.
* Debugging                                                                   :debug:
** Emphasize current line in gud
#+begin_src emacs-lisp
(use-package gud
  :defer t
  :custom
  (gud-highlight-current-line t))
#+end_src

** Disable gdb asking if I want to download debuginfo
Set ~gdb-debuginfod-enable-setting~ to nil
#+begin_src emacs-lisp
(use-package gdb-mi
  :defer t
  :custom
  (gdb-debuginfod-enable-setting nil)
  )
#+end_src

** COMMENT dap-mode -> Debugger Adapter Protocol                         :LSP:debug:
For c++ see [[*Dap-debug (C++)][Dap-debug (C++)]]
For Python see [[*Dap-debug (Python)][Dap-debug (Python)]]

Commands you should know to use dap-mode (see more [[https://emacs-lsp.github.io/dap-mode/page/features/][here]])
| *Command*                              | *Description*                               |
|--------------------------------------+-------------------------------------------|
| dap-debug-edit-template              | Edit the debug template (call this first) |
|--------------------------------------+-------------------------------------------|
| dap-debug                            |                                           |
| dap-disconnect                       | kill a running debug session              |
| dap-delete-session                   | kill and delete a running debug session   |
|--------------------------------------+-------------------------------------------|
| dap-next                             |                                           |
| dap-continue                         |                                           |
| dap-step-in                          |                                           |
| dap-step-out                         |                                           |
|--------------------------------------+-------------------------------------------|
| dap-eval                             |                                           |
| dap-eval-region                      |                                           |
|--------------------------------------+-------------------------------------------|
| dap-breakpoint-toggle (-add/-delete) |                                           |
| dap-ui-breakpoints-list              |                                           |
|--------------------------------------+-------------------------------------------|
| dap-ui-show-many-windows             |                                           |
| dap-ui-hide-many-windows             |                                           |
|--------------------------------------+-------------------------------------------|

*** TODO Check support for launch.json
https://emacs-lsp.github.io/dap-mode/page/features/#launchjson-support

*** Common configuration for dap-mode
To use the debugger, run ~dap-debug-edit-template~, edit the template and evaluate it.

#+begin_src emacs-lisp
(use-package dap-mode
  ;; :defer t
  :ensure t
  :commands (dap-debug dap-debug-edit-template)
  :config
  (dap-mode 1)

  ;; Show the many windows when debug start and close them when debug stop
  (dap-auto-configure-mode)

  ;; The modes below are optional
  (dap-ui-mode 1)
  ;; enables mouse hover support
  (dap-tooltip-mode 1)
  ;; use tooltips for mouse hover
  ;; if it is not enabled `dap-mode' will use the minibuffer.
  (tooltip-mode 1)
  ;; displays floating panel with debug buttons
  ;; requies emacs 26+
  (dap-ui-controls-mode 1)

  ;; (dap-ui-breakpoints-mode 1)
  ;; (dap-ui-repl-mode 1)

  ;; :bind
  ;; (:map dap-mode-map
  ;;       (("<f12>" . dap-debug)
  ;;        ("<f8>" . dap-continue)
  ;;        ("<f9>" . dap-next)
  ;;        ("<M-f11>" . dap-step-in)
  ;;        ("C-M-<f11>" . dap-step-out)
  ;;        ("<f7>" . dap-breakpoint-toggle)))
  )
#+end_src

*** COMMENT Define a minor-mode that is activated when dap is running (useful to set keybindings)
Taken from https://emacs-lsp.github.io/dap-mode/page/how-to/
#+begin_src emacs-lisp
(define-minor-mode +dap-running-session-mode
  "A mode for adding keybindings to running sessions"
  nil
  nil
  (make-sparse-keymap)
  ;; (evil-normalize-keymaps) ;; if you use evil, this is necessary to update the keymaps

  ;; The following code adds to the dap-terminated-hook
  ;; so that this minor mode will be deactivated when the debugger finishes
  (when +dap-running-session-mode
    (let ((session-at-creation (dap--cur-active-session-or-die)))
      (add-hook 'dap-terminated-hook
                (lambda (session)
                  (when (eq session session-at-creation)
                    (+dap-running-session-mode -1)))))))

;; Activate this minor mode when dap is initialized
(add-hook 'dap-session-created-hook '+dap-running-session-mode)

;; Activate this minor mode when hitting a breakpoint in another file
(add-hook 'dap-stopped-hook '+dap-running-session-mode)

;; Activate this minor mode when stepping into code in another file
(add-hook 'dap-stack-frame-changed-hook (lambda (session)
                                          (when (dap--session-running session)
                                            (+dap-running-session-mode 1))))
#+end_src

Set a buffer to read-only when this minor mode is active
#+begin_src emacs-lisp
(add-hook '+dap-running-session-mode-hook 'read-only-mode)

#+end_src

** Dape mode                                                                 :debug:
Note: Here I'm onnly keepinng genenral configuration for dape.

For C++ configuration see [[*Dape C++ - Debug protocol][Dape C++ - Debug protocol]]
For Python configuration see

#+begin_src elisp
(use-package dape
  ;; Currently only on github
  :ensure (dape :type git :host github :repo "svaante/dape")
  :commands (dape dape-breakpoint-toggle dape-breakpoint-log dape-watch-dwim)

  ;; Add inline variable hints, this feature is highly experimental
  ;; (setq dape-inline-variables t)

  ;; To remove info buffer on startup
  ;; (remove-hook 'dape-on-start-hooks 'dape-info)

  ;; To remove repl buffer on startup
  ;; (remove-hook 'dape-on-start-hooks 'dape-repl)

  ;; By default dape uses gdb keybinding prefix
  ;; (setq dape-key-prefix "\C-x\C-a")

  ;; Kill compile buffer on build success
  ;; (add-hook 'dape-compile-compile-hooks 'kill-buffer)

  ;; Projectile users
  ;; (setq dape-cwd-fn 'projectile-project-root)
  ;; :custom
  ;; (dape-buffer-window-arrangement 'gud)

  :config
  (transient-define-prefix dape-transient ()
    "Transient for dape."
    [["Stepping"
      ("n" "Next" dape-next :transient t)
      ("i" "Step in" dape-step-in :transient t)
      ("o" "Step out" dape-step-out :transient t)
      ("c" "Continue" dape-continue :transient t)
      ("r" "restart" dape-restart :transient t)]
     ["Breakpoints"
      ("bb" "Next" dape-breakpoint-toggle :transient t)
      ("bd" "Step in" dape-breakpoint-remove-at-point :transient t)
      ("bD" "Continue" dape-breakpoint-remove-all :transient t)
      ("bl" "restart" dape-breakpoint-log :transient t)]
     ["Info"
      ("si" "Info" dape-breakpoint-toggle :transient t)
      ("sm" "Memory" dape-breakpoint-remove-at-point :transient t)
      ("ss" "Select Stack" dape-breakpoint-remove-all :transient t)
      ("R" "Repl" dape-breakpoint-log :transient t)]
     ["Quit"
      ("qq" "Quit" dape-quit :transient nil)
      ("qk" "Kill" dape-kill :transient nil)]])
  )
#+end_src

* Formatting buffers                                                       :apheleia:
If the language server in a programming language supports formatting, use that instead. If
it does not, then apheleia can be used instead.
#+begin_src emacs-lisp
(use-package apheleia
  :ensure t
  :commands (apheleia-format-buffer)
  )
#+end_src

In each language configuration what needs to use apheleia for formatting, you might add an
entry to =apheleia-formatters= and =apheleia-mode-alist=.
* C++                                                               :CPP:Programming:
Note: Use =C-c C-k= to toggle between line comments and block comments.
** Doxygen                                                                 :doxygen:
*** Doxygen with tree-sitter
Enable doxygen syntax highlighting using tree-sitter.

YOU NEED TO MANUALLY INSTALL THE GRAMMAR. You can do it with the code below.
: git clone https://github.com/tree-sitter-grammars/tree-sitter-doxygen
: cd tree-sitter-doxygen
: gcc ./src/parser.c  ./src/scanner.c -fPIC -I./ --shared -o libtree-sitter-doxygen.so
: cp libtree-sitter-doxygen.so ~/.emacs.d/tree-sitter/

*NOTE:* The =c-ts-mode-enable-doxygen= option was added only in Emacs 31.1.
#+begin_src emacs-lisp
(use-package c-ts-mode
  :custom
  (c-ts-mode-enable-doxygen t)
  )
#+end_src

** Always consider .h files as C++
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cppm\\'" . c++-mode)) ;; One of extensions used for module file
(add-to-list 'auto-mode-alist '("\\.ccm\\'" . c++-mode))  ;; One of extensions used for module file
(add-to-list 'auto-mode-alist '("\\.cxxm\\'" . c++-mode)) ;; One of extensions used for module file
(add-to-list 'auto-mode-alist '("\\.c++m\\'" . c++-mode)) ;; One of extensions used for module file
#+end_src

** cmake-integration package                                           :CMake:Dired:
#+begin_src emacs-lisp
(defun is-cmake-project? ()
  "Determine if the current directory is a CMake project."
  (interactive)
  (if-let* ((project (project-current))
            (project-root (project-root project))
            (cmakelist-path (expand-file-name "CMakeLists.txt" project-root)))
      (file-exists-p cmakelist-path)))


(defun cmake-integration-keybindings-mode-turn-on-in-cmake-projects ()
  "Turn on `cmake-integration-keybindings-mode' in CMake projects."
  (when (and (is-cmake-project?) (not (eq major-mode 'qml-ts-mode)))
    (cmake-integration-keybindings-mode 1)))


(define-minor-mode cmake-integration-keybindings-mode
  "A minor-mode for adding keybindings to compile C++ code using cmake-integration package."
  nil
  "cmake"
  '(
    ([f5] . cmake-integration-transient)                         ;; Open main transient menu
    ([M-f9] . cmake-integration-select-current-target)                ;; Ask for the target name and compile it
    ([f9] . cmake-integration-save-and-compile-last-target)      ;; Recompile the last target
    ([C-f9] . cmake-integration-run-ctest)                       ;; Run CTest
    ([f10] . cmake-integration-run-last-target)                  ;; Run the target (using any previously set command line parameters)
    ([S-f10] . kill-compilation)
    ([C-f10] . cmake-integration-debug-last-target)              ;; Debug the target (using any previously set command line parameters)
    ([M-f10] . cmake-integration-run-last-target-with-arguments) ;; Ask for command line parameters to run the target
    ([M-f8] . cmake-integration-select-configure-preset)         ;; Ask for a preset name and call CMake to configure the project
    ([f8] . cmake-integration-cmake-reconfigure)                 ;; Call CMake to configure the project using the last chosen preset
    )
  )

(define-globalized-minor-mode global-cmake-integration-keybindings-mode
  cmake-integration-keybindings-mode cmake-integration-keybindings-mode-turn-on-in-cmake-projects)


(global-cmake-integration-keybindings-mode)


(use-package cmake-integration
  :ensure (cmake-integration :type git :host github :protocol ssh
                             :repo "darcamo/cmake-integration" :depth nil)
  :defer t
  :commands (cmake-integration-conan-manage-remotes
             cmake-integration-conan-list-packages-in-local-cache
             cmake-integration-search-in-conan-center
             cmake-integration-transient)
  :custom
  (cmake-integration-include-subproject-targets-during-completion nil)
  (cmake-integration-hide-utility-targets-during-completion t)
  (cmake-integration-generator "Ninja")
  (cmake-integration-use-separated-compilation-buffer-for-each-target t)
  )

;;;###autoload
(autoload 'cmake-integration-transient "cmake-integration" nil t)


(use-package bottom-buffer-manager
  :defer t
  :config
  (add-to-list 'bottom-buffer-manager-match-strings "*Running - "))

(add-to-list 'display-buffer-alist
             '("\\*Running - .*"
               bottom-buffer-manager-display-action-function
               ;; Following are the display-buffer parameters
               (window-height . 0.28)
               ))
#+end_src

** General configuration
#+begin_src emacs-lisp
(use-package c-ts-mode
  :defer t
  :after cc-mode
  :bind (:map c-mode-base-map
              ([S-f9] . cmake-integration-generate-project-documentation)  ;; Generate the doxygen documentation
              ([C-S-f9] .  cmake-integration-view-project-documentation)
              ;; Alternate between header and source. You could also use lsp-clangd-find-other-file instead
              ("M-o" . ff-find-other-file)
              ("M-O" . lsp-clangd-find-other-file)

              :map c-ts-base-mode-map
              ([S-f9] . cmake-integration-generate-project-documentation)  ;; Generate the doxygen documentation
              ([C-S-f9] .  cmake-integration-view-project-documentation)
              ;; Alternate between header and source. You could also use lsp-clangd-find-other-file instead
              ("M-o" . ff-find-other-file)
              ("M-O" . lsp-clangd-find-other-file)
              )

  :config
  ;; If the indentation is wrong at some place, put the cursor there and use "C-c
  ;; C-o" to find-out the offset and the name of the syntactical element under the
  ;; cursor. Example: put the cursor in the "{" in a function definition and use
  ;; "C-c C-o". Emacs will tell that the syntactical element is "defun-open". Now,
  ;; see the help for the c-offsets-alist variable and look for defun-open to see
  ;; what it is. Using this you can known how to adapt a style to your needs.
  ;;
  ;; For my style, use "stroustrup" style as a base and change the value of
  ;; "innamespace" to zero in the c-offsets-alist. This means that we don't get
  ;; indentation inside a namespace.
  (c-add-style "darcamo"
               '("stroustrup"
                 (c-offsets-alist . ((innamespace . [0])))))
  (setq-default c-doc-comment-style
                '((java-mode . javadoc)
                  (pike-mode . autodoc)
                  (c-mode    . doxygen)
                  (c++-mode  . doxygen)))
  (push '(c-mode . "darcamo") c-default-style)
  (push '(c++-mode . "darcamo") c-default-style)
  :hook
  (c-mode-common . (lambda () (setq fill-column 120)))
  (c-ts-base-mode . (lambda () (setq fill-column 120)))
  )

;; c-c++-lsp-enable-semantic-highlight nil
#+end_src

** Modify c++-ts-mode to fix syntax highlight                           :treesitter:
This is only necessary while =c-ts-mode= is not updated to include a few module related
keywords: =import=, =export= and =module.

*NOTE*: This was added in [2025-06-16 seg]. Try commenting-out this customization to see if
the =c++-ts-mode= was updated to fontify module names and the new keywords properly.

#+begin_src emacs-lisp
(defvar darcamo/cpp-font-lock-module-rules
  (treesit-font-lock-rules
   :language 'cpp
   :feature 'type
   :override t
   '((module_name (identifier)) @font-lock-constant-face))
  "Custom C++ font-lock rules for C++ treesit mode matching the module name.")


(use-package c-ts-mode
  :defer t
  :config
  (add-to-list 'c-ts-mode--c++-operator-keywords "import")
  (add-to-list 'c-ts-mode--c++-operator-keywords "export")
  (add-to-list 'c-ts-mode--c++-operator-keywords "module")
  :hook
  (c++-ts-mode . (lambda () (setq-local treesit-font-lock-settings
                                   (append treesit-font-lock-settings
					                       darcamo/cpp-font-lock-module-rules)))))
#+end_src

** Change eglot-server-program to configure clangd                    :Eglot:clangd:
#+begin_src emacs-lisp
(defun get-clangd-path ()
  "Get the path of the clangd language server."
  (let* ((distro-name (get-linux-distro-name))
         (is-ubuntu? (string= "Ubuntu" distro-name)))
    (if is-ubuntu?
        "clangd-19"
      "clangd")))


;; https://www.reddit.com/r/emacs/comments/18eeu1f/configure_clangd_in_eglot_to_not_add_headers/
(use-package eglot
  :config
  (add-to-list 'eglot-server-programs
               `((c-ts-mode c++-ts-mode c-mode c++-mode)
                 . (,(get-clangd-path)
                    "-j=12"
                    "--log=error"
                    "--malloc-trim"
                    "--background-index"
                    "--clang-tidy"
                    "--completion-style=detailed"
                    "--pch-storage=memory"
                    "--header-insertion=never"
                    "--header-insertion-decorators=0")))
  )
#+end_src

** CMake-ts-mode                                                             :CMake:
#+begin_src emacs-lisp
(use-package emacs
  :mode
  ("CMakeLists.txt" . cmake-ts-mode)
  ("\\.cmake" . cmake-ts-mode)
  :custom
  (cmake-ts-mode-indent-offset 4)
  )
#+end_src

** CMake Presets mode                                                        :CMake:
#+begin_src emacs-lisp
(defun darcamo/is-cmake-presets-file ()
  "Check if FILENAME is the name of a cmake presets file."
  (if-let* ((buffer-name (buffer-file-name))
            (filename (file-name-nondirectory buffer-name)))
      (if (member filename '("CMakePresets.json" "CMakeUserPresets.json" "ConanPresets.json")) t nil)))


(use-package cmakepresets-mode
  :ensure (cmakepresets-mode :type git :host github :protocol ssh
                             :repo "darcamo/cmakepresets-mode" :depth nil)
  :mode
  ("ConanPresets\\.json" . cmakepresets-mode)
  :hook
  (json-mode . (lambda () (when (darcamo/is-cmake-presets-file) (cmakepresets-mode))))
  :config
  (add-to-list 'eglot-server-programs
               '((cmakepresets-mode)
                 . ("vscode-json-languageserver" "--stdio")))
  )

;; Customize consult-imenu-config to display our presets nicely in consult-imenu
(use-package consult-imenu
  :defer t
  :config
  (add-to-list 'consult-imenu-config '(cmakepresets-mode
                                       :toplevel "Configure"
                                       :types
                                       ((?c "Configure")
                                        (?b "Build")
                                        (?t "Test")
                                        (?p "Package")
                                        (?w "Workflow")))))
#+end_src

** CMake language server                                               :CMake:Eglot:
#+begin_src emacs-lisp
(add-to-list 'eglot-server-programs '((cmake-mode cmake-ts-mode) . ("cmake-language-server")))
#+end_src

** Format CMake buffers                                                   :apheleia:
#+begin_src emacs-lisp
(defun darcamo/format-cmake-buffer ()
  "Format a cmake buffer using cmake-format with apheleia.

This saves the buffer, formats it, and then reloads the disk version."
  (interactive)

  (save-buffer)
  (apheleia-format-buffer 'cmakeformat)
  ;; (lambda () (interactive) (switch-to-buffer (current-buffer)) (revert-buffer t t t))
  (sleep-for 0.1)  ;; Ideally we want to use the callback in apheleia-format-buffer
  (revert-buffer t t t)
  )


(use-package emacs
  :after apheleia
  :config
  (push '(cmakeformat . ("cmake-format" "--in-place" file))
        apheleia-formatters)
  (add-to-list 'apheleia-mode-alist '(cmake-ts-mode . cmakeformat)))


(use-package cmake-ts-mode
  :bind (:map cmake-ts-mode-map
              ;; Save the buffer to file, format the file and reload the disk
              ("C-c f" . darcamo/format-cmake-buffer)))
#+end_src
** Ninja Mode
Note: =ninja-mode= was previously included in the [[https://github.com/ninja-build/ninja/commits/master/][ninja repository]], but on [2024-11-11 Mon]
it was moved to its [[https://github.com/ninja-build/ninja-emacs/issues][own repository]]. Because of that, just =use-package ninja-mode= with
=:ensure t= was not working anymore and I had to specify the new repository and even the
main file.
#+begin_src emacs-lisp
(use-package ninja-mode
  :ensure (ninja-emacs :type git :host github :repo "ninja-build/ninja-emacs" :main "ninja-mode.el")
  :defer t)
#+end_src

** Help find file at point and ff-find-other-file find include files
#+begin_src emacs-lisp
(use-package ffap
  :defer t
  :config
  (add-to-list 'ffap-c++-path "~/git_files/cppsim/src")
  (add-to-list 'ffap-c++-path "~/git_files/cppsim/tests")
  )

(use-package find-file
  :defer t
  :config
  (add-to-list 'cc-search-directories "~/git_files/cppsim/src")
  (add-to-list 'cc-search-directories "~/git_files/cppsim/tests")
  (add-to-list 'cc-search-directories "../api")
  (add-to-list 'cc-search-directories "../include")
  (add-to-list 'cc-search-directories "../src")
  (add-to-list 'cc-search-directories "../inc")
  )
#+end_src

** Color in compilation buffer (fancy compilation mode)                :Compilation:
#+begin_src emacs-lisp
(use-package fancy-compilation
  :ensure t
  :custom
  (fancy-compilation-quiet-prelude nil)
  :config
  (fancy-compilation-mode)
  :custom-face
  (fancy-compilation-default-face ((t (:background nil)))))
#+end_src

** My custom fontify rules to add colors to compilation buffer         :Compilation:
#+begin_src emacs-lisp
(use-package emacs
  :config
  (let* (
         (cmake-progress-regexp "\\[\\([0-9]+/[0-9]+\\)\\]")
         (path-regexp "\\(\\(/\\|~/\\|../\\)[^[:space:]]+\\)")
         ;; Only matches if it's either in the beginning of the line or if
         ;; there is a space before the path. This avoids some false positivies.
         ;; (path-beginning-of-line (concat "\\(?:^\\| \\)" path-regexp))
         (path-inside-quotes (format "'%s'" path-regexp))
         (path-inside-double-quotes (format "\"%s\"" path-regexp))
         (keywords `(
                     (,path-inside-quotes (1 'font-lock-string-face t))
                     (,path-inside-double-quotes (1 'font-lock-string-face t))
                     ;; (,path-beginning-of-line (1 'font-lock-string-face t))
                     ;; Note that more specific regexps are added later
                     (,cmake-progress-regexp (1 'font-lock-warning-face t))
                     ))
         )

    (font-lock-add-keywords 'compilation-mode keywords)
    ))
#+end_src
;; (use-package emacs
;;   :custom
;;   (compilation-environment '("TERM=xterm-256color")))

** Outline minor mode in compilation buffers (for cmake)
Set =outline-regexp= in a local variable to ="\\[\\([0-9]+/[0-9]+\\)\\]"=.


#+begin_src emacs-lisp
(use-package emacs
  :hook
  (compilation-mode . (lambda ()
                        (let* (;; Messages during configure start with "--"
                               (cmake-configure-regexp "\\(--\\)")
                               ;; Messages during build start with "[<number>/<number>]" (ninja generator)
                               (cmake-build-regexp "\\[\\([0-9]+/[0-9]+\\)\\]")
                               (regexp-list (list cmake-configure-regexp cmake-build-regexp))
                               (full-outline-regexp (string-join regexp-list "\\|"))
                               )
                          (setq outline-regexp full-outline-regexp)
                          (outline-minor-mode)))))
#+end_src

** Qt and QML                                                               :QML:Qt:

*** qml-ts-mode (Has imenu support, but syntax highlight is still pretty low) :treesitter:
Alternative mode for qml, using tree-sitter.

NOTE: You need to manually install the tree-sitter grammar for it. Add an entry to
=treesit-language-source-alist= with
: (qmljs "https://github.com/yuja/tree-sitter-qmljs")
and then call =treesit-install-language-grammar= and specify =qmljs= as the language.

#+begin_src emacs-lisp
(use-package qml-ts-mode
  :ensure (qml-ts-mode :type git :host github :protocol ssh
                       :repo "darcamo/qml-ts-mode" :depth nil)
  :bind (:map qml-ts-mode-map
              ([M-f9] . cmake-integration-save-and-compile) ;; Ask for the target name and compile it
              ([f9] . cmake-integration-save-and-compile-last-target)  ;; Recompile the last target
              ([f10] . cmake-integration-run-last-target)
              ([M-f10] . cmake-integration-run-last-target-with-arguments)
              ([C-f9] . cmake-integration-run-ctest)  ;; Compile only the current source file
              ([M-f10] . qml-integration-choose-qml-style)
              ([C-f10] . qml-integration-run-qmlscene)
              ([S-f10] . qml-integration-run-qmltestrunner)
              ([S-C-f10] . qml-integration-run-qmllint)
              ([M-f8] . cmake-integration-select-configure-preset)
              ([f8] . cmake-integration-cmake-reconfigure)
              )
  :hook
  (qml-ts-mode . (lambda ()
                   (require 'qml-integration)
                   (require 'apheleia)
                   (setq fill-column 120))))

  (use-package consult-imenu
  :defer t
  :config
  (add-to-list 'consult-imenu-config '(qml-ts-mode
                                       :toplevel "Component"
                                       :types
                                       ((?c "Component" 'font-lock-type-face)
                                        (?f "Function" 'font-lock-function-name-face)
                                        (?p "Property" 'font-lock-property-name-face)
                                        (?s "Signal" 'font-lock-function-name-face)))))
#+end_src

*** Janus Colors
#+begin_src emacs-lisp
(when (locate-library "janus")
  (load-library "janus")
  )
#+end_src

*** qml-integration package
#+begin_src emacs-lisp
(use-package qml-integration
  :commands (qml-integration-choose-qml-style
             qml-integration-run-qmlscene
             qml-integration-run-qmltestrunner
             qml-integration-run-qmllint)
  :ensure (qml-integration :type git :host github :protocol ssh
                           :repo "darcamo/qml-integration" :depth nil)
  :mode
  ;; Set mode of qml.qrc file to xml-mode
  (".qrc" . xml-mode)
  :custom
  (qml-integration-qt-install-bin-folder "~/Qt/6.9.1/gcc_64/bin/")
  (qml-integration-qmlscene-program "qml")
  )

(use-package bottom-buffer-manager
  :defer t
  :config
  (add-to-list 'bottom-buffer-manager-match-strings "Viewing qml file")
  (add-to-list 'bottom-buffer-manager-match-strings "Linting qml file")
  (add-to-list 'bottom-buffer-manager-match-strings "Running test file"))
#+end_src

*** Detect filename in compilation-mode for qmltestrunner errors       :Compilation:
#+begin_src emacs-lisp
(use-package compile
  :config
  (add-to-list 'compilation-error-regexp-alist
               ;; Error: mpi.F90, line 116: Implicit type for MPI_COMM_WORLD in MPI_MOD_INIT
               ;;        detected at MPI_M@<end-of-statement>
               ;; [f95 terminated - errors found by pass 1]
               '("Loc: \\[\\(.*\\)(\\([0-9]*\\))" 1 2))
  )
#+end_src

*** Formatting QML buffers with apheleia                              :QML:apheleia:
#+begin_src elisp
(use-package qml-ts-mode
  :after apheleia
  :config
  (push '(qmlformat . ("~/Qt/6.9.1/gcc_64/bin/qmlformat" "--inplace" file))
        apheleia-formatters)

  (add-to-list 'apheleia-mode-alist '(qml-ts-mode . qmlformat))
  :bind (:map qml-ts-mode-map
              ;; Save the buffer to file, format the file and reload the disk
              ("C-c f" . (lambda () (interactive)
                           (save-buffer)
                           (apheleia-format-buffer 'qmlformat)
                           ;; (lambda () (interactive) (switch-to-buffer (current-buffer)) (revert-buffer t t t))
                           (sleep-for 0.1)  ;; Ideally we want to use the callback in apheleia-format-buffer
                           (revert-buffer t t t)
                           ))))
#+end_src

*** Squish
#+begin_src emacs-lisp
(use-package squish-feature
  :commands (squish-feature-mode)
  :mode ("\\.feature" . squish-feature-mode)
  )

(use-package squishrunner
  :commands (squishrunner-mode)
  :bind (:map squishrunner-mode-map
              ([f9] . squish-run-last-test-case)
              ([M-f9] . squish-ask-and-run-test-case)

              ([f10] . squish-run-last-test-suite)
              ([M-f10] . squish-ask-and-run-test-suite)

              ([f8] . squish-start-server)
              ([C-f8] . squish-stop-server)

              ([f9] . my-python-compile)
              ([S-f9] . kill-compilation)))
#+end_src

Note: Check [[*prodigy: Starting processes with emacs][prodigy: Starting processes with emacs]]
- This could be used to start the squish server
*** Add qmlls to eglot-server-programs                                       :Eglot:
#+begin_src emacs-lisp
(use-package eglot
  :config
  (add-to-list 'eglot-server-programs
               '((qml-ts-mode)
                 . ("~/Qt/6.9.1/gcc_64/bin/qmlls")))
  :hook
  (qml-ts-mode . (lambda ()
                   ;; imenu from qml-ts-mode is better than the one provided by
                   ;; eglot (with qmlls). Hence, we disably this capability in
                   ;; eglot to keep using the one from qml-ts-mode
                   (set (make-local-variable 'eglot-ignored-server-capabilities) '(:documentSymbolProvider))
                   (eglot-ensure))))
#+end_src

*** Qt Translations Mode
Usually, something named "anything.ts" will use the typescript major mode, but Qt also
uses the =.ts= extension for itsa (translation) language files.

#+begin_src emacs-lisp
(use-package qt-translations-mode
  :ensure (qt-translations-mode :type git :host github :protocol ssh
                                :repo "darcamo/qt-translations-mode" :depth nil)
  :commands (qt-translations-mode)
  :mode
  ("translations/.*\\.ts" . qt-translations-mode))
#+end_src

** Conan package manager
#+begin_src emacs-lisp
;; Here we define a minor mode for conanfile just to have a mode-map for it
(define-derived-mode conanfile-mode
  conf-space-mode "conanfile-Mode" "A derived mode from conf-space-mode for conanfile.txt buffers."
  )

(use-package conanfile-mode
  :mode
  ("conanfile\\.txt" . conanfile-mode)
  )
#+end_src

** COMMENT Dap-debug (C++) - Debug Protocol                                  :debug:
There are two alternatives for using dap-debug with c++:
- [[https://emacs-lsp.github.io/dap-mode/page/configuration/#lldb][LLDB]] -> use ~(require 'dap-lldb)~
- [[https://emacs-lsp.github.io/dap-mode/page/configuration/#vscode-cpptools][vscode-cpptools]] -> use ~(require 'dap-cpptools)~
- [[https://emacs-lsp.github.io/dap-mode/page/configuration/#native-debug-gdblldb][Native Debug (GDB/LLDB)]] -> use ~(require 'dap-gdb-lldb)~


Here we use the configuration for dap-cpptools. The nice thing about it is that it
provides a function that install the dependencies for us. This, all we need to do to use
it is running ~dap-debug-edit-template~ to configure the template before running ~dap-debug~.
#+begin_src emacs-lisp
(use-package dap-cpptools
  :after dap-mode
  :config
  (dap-cpptools-setup)
  )
#+end_src

To use the debugger, run ~dap-debug-edit-template~, edit the template and evaluate it.

** Dape C++ - Debug protocol                                                 :debug:
Note: You need to install =cpptools= extension. See [[https://github.com/svaante/dape#c-and-c---cppdbg][here]] for instructions. In summary, just
download a [[https://github.com/microsoft/vscode-cpptools/releases][release]], and unpack the =vsix= file, Then =chmod +x
debugAdapters/bin/OpenDebugAD7=.

#+begin_src emacs-lisp
(use-package emacs
  :after dape
  :config
  (setq dape-cppdbg-command "~/.emacs.d/debug-adapters/cpptools/extension/debugAdapters/bin/OpenDebugAD7")
  (add-to-list 'dape-configs
               `(cppdbg
                 modes (c-mode c-ts-mode c++-mode c++-ts-mode)
                 command-cwd ,(file-name-directory
                               dape-cppdbg-command)
                 command dape-cppdbg-command
                 :type "cppdbg"
                 :request "launch"
                 :cwd dape-cwd-fn
                 :program dape-find-file
                 :MIMode ,(cond
                           ((executable-find "gdb") "gdb")
                           ((executable-find "lldb") "lldb"))))

  )
#+end_src

** TODO Other packages to investigate                                  :Investigate:
- [[https://github.com/plandes/flex-compile][flex-compile]]
- [[https://github.com/ReanGD/emacs-multi-compile][emacs-multi-compile]]
* Python                                                         :Programming:Python:
Olhar esse link: https://gist.github.com/Nathan-Furnal/07413de07b9ac08340a5d33b541e9a6b

Ver pacote poetry: https://github.com/galaunay/poetry.el
Ver pacote numpydoc: https://github.com/douglasdavis/numpydoc.el
Ver pacote yapfify (caso não consiga formatar com o LSP)
Ver pacote python-coverage

Link de um comentário no reddit: https://www.reddit.com/r/emacs/comments/rutoj7/comment/hr2q2xc/?utm_source=share&utm_medium=web2x&context=3

NOTE: Run the =run-python= command to run a python interpreter (with
completion).
** Use python-ts-mode instead of regular python-mode
#+begin_src emacs-lisp
(add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
#+end_src

** Helper functions
#+begin_src emacs-lisp

;; Pegue em http://wwwx.cs.unc.edu/~gb/wp/blog/2008/03/15/running-python-from-within-emacs/
;; Com essa função você pode rodar um script python usando o compile buffer
;; (make-local-variable 'py-master-file)
(defun my-python-compile ()
  "Use compile to run python programs. If the py-master-file variable is set, run that file. If not, run the file associated with the current buffer."
  (interactive)
  (save-buffer)
  (setq python-command-with-options "python -W ignore ")
  (if ; If the variable py-master-file exists we are using python-mode.el
      (boundp 'py-master-file)
      (if ; In that case, we will run the file pointed by py-master-file or
                                        ; the file associated with the current buffer
          (eq py-master-file nil)
          (compile (concat python-command-with-options (buffer-file-name)) nil)
        (compile (concat python-command-with-options py-master-file) nil)
        )
    ;; If py-master-file does not exist we are using the default python.el
    ;; from emacs and we will run the file associated with the current
    ;; buffer
    (compile (concat python-command-with-options (buffer-file-name)) nil)
    ))


;; Debug helpers

(defun python--add-debug-highlight ()
  "Adds a highlighter for use by `python--pdb-breakpoint-string'"
  (highlight-lines-matching-regexp "# -- DEBUG -- #\\s-*$" 'hi-red-b)
  )

(defvar python--pdb-breakpoint-string "breakpoint()  # -- DEBUG -- #"
  "Python breakpoint string used by `python-insert-breakpoint'")

(defun python-insert-breakpoint ()
  "Inserts a python breakpoint using `pdb'"
  (interactive)
  (back-to-indentation)
  ;; this preserves the correct indentation in case the line above
  ;; point is a nested block
  (split-line)
  (insert python--pdb-breakpoint-string))

;; (defadvice compile (before ad-compile-smart activate)
;;   "Advises `compile' so it sets the argument COMINT to t
;; if breakpoints are present in `python-mode' files"
;;   (when (derived-mode-p major-mode 'python-mode)
;;     (save-excursion
;;       (save-match-data
;;         (goto-char (point-min))
;;         (if (re-search-forward (concat "^\\s-*" python--pdb-breakpoint-string "$")
;;                                (point-max) t)
;;             ;; set COMINT argument to `t'.
;;             (ad-set-arg 1 t))))))

;; ;; Add breakpoints in pudb
;; (setq pudb-bp-file (expand-file-name "~/.config/pudb/saved-breakpoints-2.7"))
;; (defun pudb-add-breakpoint ()
;;   (interactive)
;;   (append-to-file
;;    (concat "b " buffer-file-name ":"
;;            (nth 1 (split-string (what-line))) "\n")
;;    nil pudb-bp-file))
#+end_src

** pytest
#+begin_src emacs-lisp
(use-package python-pytest
  :ensure t
  :bind (:map python-ts-mode-map
              ([f10] . python-pytest-file-dwim)
              ([C-f10] . python-pytest-run-def-at-point-treesit)
              ([S-f10] . python-pytest)
              ([C-S-f10] . python-pytest-dispatch)
              ))
#+end_src
** Configuration and keybindings
#+begin_src emacs-lisp
(use-package python
  :defer t
  :bind (:map python-mode-map
              ;; Add breakpoint with pudb
              ([C-f8] . python-insert-breakpoint)
              ;; ([C-S-f8] . pudb-add-breakpoint)

              ;; Run a python file
              ([f9] . my-python-compile)
              ([S-f9] . kill-compilation)
              )
  :bind (:map python-ts-mode-map
              ;; Add breakpoint with pudb
              ([C-f8] . python-insert-breakpoint)
              ;; ([C-S-f8] . pudb-add-breakpoint)

              ;; Run a python file
              ([f9] . my-python-compile)
              ([S-f9] . kill-compilation)
              )
  :custom
  (python-shell-interpreter "ipython")
  (python-shell-interpreter-args "--simple-prompt")
  (python-check-command "ruff check")  ;; Use `C-c C-v` to check the code
  :hook
  (python-base-mode . (lambda () (setq fill-column 120)))


  ;; :hook
  ;; ;; (python-base-mode . python--add-debug-highlight)
  ;; (python-mode . (lambda ()
  ;;                  (python--add-debug-highlight)
  ;;                  (require 'dap-python)))
  )
#+end_src

** Anaconda support                                                  :Anaconda:venv:
#+begin_src emacs-lisp
(use-package conda
  :ensure t
  :defer t
  :commands (conda-env-list conda-env-activate conda-env-deactivate)
  :config
  (setq conda-anaconda-home (expand-file-name "~/miniconda3"))
  (setq conda-env-home-directory (expand-file-name "~/miniconda3"))
  ;; if you want interactive shell support, include:
  (conda-env-initialize-interactive-shells)
  ;; if you want eshell support, include:
  (conda-env-initialize-eshell)
  ;; if you want auto-activation (see below for details), include:
  (conda-env-autoactivate-mode t)
  )
#+end_src

** pyvenv: Virtual Environment                                                :venv:
#+begin_src emacs-lisp
;; Call pyvenv-activate and specify the folder with the virtual environment
(use-package pyvenv
  :ensure t
  :commands (pyvenv-activate pyvenv-workon pyvenv-mode pyvenv-tracking-mode)
  :custom
  (pyvenv-workon "~/miniconda3/envs/")
  ;; :init
  ;; (pyvenv-mode 1)
  ;; (pyvenv-tracking-mode 1)
  ;; (setenv "WORKON_HOME" "~/miniconda3/envs/")
  )

(use-package pyvenv-auto
  :ensure t
  :hook ((python-base-mode . pyvenv-auto-run)))
#+end_src

** uv-mode                                                                    :venv:
https://github.com/z80dev/uv-mode

If you decide to try it, you should probably comment out pyvenv package.

** pyright as language server                                                  :LSP:
*** COMMENT LSP                                                                :LSP:
Note: The configuration to load LSP on python mode is in [[*LSP][LSP]].
#+begin_src emacs-lisp
(use-package lsp-pyright
  :ensure t
  :defer t)

;; https://github.com/fredcamps/lsp-jedi
;; (use-package lsp-jedi
;;   :ensure t)
#+end_src

*** Eglot                                                                    :Eglot:
#+begin_src emacs-lisp
(use-package eglot
  :config
  (add-to-list 'eglot-server-programs '((python-mode python-ts-mode) . ("pyright-langserver" "--stdio")))
  )
#+end_src


https://robbmann.io/posts/emacs-eglot-pyrightconfig/
#+begin_quote
pyright is typically a system or user installation, not something you install per virtual
environment. Getting pyright to see the virtual environment of my choosing , and correctly
report which dependencies are installed was a bit of a hassle, but I think my favorite
solution so far has been to configure the virtual environment through the
pyrightconfig.json file at the root of my project, and just have this file ignored by git.
#+end_quote
** Ruff                                                                       :Ruff:
Ruff provides:
- linting
- formatting
- isort
*** Format buffer with ruff
#+begin_src emacs-lisp
(use-package ruff-format
  :ensure t
  :commands (ruff-format-buffer ruff-format-region ruff-format-on-save-mode)
  :bind ( :map python-ts-mode-map
          ("C-c f" . ruff-format-buffer)
          ))
#+end_src

*** Flymake support for Python with ruff

#+begin_src emacs-lisp
(use-package flymake-ruff
  :ensure t
  :hook (python-ts-mode . flymake-ruff-load)
  :hook (python-mode . flymake-ruff-load)
  :hook (eglot-managed-mode . flymake-ruff-load)
  )
#+end_src

https://github.com/erickgnavar/flymake-ruff
#+begin_quote
Pyright has some diagnostic notes that overlap with diagnostics provided by ruff. These
diagnostic notes can't be disabled via Pyright's config, but you can exclude them by
adding a filter to eglot--report-to-flymake. For example, to remove Pyright's "variable
not accessed" notes, add the following:
#+end_quote

The code below is from https://github.com/erickgnavar/flymake-ruff
It's broken in more recent Emacs versions because eglot--report-to-flymake signature changed.
#+begin_src emacs-lisp
;; (defun my-filter-eglot-diagnostics (diags version)
;;     "Drop Pyright 'variable not accessed' notes from DIAGS."
;;     (list (seq-remove (lambda (d)
;;                         (and (eq (flymake-diagnostic-type d) 'eglot-note)
;;                              (s-starts-with? "Pyright:" (flymake-diagnostic-text d))
;;                              (s-ends-with? "is not accessed" (flymake-diagnostic-text d))))
;;                       (car diags))))

;; (advice-add 'eglot--report-to-flymake :filter-args #'my-filter-eglot-diagnostics)
#+end_src

*** COMMENT LSP                                                                :LSP:

#+begin_src emacs-lisp
(use-package eglot
  :config
  (add-to-list 'eglot-server-programs '((python-mode python-ts-mode) . ("ruff-lsp")))
  )
#+end_src

** COMMENT Format buffer with yapf
#+begin_src emacs-lisp
(use-package yapfify
  :ensure t
  :bind ( :map python-mode-map
          ("C-c f" . yapfify-buffer)
          :map python-ts-mode-map
          ("C-c f" . yapfify-buffer)
          ))
#+end_src

** COMMENT Dap-debug (Python)                                                :debug:
+You need to install ~ptvsd>=4.2~ in your virtual environment+

You need to install ~debugpy~ in your virtual environment

#+begin_src emacs-lisp
(use-package dap-python
  :defer t ;; We will explicitly load dap-python in python-mode-hook
  :custom
  (dap-python-debugger 'debugpy)
  )
#+end_src

** Dape Python - Debug Protocol                                              :debug:
Note: You need to install [[https://github.com/microsoft/debugpy][debugpy]] in your python environment. Then running =dape= should be enough.

** code-cells-mode
When code-cell-mode is active, several keybindings are added to the =C-c %= prefix. I have
added keybindings to some of the commands to easier keys.

NOTE: code-cells-mode will also define the cells as the outline. With this,
=consult-outline= becomes a nice way to quickly navigate between cells.

#+begin_src emacs-lisp
(use-package code-cells
  :ensure t
  :commands (code-cells-mode)
  :bind ( :map code-cells-mode-map
          ("C-M-p" . code-cells-backward-cell)
          ("C-M-n" . code-cells-forward-cell)
          ("M-S-<up>" . code-cells-move-cell-up)
          ("M-S-<down>" . code-cells-move-cell-down)
          )
  :hook ((python-base-mode . code-cells-mode))
  )
#+end_src

Standard keybindings
|---------+---------------------------------|
| =C-c % e= | code-cells-eval                 |
| =C-c % b= | code-cells-backward-cell        |
| =C-c % f= | code-cells-forward-cell         |
| =C-c % B= | code-cells-move-cell-up         |
| =C-c % F= | code-cells-move-cell-down       |
| =C-c % ;= | code-cells-comment-or-uncomment |
| =C-c % @= | code-cells-mark-cell            |
|---------+---------------------------------|
* Lisp
** General keybindings to run elisp code
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :bind (:map emacs-lisp-mode-map
              ;; Run all defined tests
              ([f9] . (lambda () (interactive) (ert t)))
              ;; Eval buffer and run all defined tests
              ([C-f9] . (lambda () (interactive) (eval-buffer) (ert t)))
              ;; delete all tests before evaluating the buffer and running all tests
              ([C-S-f9] . (lambda () (interactive) (ert-delete-all-tests) (eval-buffer) (ert t)))
              ;; Ask for which test to run
              ([M-f9] . ert)
              )
  :custom
  (flycheck-emacs-lisp-load-path 'inherit)
  :hook
  (emacs-lisp-mode  . (lambda () (setq fill-column 80))))
#+end_src
** Formatter for elisp code: elisp-autofmt
https://codeberg.org/ideasman42/emacs-elisp-autofmt

NOTE: You need to create an empty =.elisp-autofmt= file in order for =elisp-autofmt-mode= to
reformat the buffer on save.
#+begin_src emacs-lisp
(use-package elisp-autofmt
  :ensure t
  :commands (elisp-autofmt-mode elisp-autofmt-buffer)
  :hook (emacs-lisp-mode . elisp-autofmt-mode)
  )
#+end_src

** COMMENT ert buffer always at bottom
#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
               '("\\*ert\\*"
                 bottom-buffer-manager-display-action-function
                 ;; The following lines are the "action alist" passed to
                 ;; display-buffer. For now, I only want to remove the
                 ;; mode-line.
                 (window-height . 0.28)
                 ))
#+end_src

* Javascript and Typescript
Note: See configuration in https://github.com/llemaitre19/jtsx and set keybindings.

#+begin_src emacs-lisp
;; (use-package emacs
;;   :mode
;;   ("\\.ts$" . typescript-ts-mode)
;;   )

(use-package jtsx
:ensure t
:mode
;; ("\\.tsx" . tsx-ts-mode)
("\\.jsx$" . jtsx-jsx-mode)
("\\.tsx$" . jtsx-tsx-mode)
;; ("\\.ts$" . jtsx-typescript-mode)
)
#+end_src

* CSV
#+begin_src emacs-lisp
(use-package csv-mode
  :commands csv-mode
  :ensure t)
#+end_src

* JSON
Note: Run =npm i -g vscode-langservers-extracted= to install the json language server.

#+begin_src emacs-lisp
(use-package emacs
  :mode
  ("\\.json\\'" . json-ts-mode)
  ;; :hook
  ;; (json-mode . lsp)
  ;; :bind (
  ;;        :map json-mode-map
  ;;        ("M-I" . lsp-ui-imenu))
  )


;; (use-package json-navigator
;;   :ensure t
;;   :bind (:map json-mode-map
;;   ("C-c n n" . json-navigator-navigate-after-point)
;;   ("C-c n p" . json-navigator-navigate-after-point)
;;   ("C-c n r" . json-navigator-navigate-region)))
#+end_src

* Protobuf
#+begin_src emacs-lisp
(use-package protobuf-mode
  :ensure t
  :defer t
  )
#+end_src

* PCoIP log-file mode
#+begin_src emacs-lisp
;; You need to have the package already installed somewhere where Emacs can find it.
;; Currently this package is in a personal repository in the company bitbucket.
(use-package pcoip-log-mode
  :commands (pcoip-log-mode pcoip-view-log)
  :hook
  ;; (pcoip-log-mode . pcoip-view-log) ;; Switch to tabulated view -> This must come first to run last
  (pcoip-log-mode . view-mode)
  (pcoip-log-mode . read-only-mode)
  (pcoip-log-mode . auto-revert-tail-mode)
  (pcoip-log-mode . display-line-numbers-mode)
  ;; (pcoip-log-mode . (lambda ()
  ;;                     (add-to-list 'prettify-symbols-alist '("00000000-0000-0000-0000-000000000000" . "※"))
  ;;                     (prettify-symbols-mode)))
  :mode
  ("^/tmp/Teradici/.*/PCoIPClient/logs/" . pcoip-log-mode)
  )

#+end_src

#+begin_src emacs-lisp
;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
;; Copy content of a buffer visiting a file to a new buffer unrelated to the file
;; https://stackoverflow.com/questions/39330176/how-to-clone-duplicate-contents-of-file-visiting-buffer-in-emacs
;; (defun my-copy-buffer ()
;;   (interactive)
;;   (get-buffer-create "NEWBUF")
;;   (copy-to-buffer "NEWBUF" (point-min) (point-max)))


;; Links interessantes:
;; https://emacs.stackexchange.com/questions/46822/how-show-filter-only-text-lines-with-all-uppercase-chars
;; https://emacs.stackexchange.com/questions/58970/filter-the-content-read-from-file

#+end_src

TIPS:
- Use occur from isearch to filter the log
- If you want to modify the file to only show some lines use =M-x keep-lines something\|somethingelse=
  - You can use =flush-lines= to delete matching lines instead of keeping them
- Use ~highlight-regexp~ to highlight something in the log


Check =logview= package
- Acho que o formato do timetamp é ISO-8601 -> veja [[https://stackoverflow.com/questions/8405087/what-is-this-date-format-2011-08-12t201746-384z][aqui]]

Great blog post
https://writequit.org/articles/working-with-logs-in-emacs.html

#+begin_src emacs-lisp
;; (use-package logview
;;   :ensure t
;;   :config
;;   ;; (add-to-list 'logview-additional-level-mappings
;;   ;;            '(("PCoIP-Levels"
;;   ;;               (error "LVL:0")
;;   ;;               (warning "LVL:1")
;;   ;;               (information "LVL:2")
;;   ;;               (debug "LVL:3")
;;   ;;               (trace "LVL:4")
;;   ;;               (aliases)))
;;   ;;            )

;;   ;; (add-to-list 'logview-additional-timestamp-formats
;;   ;;              '(("PCoIP-Timestamp"
;;   ;;                 (regexp . "[0-9]+-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9]\.[0-9][0-9][0-9]Z")))
;;   ;;              )
;;   )
#+end_src

* COMMENT Latex                                                               :Latex:
** Some useful functions
#+begin_src emacs-lisp
(defun latex-skeleton-math-left-right ( left-symbol right-symbol)
  "Inserts \"\\left left-symbol \\right right-symbol\" and the cursor will be between \"\\left-symbol and \\right\"."
  (let ((region "") pos)
    (insert "\\left " left-symbol " ")
    (setq pos (point))
    (insert " " region " \\right " right-symbol)
    (goto-char pos))
  )

(defun latex-skeleton-math-left-right-symbol ()
  "Inserts \"\left left-symbol \right right-symbol\". If mark is active surround
  the active region with it."
  (interactive)
  (let (left-symbol right-symbol pos1 pos2 region)
    (setq left-symbol (read-from-minibuffer "Left Symbol: ")
          right-symbol (read-from-minibuffer "Right Symbol: "))

    (if (and transient-mark-mode
             mark-active)
        (progn (setq pos1 (region-beginning) pos2 (region-end))
               (setq region (buffer-substring pos1 pos2))
               (delete-region pos1 pos2)
               (goto-char pos1)
               (latex-skeleton-math-left-right left-symbol right-symbol)
               (insert region)
               )
      (latex-skeleton-math-left-right left-symbol right-symbol))
    ))


;; Function to run latex on the master file
(defun tex-all (arg)
  "Compile the latex file (or its master).

This will either run latex/build from spacemacs layer, or
TeX-command-master (from auctex) with a 'Latex' argument."
  (interactive "P")
  (if (fboundp 'latex/build)
      ;; If the function latex/build exist (it is defined in spacemacs LaTeX
      ;; layer) then we use it to compile our latex file
      (latex/build)
    ;; If the function latex/build does not exist then we use standard Auctex
    ;; functions and variables
    (let ((TeX-command-force "Latex"))
      ;;(TeX-save-document (TeX-master-file))
      (basic-save-buffer)
      (TeX-command-master arg)
      )
    )
  )

(defun my-latex-textcolor-red ()
  "Surround current region with \textcolor{red}{ } if mark is active or prompts for a text and insert \textcolor{red}{acronym}."
  (interactive)
  (let (pos1 pos2 text)
    (if (and transient-mark-mode
             mark-active)
        (my-latex-surround-textcolor-red (region-beginning) (region-end))
      (insert "\\textcolor{red}{" (read-from-minibuffer "Text in red: ") "}")
      )))

(defun my-latex-surround-textcolor-red (beg end)
  "Surround the region with \textcolor{red}{ }"
  (interactive "r")
  (save-restriction
    (narrow-to-region beg end)
    (goto-char (point-min))
    (insert "\\textcolor{red}{")
    (goto-char (point-max))
    (insert "}")))

;; Bound this to S-M-return
(defun dar/LaTeX-insert-item-inverse-behavior ()
  "Similar to LaTeX-insert-item, but reverse the behavior of the
        LaTeX-beamer-item-overlay-flag variable. That is if
        LaTeX-beamer-item-overlay-flag is t then LaTeX-insert-item will
        ask for an overlay specifications, while
        LaTeX-insert-item-inverse-behavior will not and vice-versa."
  (interactive)
  ;; We only want to change LaTeX-beamer-item-overlay-flag locally in the
  ;; dar/LaTeX-insert-item-inverse-behavior function
  (let (LaTeX-beamer-item-overlay-flag (not LaTeX-beamer-item-overlay-flag))
    (LaTeX-insert-item))
  )
#+end_src

** Auctex General config                                                    :auctex:
#+begin_src emacs-lisp
(use-package latex
  :demand t ;; Prevent the automatic deferred loading introduced by
            ;; constructs such as ':bind'. Auctex is "strange" and
            ;; deferring loading auctex will make opening a latex file
            ;; use the builtin latex-mode.
  :ensure  (:type git :host github :repo "emacsmirror/auctex"
            :pre-build (("./autogen.sh")
                        ("./configure" "--without-texmf-dir" "--with-lispdir=.")
                        ("make")))
  ;; :mode (("\\.tex\\'" . LaTeX-mode)
  ;;        ("\\.tex\\.erb\\'" . LaTeX-mode)
  ;;        ("\\.etx\\'" . LaTeX-mode))
  :custom
  (TeX-master nil)
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-save-query nil)

  ;; Extra indentation for lines beginning with an item.
  (LaTeX-item-indent 0)

  (LaTeX-beamer-item-overlay-flag nil)

  (TeX-view-program-selection
   '(
     ((output-dvi has-no-display-manager) "dvi2tty")
     ((output-dvi style-pstricks) "dvips and gv")
     (output-dvi "xdvi")
     (output-pdf "PDF Tools")
     (output-html "xdg-open")))
  :init
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

  ;; ;; We add this here to make sure we only load the auctex-latexmk
  ;; ;; package after the tex package has been loaded
  ;; (use-package auctex-latexmk
  ;;   :ensure t
  ;;   :config
  ;;   (auctex-latexmk-setup)
  ;;   )
  :config
  ;; Add the .synctex.gz file to the list of files to be cleared by the
  ;; "Clear All" command
  (add-to-list 'LaTeX-clean-output-suffixes "\\.synctex\\.gz")
  (add-to-list 'LaTeX-clean-output-suffixes "\\.loc")
  (add-to-list 'LaTeX-clean-output-suffixes "\\.soc")
  :bind (
         :map LaTeX-mode-map
         ;; ([f5] . latex-skeleton-acronym)
         ([C-f5] . latex-skeleton-math-left-right-symbol)
         ("<C-S-f5>" . my-latex-textcolor-red)
         ([f9] . tex-all)
         ;; Define C-f9 to the compile command. This is useful when you
         ;; work with latex and Makefiles
         ([C-f9] . compile)
         ([f10] . TeX-view)
         ([S-f10] . (lambda () (interactive) (ver-pdf-no-evince (TeX-master-file "pdf") (TeX-synctex-output-page))))
         ;; ("\C-\M-n" . outline-next-visible-heading)
         ;; ("\C-\M-p" . outline-previous-visible-heading)
         ("<S-M-return>" . dar/LaTeX-insert-item-inverse-behavior)
         ("C-M-l" . TeX-recenter-output-buffer)

         ;; :config
         ;; Enable key bindings (M-p and M-p) for navigation
         ;; (highlight-symbol-nav-mode)
         )

  :hook
  (TeX-mode . (lambda ()
                (setq TeX-command-extra-options "-shell-escape")))
  (LaTeX-mode . reftex-mode)
  (LaTeX-mode . TeX-source-correlate-mode)

  ;; ;; Since I never use plain tex, whenever Emacs tries to use plain
  ;; ;; tex mode (because I opened a .tex file, for instance) it will
  ;; ;; just change to latex mode
  ;; (plain-TeX-mode . LaTeX-mode)
  )

  (use-package indent-guide
  :ensure t
  :defer t
  :hook
  (LaTeX-mode . (lambda () (indent-guide-mode t)))
  )
#+end_src

** Set some faces
#+begin_src emacs-lisp
;; ;; Define a face for unimportant latex commands in math
;; ;; Taken from https://endlessparentheses.com/improving-latex-equations-with-font-lock.html
;; (defface endless/unimportant-latex-face
;;   '((t :height 0.5
;;        :inherit font-lock-comment-face))
;;   "Face used on less relevant math commands.")
;;
;; (font-lock-add-keywords
;;  'latex-mode
;;  `((,(rx (or (and "\\" (or (any ",.!;")
;;                            (and (or "left" "right"
;;                                     "big" "Big")
;;                                 symbol-end)))
;;              (any "_^")))
;;     0 'endless/unimportant-latex-face prepend))
;;  'end)



(defface darcamo/latex-math-vector-or-matrix-face
  '((t (:weight bold :inherit font-latex-math-face)))
  "Face used on vectors and matrices in latex math (\\vtX, \\mtX, etc)")

;; (defface darcamo/latex-math-blackboard-face
;;   '((t (:family "MathJax_AMS" :foreground "yellow" :background "red" :inherit font-latex-math-face)))
;;   "Face used on blackboard symbols in latex math (\\bbA, \\bbV, etc)")



;; Font para definir uma face para Sets: MathJax_AMS -> Note que ela só funciona
;; para letras maiúsculas

;; Font para caligraphic: Mathjax_Caligraphic -> Note que ela só funciona
;; para letras maiúsculas


;; This works, but it will not fontify it they \vt? and \mt? commands are
;; replaced by pretiffied versions
;; (font-lock-add-keywords 'latex-mode
;;                         '(("\\vt[A-Z]\\|\\mt[A-Z]" . 'darcamo/latex-math-vector-or-matrix-face)
;;                           ))

;; ;; Pegue de https://emacs.stackexchange.com/questions/34043/how-to-highlight-prettified-symbols/34059#34059
;;
;; This will fontify not only all \vt? and \mt? but also the prettified symbols
;; that replace them
(font-lock-add-keywords
 'latex-mode
 '(
   ("\\(\\\\vt[A-Z]\\|\\\\mt[A-Z]\\)" ;; Matcher
    ;; MATCH-HIGHLIGHT
    (0 ;; number of the subexpression of MATCHER to be highlighted
     (when (funcall prettify-symbols-compose-predicate
                      (match-beginning 0)
                      (match-end 0)
                      (match-string 0))
         'darcamo/latex-math-vector-or-matrix-face)
     ;; OVERRIDE argument of MATCH-HIGHLIGHT -> 'append' means existing
     ;; fontification is merged with the new
       append))
   )
 'append)

(font-lock-add-keywords
 'latex-mode
 '(
   ("\\(\\\\vtAlpha\\|\\\\vtBeta\\|\\\\vtTheta\\|\\\\vtEpsilon\\|\\\\vtSigma\\|\\\\vtDelta\\|\\\\vtTau\\|\\\\vtGamma\\|\\\\vtOne\\|\\\\vtZero\\)" ;; Matcher
    ;; MATCH-HIGHLIGHT
    (0 ;; number of the subexpression of MATCHER to be highlighted
     (when (funcall prettify-symbols-compose-predicate
                    (match-beginning 0)
                    (match-end 0)
                    (match-string 0))
       'darcamo/latex-math-vector-or-matrix-face)
     ;; OVERRIDE argument of MATCH-HIGHLIGHT -> 'append' means existing
     ;; fontification is merged with the new
     append))
   )
 'append)
#+end_src

** Set some pretty symbols
#+begin_src emacs-lisp
(defun darcamo/add-vector-and-matrix-prettify-symbol-letter (s)
  "This will call 'add-to-list' function to add a pretty symbol for '\\vtS and \\mtS'"
  (interactive "P")
  (add-to-list 'prettify-symbols-alist `(,(concat "\\vt" (capitalize s)) . ,(downcase s) ) )
  (add-to-list 'prettify-symbols-alist `(,(concat "\\mt" (capitalize s)) . ,(capitalize s) ) )
  )

(defun darcamo/add-blackboard-prettify-symbol-math-field (s)
  "This will call 'add-to-list' function to add a pretty symbol for '\\bbS"
  (interactive "P")
  ;; The name of most characters double-struck version is "MATHEMATICAL
  ;; DOUBLE-STRUCK CAPITAL X", where "X" is the character. However, for some
  ;; reason the unicode name for a few of them is in the form "DOUBLE-STRUCK
  ;; CAPITAL X". The characters with this shorter name version are: C H N P Q R Z
  (if (member s '("C" "H" "N" "P" "Q" "R" "Z") )
      (add-to-list 'prettify-symbols-alist `(,(concat "\\bb" s) . ,(char-to-string (char-from-name (concat "DOUBLE-STRUCK CAPITAL " s)))))
    (add-to-list 'prettify-symbols-alist `(,(concat "\\bb" s) . ,(char-to-string (char-from-name (concat "MATHEMATICAL DOUBLE-STRUCK CAPITAL " s)))))
    ))

(defun darcamo/add-vector-and-matrix-prettify-symbol-greek (name unicode-value)
  "This will call 'add-to-list' function to add a pretty symbol for '\\vtName' with 'unicode-value'"
  (interactive "P")
  (add-to-list 'prettify-symbols-alist `(,(concat "\\vt" (capitalize name)) . ,unicode-value) )
  )

;; A list
(defvar darcamo/latin-letters-list '("A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" ))


(setq LaTeX-mode-hook
      (function (lambda ()
                  (outline-minor-mode t)
                  (setq ispell-filter "tex")

                  ;; Set pretiffy symbols for \\vt? and \\mt? for all latin letters
                  (mapc 'darcamo/add-vector-and-matrix-prettify-symbol-letter darcamo/latin-letters-list)
                  (mapc 'darcamo/add-blackboard-prettify-symbol-math-field darcamo/latin-letters-list)

                  (darcamo/add-vector-and-matrix-prettify-symbol-greek "alpha" "α")
                  (darcamo/add-vector-and-matrix-prettify-symbol-greek "beta" "β")
                  (darcamo/add-vector-and-matrix-prettify-symbol-greek "theta" "θ")
                  (darcamo/add-vector-and-matrix-prettify-symbol-greek "epsilon" "ε")
                  (darcamo/add-vector-and-matrix-prettify-symbol-greek "sigma" "σ")
                  (darcamo/add-vector-and-matrix-prettify-symbol-greek "delta" "δ")
                  (darcamo/add-vector-and-matrix-prettify-symbol-greek "tau" "τ")
                  (darcamo/add-vector-and-matrix-prettify-symbol-greek "gamma" "γ")
                  (darcamo/add-vector-and-matrix-prettify-symbol-greek "one" "1")
                  (darcamo/add-vector-and-matrix-prettify-symbol-greek "zero" "0")

                  (setq prettify-symbols-unprettify-at-point t)
                  (prettify-symbols-mode)
                  ))
      )
#+end_src

** LSP for Latex                                                               :LSP:
#+begin_src emacs-lisp
(use-package lsp-latex
  ;; NOTE: You need to install texlab for LSP to work with latex
  :after latex
  :ensure t
  :hook (latex-mode . lsp)
  :hook (LaTeX-mode . lsp)
  :bind (
         :map LaTeX-mode-map
         ;; By default C-M-i is bound to TeX-complete-symbol, but
         ;; since we are using LSP let's change to complete-symbol to
         ;; use the completion from LSP
         ("C-M-i" . complete-symbol))
  )
#+end_src

** TODO Tectonic
Investigate the use of lsp and latex with the [[https://github.com/tectonic-typesetting/tectonic][Tectonic]] engine
** Beamer                                                                   :Beamer:
#+begin_src emacs-lisp
(define-derived-mode beamer-mode
  LaTeX-mode "Beamer-Mode" "A derived mode from LaTeX-mode for latex buffers with beamer presentations."
  (setq outline-regexp "[   ]*\\\\\\(appendix\\|documentstyle\\|documentclass\\|part\\|chapter\\|section\\|subsection\\|subsubsection\\|paragraph\\|subparagraph\\|begin{frame}\\|end{frame}\\)\\|^[^%\n]*\\\\begin *{document}\\|^[^%\n]*\\\\end *{document}")

  (setq reftex-section-levels
        '(("section" . 1) ("subsection" . 2) ("frametitle" . 3)))

  ;; (TeX-PDF-mode 1)  ;; Turn on PDF mode.

  (setq LaTeX-beamer-item-overlay-flag nil)
  (reftex-mode 1)
  (reftex-reset-mode)
  )


;; Add some beamer commands as font-lock keywords
;; (font-lock-add-keywords 'tikz-mode
;;                         '(("\\(\\\\\\(frametitle\\|framesubtitle\\)\\){" 1 font-lock-warning-face t)))

;; A file called presentations.tex is automatically in beamer-mode
(add-to-list 'auto-mode-alist '("presentation\\.tex" . beamer-mode))

(define-skeleton beamer-skeleton
  "Inserts a Latex beamer skeleton into current buffer.
This only makes sense for empty buffers."
  nil
  "\\documentclass{beamer}
% \\documentclass[draft,handout]{beamer}
% \\documentclass[handout, notes=show/hide/only]{beamer}
% \\usepackage[orientation=landscape,size=custom,width=16,height=9,scale=0.5,debug]{beamerposter}

\\mode<presentation>
{
  \\usetheme{AnnArbor}
%   Possible Themes:
%   \"AnnArbor\" \"Antibes\" \"Bergen\" \"Berkeley\" \"Berlin\" \"Boadilla\"
%   \"boxes\" \"CambridgeUS\" \"Copenhagen\" \"Darmstadt\" \"Dresden\"
%   \"Frankfurt\" \"Goettingen\" \"Hannover\" \"Ilmenau\" \"JuanLesPins\"
%   \"Luebeck\" \"Madrid\" \"Malmoe\" \"Marburg\" \"Montpellier\" \"PaloAlto\"
%   \"Pittsburgh\" \"Rochester\" \"Singapore\" \"Szeged\" \"Warsaw\"
%   \"default\"
%
%   Best Ones:
%   AnnArbor or CambridgeUS, Dresden or Frankfurt or Singapore, Goettingen or Hannover or Marburg, JuanLesPins, Madrid, PaloAlto, Warsaw

  \\setbeamercovered{transparent} % How uncovered text showld appear. Possible values are: invisible,
                                 % transparent, dynamic, highly dynamic, still covered, still
                                 % covered, again covered.
%   \\usecolortheme{wolverine}
%   \\usefonttheme{serif}
%   \\useinnertheme{circles}
%   \\useoutertheme{shadow}


\\usepackage[english]{babel}
%\\usepackage[latin1]{inputenc} % Use this if the file is encoded with windows encoding
\\usepackage[utf8]{inputenc} % Use this if the file is encoded with utf-8
\\usepackage{times}
\\usepackage[T1]{fontenc}
\\usepackage{amsmath} % Part of AMS-LaTeX
% One of the good things of the amsmath package is the math enviroments matrix, pmatrix, bmatrix, Bmatrix, vmatrix and Vmatrix
\\usepackage{graphicx}
\\usepackage{pgf}
%\\usepackage{tikz} % Create graphics in Latex
%\\usepackage{listings} % Typeset source code for many languages

% Pegue em http://www.guidodiepen.nl/2009/07/creating-latex-beamer-handouts-with-notes/
%\\usepackage{handoutWithNotes}
%\\pgfpagesuselayout{4 on 1 with notes}[a4paper,border shrink=5mm]

% \\setbeameroption{show notes}
% \\setbeameroption{show only notes}
}

\\title"
  (setq v1 (skeleton-read "Short Title for the Presentation: " "[short title]"))" % [short title] (optional, use only with long paper titles)" \n
  "{"(skeleton-read "Title for the Presentation: ")"}" \n \n
  _ "%\\subtitle{Include Only If Paper Has a Subtitle} % (optional)" \n \n
  "\\author%[Author, Another] % (Optional, use only with lots of authors)" \n
  "{" (skeleton-read "Author(s) - Use \\and to separate: " "Darlan Cavalcante Moreira") "}" \n
  "%{F.~Author\\inst{1} \\and S.~Another\\inst{2}}" \n
  "% - Give the names in the same order as the appear in the paper." \n
  "% - Use the \\inst{?} command only if the authors have different affiliation." \n \n
  "\\institute%[Universities of Somewhere and Elsewhere] % (Short version: optional, but mostly needed)" \n
  "{" (skeleton-read "Instituto: " "Universidade Federal do Ceará") "}" \n
  "% {
%   \\inst{1}
%   Department of Computer Science\\\\
%   University of Somewhere
%   \\and
%   \\inst{2}
%   Department of Theoretical Philosophy\\\\
%   University of Elsewhere}
  % - Use the \\inst command only if there are several affiliations.
  % - Keep it simple, no one is interested in your street address." \n
  "\\date{" (skeleton-read "Date: " "\\today") "}" \n
  "%\\date[CFP 2003] % (optional, should be abbreviation of conference name)
   %{Conference on Fabulous Presentations, 2003}
   % - Either use conference name or its abbreviation.
   % - Not really informative to the audience, more for people (including
   %   yourself) who are reading the slides online" \n \n \n
  "% xxxxxxxxxx For \"PDF information catalog\", can be left out xxxxxxxxxxxxxxxxxxxx
\\subject{Subject of the presentation}
\\keywords{keyword1, kwyword2}

% If you have a file called \"university-logo-filename.xxx\", where xxx
% is a graphic format that can be processed by latex or pdflatex,
% resp., then you can add a logo as follows:

% \\pgfdeclareimage[height=0.5cm]{university-logo}{university-logo-filename}
% \\logo{\\pgfuseimage{university-logo}}

% this shows the outline at the beginning of every section,
% highlighting the current section
% \\AtBeginSection[]
% {
%   \\begin{frame}<beamer>{}
%     \\frametitle{Outline}
%     \\tableofcontents[currentsection]
%   \\end{frame}
% }


% If you wish to uncover everything in a step-wise fashion, uncomment
% the following command:
% \\beamerdefaultoverlayspecification{<+->}
% xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" \n \n \n
  "% xxxxxxxxxxxxxxx Presentation Structure xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
% Structuring a talk is a difficult task and the following structure
% may not be suitable. Here are some rules that apply for this
% solution:

% - Exactly two or three sections (other than the summary).
% - At *most* three subsections per section.
% - Talk about 30s to 2min per frame. So there should be between about
%   15 and 30 frames, all told.

% - A conference audience is likely to know very little of what you
%   are going to talk about. So *simplify*!
% - In a 20min talk, getting the main ideas across is hard
%   enough. Leave out details, even if it means being less precise than
%   you think necessary.
% - If you omit details that are vital to the proof/implementation,
%   just say so once. Everybody will be happy with that.
% xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" \n \n \n
  "% xxxxxxxxxxxxxxx Frame Options xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
% [plain] -> Use the \"plain\" option when you want a frame with just a picture or table without anything-else
% [fragile] -> Use the \"fragile\" option when the verbatim environment or the \\verb command is used inside the frame
% You must also use the fragile option if you use the lstlisting environment since it is similar to verbatim" \n \n \n
  "% xxxxxxxxxxxxxxx Useful Tips xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
% Blocks are another nice way to make highlighted blocks of text (or anything).
%
% \\begin{block}{Simple block}
%   bla bla bla
% \\end{block}
%
% \\begin{exampleblock}{Example block}
%   bla bla bla
% \\end{exampleblock}
%
% \\begin{alertblock}{}
%   bla bla bla
% \\end{alertblock}
%
% Columns are for vertically organizing text.
% The beamer screen is 128 mm $\\times$ 96 mm.
% Two columns of 6cm appears to work well. Remember to make
% allowance for margins around the stuff inside a column. Three
% columns of 4cm for figures may work as well.
%   \\begin{columns}[t] % try also others different of [t]
%     \\begin{column}{6cm}
%       Stuff inside the first column
%     \\end{column}
%     \\begin{column}{6cm}
%       Stuff inside the second column
%     \\end{column}
%   \\end{columns}
%
% You can use externally launched movies with
% \\href{run:default.avi}{click here to open the movie}
%
% Besides using overlays you can also emphasize using
% \\item<1- | alert@1>
% \\item<2- | alert@2> ...
%
% Overlays can also be used with blocks
% \\begin{block}{Some block}<1->
%   bla bla bla
% \\end{block}
% \\begin{block}{Some other block}<2->
%   bla bla bla
% \\end{bloc}
%
% Ofcourse overlays can also be used with images
% \\pgfuseimage{imagem1}<1>
% \\pgfuseimage{imagem2}<2>
% \\pgfuseimage{imagem3}<3>
%
% Example using columns:
% \\begin{columns}[t]
%   \\begin{column}{5cm}
%     \\pgfdeclareimage[width=5cm]{automato1}{automato1}
%     \\pgfuseimage{automato1}<1>
%     \\pgfdeclareimage[width=5cm]{automato2}{automato2}
%     \\pgfuseimage{automato2}<2>
%     \\pgfdeclareimage[width=5cm]{automato3}{automato3}
%     \\pgfuseimage{automato3}<3>
%     \\pgfdeclareimage[width=5cm]{automato4}{automato4}
%     \\pgfuseimage{automato4}<4>
%   \\end{column}
%   \\begin{column}{5cm}
%     \\begin{itemize}
%     \\item <1- | alert@1> Reconhecimento inicia no estado $q_1$
%     \\item <2- | alert@2> Transição para estado $q_2$
%     \\item <3- | alert@3> L^e $0$ e fica no estado $q_2$
%     \\item <4- | alert@4> Transição para o estado final $q_3$
%     \\end{itemize}
%     \\[\\xymatrix{
%      *++[o][F-]{q_1} \\ar@(ul,ul)[] \\ar[r]^{1}
%      \\ar[d]^{0} & *++[o][F=]{q_3} \\\\
%      *++[o][F-]{q_2} \\ar[ur]_{1} \\ar@(dl,d)[]_{0} }\\]
%   \\end{column}
% \\end{columns}
% xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" \n \n \n
  "\\begin{document}" \n \n
  "% % xxxxxxxxxxxxxxxxxxxx Some tikz options xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
% % For every picture that defines or uses external nodes, you'll have to
% % apply the 'remember picture' style. To avoid some typing, we'll apply
% % the style to all pictures.
% \\tikzstyle{every picture}+=[remember picture]

% % By default all math in TikZ nodes are set in inline mode. Change this to
% % displaystyle so that we don't get small fractions.
% \\everymath{\\displaystyle}
% % xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" \n \n \n
  "% \\part{Part 1}

% beamer makes the titlepage from info above: author, date, title, etc.
\\begin{frame}
  \\titlepage
\\end{frame}

% beamer makes the ToC from sections and subsections below...
\\begin{frame}{Outline}
%  \\frametitle{Outline} % Frame Title can be an option of the frame environment or called explicitaly with the \\frametitle command
  \\tableofcontents%[part=1]
% You might wish to add the option [pausesections]
% There are also options such as currentsection, currentsubsection, etc.
\\end{frame}

% \\begin{frame}
% \\frametitle{Outline}
% \\tableofcontents[part=2]
% \\end{frame}" \n \n \n
  "\\section{Motivation}

\\subsection{The Basic Problem That We Studied}

\\begin{frame}{Make Titles Informative.}{Subtitles are optional.} % Use Uppercase Letters
  % - A title should summarize the slide in an understandable fashion
  % for anyone how does not follow everything on the slide itself.
  % Frame transition effects
  \\transboxin<1>
%   \\transblindshorizontal
%   \\transblindsvertical
%   \\transboxin
%   \\transboxout
%   \\transdissolve
%   \\transglitter
%   \\transsplithorizontalin
%   \\transsplithorizontalout
%   \\transsplitverticalin
%   \\transsplitverticalout
%   \\transwipe

  \\begin{itemize}
  \\item Use \\texttt{itemize} a lot.
  \\item Use very short sentences or short phrases.
  \\item ação
  \\end{itemize}
\\end{frame}" \n \n \n
  "\\begin{frame}{Make Titles Informative.}%[options] % A good option when using figures or tables is the \"plain\" option

  You can create overlays\\dots
  \\begin{itemize}
  \\item using the \\texttt{pause} command:
    \\begin{itemize}
    \\item
      First item.
      \\pause
    \\item
      Second item.
    \\end{itemize}
  \\item
    using overlay specifications:
    \\begin{itemize}
    \\item<3->
      First item.
    \\item<4->
      Second item.
      \\note[item]{Uma nota}<1>
    \\end{itemize}
  \\item
    using the general \\texttt{uncover} command:
    \\begin{itemize}
      \\uncover<5->{\\item
        First item.}
      \\uncover<6->{\\item
        Second item.}
    \\end{itemize}
  \\end{itemize}
  \\note[item]{Outra nota}<1> % Without the overlay specification the note will be added in all slides of a frame. This usually is not what you want.
\\end{frame}" \n \n \n
  "\\subsection{Previous Work}

\\begin{frame}{Make Titles Informative.}
\\end{frame}

\\begin{frame}{Make Titles Informative.}
\\end{frame}" \n \n \n
  "\\section{Our Results/Contribution}

\\subsection{Main Results}

\\begin{frame}{Make Titles Informative.}
\\end{frame}

\\begin{frame}{Make Titles Informative.}
\\end{frame}

\\begin{frame}{Make Titles Informative.}
\\end{frame}


\\subsection{Basic Ideas for Proofs/Implementation}

\\begin{frame}{Make Titles Informative.}
\\end{frame}

\\begin{frame}{Make Titles Informative.}
\\end{frame}

\\begin{frame}{Make Titles Informative.}
\\end{frame}" \n \n \n
  "\\section*{Summary}

\\begin{frame}{Summary}

  % Keep the summary *very short*.
  \\begin{itemize}
  \\item
    The \\alert{first main message} of your talk in one or two lines.
  \\item
    The \\alert{second main message} of your talk in one or two lines.
  \\item
    Perhaps a \\alert{third message}, but not more than that.
  \\end{itemize}

  % The following outlook is optional.
  \\vskip0pt plus.5fill
  \\begin{itemize}
  \\item
    Outlook
    \\begin{itemize}
    \\item
      Something you haven't solved.
    \\item
      Something else you haven't solved.
    \\end{itemize}
  \\end{itemize}
\\end{frame}" \n \n \n
  "% All of the following is optional and typically not needed.
\\appendix
\\section<presentation>*{\\appendixname}
\\subsection<presentation>*{For Further Reading}

\\begin{frame}[allowframebreaks]
  \\frametitle<presentation>{For Further Reading}

  \\begin{thebibliography}{10}

    \\beamertemplatebookbibitems
    % Start with overview books.

  \\bibitem{Author1990}
    A.~Author.
    \\newblock {\\em Handbook of Everything}.
    \\newblock Some Press, 1990.

    \\beamertemplatearticlebibitems
    % Followed by interesting articles. Keep the list short.

  \\bibitem{Someone2000}
    S.~Someone.
    \\newblock On this and that.
    \\newblock {\\em Journal of This and That}, 2(1):50--100,
    2000.
  \\end{thebibliography}
\\end{frame}

\\end{document}" \n \n
  (beamer-mode)
  )
#+end_src

* Preview Latex (org-mode and programming modes)                      :Latex:Preview:
Layer darcamo-preview-latex

#+begin_src emacs-lisp
(use-package org
  :defer t
  :init
  ;; Muda a escala das fórmulas de latex geradas para o preview-latex e para o exporte para html
  (setq org-format-latex-options (quote (:foreground default :background default :scale 1.7 :html-foreground "Black" :html-background "Transparent" :html-scale 1.7 :matchers ("begin" "$1" "$" "$$" "\\(" "\\["))))

  ;; Change the default latex packages
  ;; (setq org-latex-default-packages-alist
  ;;       '(("AUTO" "inputenc" t)
  ;;         ("T1" "fontenc" t)
  ;;         ;; ("" "fixltx2e" nil)  ;; This package is not necessary anymore
  ;;         ("" "graphicx" t)
  ;;         ("" "longtable" nil)
  ;;         ("" "float" nil)
  ;;         ("" "wrapfig" nil)
  ;;         ("" "soul" t)
  ;;         ("" "textcomp" t)
  ;;         ("" "marvosym" t)
  ;;         ;; ("" "wasysym" t) ;; Removed, since it conflicts with something in
  ;;         ;;                  ;; my MathDefinitions package.
  ;;         ("" "MathDefinitions" t)  ;; My custom latex package. Latex must be
  ;;         ;; able to find this package.
  ;;         ("" "latexsym" t)
  ;;         ("" "amssymb" t)
  ;;         ("" "hyperref" nil)
  ;;         ("" "tikz" nil)  ;; If tikz is enabled in latex fragments the
  ;;         ;; equations will be rendered in black even when
  ;;         ;; the Emacs background is dark
  ;;         "\\tolerance=1000"))

  (add-to-list 'org-latex-default-packages-alist '("" "MathDefinitions" t) t)
  (add-to-list 'org-latex-default-packages-alist '("" "tikz" nil) t)

  ;; Faz com que o commando \vec seja conhecido para o preview latex
  (setq org-preview-latex-image-directory "~/tmp/ltxpng/")

  :bind
  (:map prog-mode-map
        ([C-f5] . org-latex-preview)
        :map org-mode-map
        ([C-f5] . org-latex-preview)
        )
  )


;; (use-package org-fragtog
;;   :ensure t
;;   :commands (org-fragtog-mode)
;;   :hook (org-mode . org-fragtog-mode)
;;   :hook (python-mode . org-fragtog-mode)
;;   :hook (c-mode-common . org-fragtog-mode)
;;   )
#+end_src

* TODO References: Bibtex, bibtex-completions, org-ref [0/3]             :References:
Veja a nota [[file:~/org/org-roam-notes/20210305171627-leituras_de_papers_e_outros_documentos.org][Leituras de papers e outros documentos]]

** Set my default bibliograph folder and files (used by native org-cite)
Set my default bibliography.
You can use ~C-c C-x @~ to insert a citation (~org-cite-insert~ command).
#+begin_src emacs-lisp
(use-package f
  :ensure t
  ;; Base folder for my global bib files. There is also a pdfs folder
  ;; inside with PDF files for the entries in the bib files.
  :config
  (setq my-references-folder "~/Dropbox/org/references")
  (setq org-cite-global-bibliography (f-glob "article*\.bib" my-references-folder))
  )
#+end_src

** Bibtex                                                                   :Bibtex:
#+begin_src emacs-lisp
(use-package bibtex
  :defer t
  :custom
  (bibtex-comment-start "%")
  (bibtex-entry-format '(opts-or-alts required-fields numerical-fields whitespace realign last-comma unify-case braces sort-fields))
  (bibtex-comma-after-last-field t)
  :config
  (bibtex-set-dialect 'biblatex)
  :hook
  (bibtex-mode . (lambda () (darcamo/set-up-outline-minor-mode "@")))
  )
#+end_src

** COMMENT Biblio
An extensible Emacs package for browsing and fetching references.

Quick start: =M-x biblio-lookup=. Each source can also be accessed independently:

- =M-x crossref-lookup= to query CrossRef
- =M-x arxiv-lookup= to query arXiv
- =M-x dblp-lookup= to query DBLP
- =M-x hal-lookup= to query HAL
- =M-x ieee-lookup= to query IEEE Xplore
- =M-x doi-insert= to insert a BibTeX record by DOI
- =M-x dissemin-lookup= to show information about the open access status of a particular DOI

These commands work together: for example, =crossref-lookup= displays a list of results in
=biblio-selection-mode=. In that mode, use:

- =RET= to visit the corresponding web page
- =c= or =M-w= to copy the BibTeX record of the current entry
- =i= or =C-y= to insert the BibTeX record of the current entry
- =x= to =run= an extended action, such as fetching a Dissemin record
- =C= and =I= do the same as c and i, but additionally close the search window.


#+begin_src emacs-lisp
(use-package biblio
  :ensure t
  :commands (biblio-lookup biblio-hal-lookup biblio-dblp-lookup
             biblio-ieee-lookup biblio-arxiv-lookup
             biblio-crossref-lookup biblio-dissemin-lookup)
  )
#+end_src

** TODO Bibtex-completions                                             :Investigate:
Used by org-roam-bibtex

** TODO Org-ref or citar [0/1]                :AllTheIcons:Citar:Investigate:OrgRef:
NOTE:
- citar uses two caches to speed up library display; one for the global bibliography, and
  another for local files specific to a buffer. This is great for performance, but means
  the data can become stale if you modify it.
- The ~citar-refresh~ command will reload the caches, and you can call this manually. You
  can also call any of the citar commands with a prefix argument: =C-u M-x
  citar-insert-key.=

Note that =citar= was previously called =bibtex-actions=.

Some useful keybindings
|---------------+----------------------------------------------------------|
| C-c b         | Insert a citation                                        |
| C-d           | citar-org-delete-citation                                |
| C-k           | citar-org-kill-citation -> put citation in the killring   |
| C-M-f / C-M-b | Go forward/backward a citation (with multiple citations) |
| S-<left>      | oc-citar-shift-reference-left                            |
| S-<right>     | oc-citar-shift-reference-right                           |
| M-p           | oc-citar-update-pre-suffix                               |
|---------------+----------------------------------------------------------|
| <mouse-1>     | citar-dwim                                               |
| <mouse-3>     | embark-act                                               |
|---------------+----------------------------------------------------------|

#+begin_src emacs-lisp
(use-package citar
  :ensure t
  :no-require
  :custom
  ;; Use citar when the org-cite-insert command is called
  (org-cite-insert-processor 'citar)
  ;; Use citar to handle "clicking on a reference"
  (org-cite-follow-processor 'citar)
  ;; Hangle activating a citation with citar -> besides regular
  ;; org-cite activation, such as seting the face, this will also
  ;; enable a keymap to manipulate the reference(s) at point.
  (org-cite-activate-processor 'citar)

  ;; Make citar point to the same bibliography as org-cite
  (citar-bibliography org-cite-global-bibliography)

  ;; Tell citar the folders with my PDF files for entries in my bib
  ;; files. The names of the PDFs are "<KEY>.pdf", where "<KEY>" is
  ;; the bibtex key of the entry.
  (citar-library-paths `(,(concat my-references-folder "/pdfs")))

  (citar-select-multiple t)

  ;; ;; Set default action when clicking on an entry (as well as when
  ;; ;; using embark-dwim) to open the entry in the bib file
  ;; (citar-default-action 'citar-open-entry)

  ;; use all-the-icons to indicate entries with 'file', 'note' and 'link'.
  (citar-symbols
   `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
     (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
     (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
  (citar-symbol-separator " ")


  ;; optional: org-cite-insert is also bound to C-c C-x C-@
  :bind
  (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))
#+end_src

*** TODO Configure note support in citar (integrated with org-roam)
https://github.com/bdarcus/citar#notes

** TODO Org-noter                                             :Investigate:OrgNoter:
* Mail with mu4e                                                          :Mail:mu4e:
Note: =C-c C-p= in message mode takes a screenshot and attach to the e-mail

Emacs now supports oauth2 authentication. See
https://www.reddit.com/r/emacs/comments/jreehr/imap_and_smtp_oauth2_configuration_for_office_365/
** Make mu4e start in a dedicated tab which is closed and mu4e exits
#+begin_src emacs-lisp
;; mu4e uses switch-to-buffer internally and it is only affected by
;; display-buffer-alist if switch-to-buffer-obey-display-actions is
;; set to t
(setq switch-to-buffer-obey-display-actions t)

(add-to-list 'display-buffer-alist
             '("mu4e"
               display-buffer-in-tab
               (tab-name . "E-Mail")
               ))

(defun mu4e-close-tab ()
  (let ((tab-name "E-Mail"))
    ;; Only if there is a tab for e-mail and the killed buffer is
    ;; mu4e-main-buffer-name
    (when (and
           (tab-bar--tab-index-by-name tab-name)
           (equal (buffer-name) mu4e-main-buffer-name))
      (tab-bar-select-tab-by-name tab-name)  ;; Switch to the tab ...
      (tab-bar-close-tab)  ;; and kill it
      )))

(add-hook 'kill-buffer-hook    #'mu4e-close-tab)


;; Advice mu4e command to start mu4e in an "E-Mail" tab
;; (advice-add
;;  'mu4e    ; function to be advised
;;  :before            ; advice runs first
;;  (lambda (&rest r)
;;    (let ((tab-name "E-Mail"))
;;      (if (tab-bar--tab-index-by-name tab-name)
;;          (tab-bar-select-tab-by-name tab-name)  ;; Switch to the tab
;;        ;; If the tab was not found, create a new one with the proper name
;;        (tab-new -100)
;;        (tab-rename tab-name)
;;        ))))

;; ;; Advice mu4e-quit command to close the "E-mail" tab
;; (advice-add
;;  'mu4e-quit
;;  :after
;;  (lambda ()
;;    (let ((tab-name "E-Mail"))
;;      (when (tab-bar--tab-index-by-name tab-name)
;;        (tab-bar-select-tab-by-name tab-name)  ;; Switch to the tab ...
;;        (tab-bar-close-tab)  ;; and kill it
;;        ))))
#+end_src

** Common email config and some helper functions                               :epa:
#+begin_src emacs-lisp
;; The my-define-mail-variables function just define some variables
;; that are used in the rest of the mu4e configuration
(autoload 'my-define-mail-variables (concat user-emacs-directory "common-mail-config.el.gpg"))
#+end_src

** Mail configuration not specific to mu4e
#+begin_src emacs-lisp
(use-package message
  :after mu4e
  :custom
  (message-send-mail-function 'smtpmail-send-it)
  (message-sendmail-f-is-evil t)
  )

(use-package smtpmail
  :after mu4e
  :custom
  ;; (message-send-mail-function 'smtpmail-send-it)
  ;; (message-sendmail-f-is-evil t)
  (smtpmail-smtp-server "smtp.gmail.com")
  (smtpmail-smtp-service 465)
  (smtpmail-stream-type 'ssl)
  ;; force smtpmail to send credentials over on the first attempt when
  ;; communicating with the SMTP server(s)
  (smtpmail-servers-requiring-authorization "gmail")
  :config
  (my-define-mail-variables)

  (setq smtpmail-smtp-user my-personal-smtpmail-smtp-user)
  (setq user-mail-address my-personal-user-mail-address)
  (setq user-full-name my-user-full-name)
  )
#+end_src

** Configuration
#+begin_src emacs-lisp
(use-package mu4e
  ;; :elpaca nil  ;; mu4e is not found in melpa -> you need to install the "mu" system package
  :commands (mu4e mu4e-user-agent mu4e~compose-mail)
  :custom
  ;; Appearance
  ;; Hide the "Indexing..." messages (they interfere with the minibuffer)
  (mu4e-hide-index-messages t)

  ;; Determines what mu4e does with sent messages. Since we use gmail, which
  ;; already stores the sent messages, we set this to 'delete so that we do
  ;; not get a duplicated message
  (mu4e-sent-messages-behavior 'delete)

  ;; start with the first (default) context;
  ;; default is to ask-if-none (ask when there's no context yet, and none match)
  (mu4e-context-policy 'pick-first)

  ;; compose with the current context if no context matches;
  ;; default is to ask
  ;; (mu4e-compose-context-policy nil)

  ;; allow for updating mail using 'U' in the main view:
  (mu4e-get-mail-command "mbsync all")

  ;;rename files when moving
  ;;NEEDED FOR MBSYNC
  (mu4e-change-filenames-when-moving t)

  ;; Don't change to next message when scrolling at the end of a message
  (mu4e-view-scroll-to-next nil)

  ;; Whether to base the body display on the html-version.
  (mu4e-view-prefer-html t)

  ;; Bookmarks -> access with 'j' + letter
  (mu4e-maildir-shortcuts
   '(("/gmail/Inbox"               . ?i)
     ("/gmail/[Gmail].E-mails enviados"   . ?e)
     ("/gmail/[Gmail].Lixeira"       . ?l)
     ;; ("/gmail/[Gmail].Todos os e-mails"    . ?t)
     ("/gtel/Inbox"               . ?I)
     ("/gtel/[Gmail].E-mails enviados"   . ?E)
     ("/gtel/[Gmail].Lixeira"       . ?L)
     ;; ("/gtel/[Gmail].Todos os e-mails"    . ?T)
     ;; ("/gtel/ResearchGate"       . ?r)
     ("/gtel/Call of Papers"       . ?c)
     ;; ("/gmail/Stanford"       . ?s)
     ))

  (mu4e-user-mailing-lists '(
                             ("todos.gtel.ufc.br" . "GTEL-Todos")
                             ("numpy-discussion.python.org" . "Numpy")
                             ("numpy-discussion.scipy.org" . "Numpy")
                             ("ipython-dev.python.org" . "IPython")
                             ("ipython-dev.scipy.org" . "IPython")
                             ("dea-ufv.listas.ufv.br" . "Graça Freitas")
                             )
                           )

  ;; Remove unwanted contacts
  (mu4e-contact-process-function 'my-mu4e-contact-processor)

  :config
  (my-define-mail-variables)

  ;; Appearance -> There are not "customizable" variables and that is
  ;; why they are here instead of in the ":custom" section
  (setq mu4e-use-fancy-chars t
        mu4e-headers-draft-mark     '("D" . "⚒")  ; draft
        mu4e-headers-seen-mark      '("S" . "🗹")  ; seen
        mu4e-headers-unseen-mark    '("u" . "☐")  ; unseen
        mu4e-headers-unread-mark    '("u" . "☐")  ; unread
        mu4e-headers-flagged-mark   '("F" .  "🚩") ; flagged ⚵ ⚑
        mu4e-headers-new-mark       '("N" .  "📫") ; new
        mu4e-headers-replied-mark   '("R" . "↵")  ; replied
        mu4e-headers-passed-mark    '("P" . "⇉")  ; passed
        mu4e-headers-encrypted-mark '("x" . "🔑")  ; encrypted ⚷
        mu4e-headers-signed-mark    '("s" . "✍") ; signed
        mu4e-headers-trashed-mark   '("T" . "🗑") ; Trashed
        mu4e-headers-attach-mark    '("a" . "📎")) ;; attach ⚓

  ;; Note that setting this variable is here, instead of the ":custom"
  ;; section because it needs to call the make-mu4e-context function,
  ;; which is provided by mu4e
  (setq mu4e-contexts
        `( ,(make-mu4e-context
             :name "Pessoal"
             :enter-func (lambda () (mu4e-message "Entering Pessoal context"))
             :leave-func (lambda () (mu4e-message "Leaving Pessoal context"))
             ;; we match based on the contact-fields of the message
             :match-func (lambda (msg)
                           (when msg
                             (mu4e-message-contact-field-matches msg
                                                                 '(:to :cc :bcc) my-personal-user-mail-address)))
             :vars `((user-mail-address  . ,my-personal-user-mail-address)
                     (user-full-name     . ,my-user-full-name)
                     (smtpmail-smtp-user . ,my-personal-smtpmail-smtp-user)
                     (mu4e-sent-folder   . "/gmail/[Gmail].E-mails enviados")
                     (mu4e-drafts-folder . "/gmail/[Gmail].Rascunhos")
                     (mu4e-trash-folder  . "/gmail/[Gmail].Lixeira")
                     (message-signature-file . "~/.signature")
                     ))
           ,(make-mu4e-context
             :name "Trabalho"
             :enter-func (lambda () (mu4e-message "Switch to the Work context"))
             :leave-func (lambda () (mu4e-message "Leaving Work context"))
             :match-func (lambda (msg)
                           (when msg
                             (mu4e-message-contact-field-matches msg
                                                                 '(:to :cc :bcc) my-work-user-mail-address)))
             :vars `((user-mail-address  . ,my-work-user-mail-address)
                     (user-full-name     . ,my-user-full-name)
                     (smtpmail-smtp-user . ,my-work-smtpmail-smtp-user)
                     (mu4e-sent-folder   . "/gtel/[Gmail].E-mails enviados")
                     (mu4e-drafts-folder . "/gtel/[Gmail].Rascunhos")
                     (mu4e-trash-folder  . "/gtel/[Gmail].Lixeira")
                     (message-signature-file . "~/.signature_gtel")
                     ))
           ))

  ;; Set the mail-user-agent to the mu4e-user-agent.
  ;; With this if you type the usual keybinding "C-x m" emacs will use the
  ;; mu4e:compose mode
  (if (boundp 'mail-user-agent)
      (setq mail-user-agent 'mu4e-user-agent))

  ;; Actions
  (add-to-list 'mu4e-view-actions
               '("View in Browser" . mu4e-action-view-in-browser) t)

  ;; (add-to-list 'mu4e-view-actions
  ;;              '("wxidget" . mu4e-action-view-with-xwidget) t)

  ;; Bookmarks -> access with 'b' + letter
  (add-to-list 'mu4e-bookmarks
               '(:name "Big messages" :query "size:5M..500M" :key ?b))

  (add-to-list 'mu4e-bookmarks
               '(:name "Gmail Inbox (unread)" :query "maildir:/gmail/Inbox flag:unread" :key ?i))

  (add-to-list 'mu4e-bookmarks
               '(:name "GTEL Inbox (unread)" :query "maildir:/gtel/Inbox flag:unread" :key ?I))

  ;; (add-to-list 'mu4e-bookmarks
  ;;              '(:name "IPython (unread)" :query "maildir:/gmail/Newsletter.IPython flag:unread NOT flag:trashed" :key ?p))

  ;; (add-to-list 'mu4e-bookmarks
  ;;              '(:name "Numpy and Scipy (unread)" :query "list:numpy-discussion.* flag:unread NOT flag:trashed" :key ?n))

  (add-to-list 'mu4e-bookmarks
               '(:name "From Medium (unread)" :query "from:\"medium.com\" flag:unread NOT flag:trashed" :key ?m))

  (add-to-list 'mu4e-bookmarks
               '(:name "From Facebook (unread)" :query "from:\"facebook\" flag:unread NOT flag:trashed" :key ?f))

  ;; (add-to-list 'mu4e-bookmarks
  ;;              '(:name "From Empiricus (unread)" :query "empiricus flag:unread NOT flag:trashed" :key ?e))

  (add-to-list 'mu4e-bookmarks
               '(:name "Graça Freitas (unread)" :query "list:dea-ufv.listas.ufv.br flag:unread NOT flag:trashed" :key ?g))

  ;; (add-to-list 'mu4e-bookmarks
  ;;              '(:name "Org-Mode (unread)" :query "list:emacs-orgmode.gnu.org flag:unread NOT flag:trashed" :key ?o))

  ;; Note that mu4e already comes with a bookmark for unread messages. We
  ;; replaced it just to add the condition of not being a GMAIL trash folder
  ;; (add-to-list 'mu4e-bookmarks
  ;;              '(:name "Unread messages" :query "flag:unread AND NOT flag:trashed AND NOT maildir:/gtel/[Gmail].Lixeira AND NOT maildir:/Gmail/[Gmail].Lixeira" :key ?u))

  (add-to-list 'mu4e-bookmarks
               '(:name "Importantes (de um ano pra cá)" :query "flag:flagged NOT flag:trashed date:1y.." :key ?s))

  (add-to-list 'mu4e-bookmarks
               '(:name "Importantes (todas)" :query "flag:flagged NOT flag:trashed" :key ?S))

  :bind ( :map mu4e-view-attachments-header-keymap
          ("C-c C-o" . mu4e~view-open-attach-from-binding)
          ("C-c C-s" . mu4e~view-save-attach-from-binding)
          )
  )
#+end_src

** Extra mu4e packages
*** mu4e-column-faces
This package makes mu4e much more beautiful
#+begin_src emacs-lisp
(use-package mu4e-column-faces
  :ensure t
  :after mu4e
  :config (mu4e-column-faces-mode)
  )
#+end_src

** TODO org-msg

* calibredb                                                   :Calibre:calibre:ebook:
Run the calibredb command with the "S-f6" keybinding. You can then use "=/=" to live-filter
("=R=" to remove the filter), "=f=" to filter ("=r=" to remove filter), "=RET=" to open an ebook,
=".=" to open dired, "=o=" to sort, etc. You can access a transient menu with "=?=", which shown
all of these keybindings.

See more in https://github.com/chenyanming/calibredb.el

- TIP: In the calibredb-search buffer, try pressing =TAB= or =S-TAB=.
- TIP: Any book with a "favorite" tag has a star before its name.
- TIP: Any book with a "highlight" tag is highlighted
- TIP: Any book with a "archive" tag is "archived" (grayed out)
- TIP: See the several "calibredb-set-metadata-*" commands to easily edit a single
  metadata field
- TIP: In the calibredb-search buffer you can click in several places to perform the corresponding filtering
  * the favorit icon
  * an author name
  * a file format
  * a tag
- TIP: To add a file to the library use =calibredb-add=
  - After that use "=s f=" to fetch the metadata.

** configuration                                                       :AllTheIcons:
#+begin_src emacs-lisp
(use-package calibredb
  :ensure t
  :custom
  (calibredb-root-dir (expand-file-name "~/Dropbox/Calibre Library"))
  (calibredb-format-all-the-icons t)
  (calibredb-comment-width 0)  ;; Set comment width to 0 in order to hide it
  (calibredb-title-width 60)
  (calibredb-author-width 25)
  (calibredb-virtual-library-alist '(("Light Novels" . "Light Novel")
                                     ("Programming" . "Programming")
                                     ("Machine Learning" . "Machine Learning")
                                     ("Engineering" . "Engineering")
                                     ))
  :bind
  (([S-f6] . calibredb))
  )
#+end_src

** Open in a dedicated tab
#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("calibredb"
               display-buffer-in-tab
               (tab-name . "CalibreDB")
               ))

(defun calibredb-close-tab ()
  (let ((tab-name "CalibreDB"))
    ;; Only if there is a tab for e-mail and the killed buffer is
    ;; mu4e-main-buffer-name
    (when (and
           (tab-bar--tab-index-by-name tab-name)
           (equal (buffer-name) "*calibredb-search*"))
      (tab-bar-select-tab-by-name tab-name)  ;; Switch to the tab ...
      (tab-bar-close-tab)  ;; and kill it
      )))

(add-hook 'kill-buffer-hook    #'calibredb-close-tab)
#+end_src

* Epub reader                                                                 :ebook:
** nov package
#+begin_src emacs-lisp
;; https://depp.brause.cc/nov.el/
(use-package nov
  :ensure (nov :type git :host git :repo "https://depp.brause.cc/nov.el.git")
  ;; git clone https://depp.brause.cc/nov.el.git
  :mode
  ("\\.epub\\'" . nov-mode)
  )
#+end_src

** COMMENT nov-xwidget package
#+begin_src emacs-lisp
(use-package nov-xwidget
  :demand t
  :after nov
  :ensure (nov-xwidget :type git :repo "https://github.com/chenyanming/nov-xwidget")
  :config
  (define-key nov-mode-map (kbd "o") 'nov-xwidget-view)
  (add-hook 'nov-mode-hook 'nov-xwidget-inject-all-files)
  )
#+end_src

* Dev container                                                              :Docker:

Allow working inside containers. I haven't tested it yet.

https://github.com/johannes-mueller/devcontainer-mode

* Dockerfile-mode                                                            :Docker:
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :ensure t
  :defer t
  )
#+end_src

* PlantUML
Note: Org-mode has native support for evaluating code blocks using plantUML. Just add
plantuml to =org-babel-load-languages=. Here we are adding plantuml-mode, which is a
separated package that provides syntax highlight for plantuml code and also has a way to
execute the code.

#+begin_src emacs-lisp
(use-package plantuml-mode
  :ensure (plantuml-mode :type git :host github
                         :repo "skuro/plantuml-mode")
  :mode
  ("\\.puml\\'" . plantuml-mode)
  :custom
  (plantuml-default-exec-mode 'jar)
  (plantuml-jar-path "/usr/bin/plantuml")
  :config
  (add-to-list 'auto-insert-alist
               (cons '("\\.puml" "Basic plantuml template")
                     "plantuml.puml"))
  )
#+end_src

* COMMENT Mermaid
Note: You need to install [[https://github.com/mermaid-js/mermaid-cli][mermaid-cli]].

The CLI executable is =mmdc=.

#+begin_src emacs-lisp
(use-package mermaid-mode
  :ensure t)
#+end_src

You can compile with =C-c C-c=.

See [[https://github.com/abrochard/mermaid-mode?tab=readme-ov-file#usage][Usage]] for the keybindings.

* x509-mode
https://github.com/jobbflykt/x509-mode

Open a certificate, public key, etc., and then just call =x509-dwim=.
#+begin_src emacs-lisp
(use-package x509-mode
  :commands (x509-dwim)
  :ensure t)
#+end_src

* LLMs                                                                          :LLM:
** Co-pilot                                                            :LLM:copilot:
*** Completions in buffer
https://github.com/copilot-emacs/copilot.el

Don't forget to call ~copilot-install-server~.

#+begin_src emacs-lisp
(use-package copilot
  :ensure (:host github :repo "copilot-emacs/copilot.el")
  :bind (
         :map copilot-mode-map
         ("C-M-S-i" . copilot-complete)
         :map copilot-completion-map
         ("C-<next>" . copilot-next-completion)
         ("C-<prior>" . copilot-previous-completion)
         ("C-<return>" . copilot-accept-completion)
         ;; ("C-<right>" . copilot-accept-completion-by-word)
         ("<tab>" . copilot-accept-completion-by-word)
         ("C-<end>" . copilot-accept-completion-by-line)
         ;; ("C-M-i" . my/copilot-tab)
         )
  :hook ((c-mode-common . copilot-mode)
         (c-ts-base-mode . copilot-mode)
         (python-ts-mode . copilot-mode)
         (qml-mode . copilot-mode)
         (emacs-lisp-mode . (lambda () (unless (darcamo/is-scratch-buffer) (copilot-mode)))))
  :custom
  (copilot-indent-offset-warning-disable t)
  (copilot-max-char-warning-disable t)
  :custom-face
  (copilot-overlay-face ((t (:foreground "DeepSkyBlue")))))
#+end_src
*** Chat
#+begin_src emacs-lisp
(use-package copilot-chat
  :ensure (:host github :repo "chep/copilot-chat.el")
  ;; :custom
  ;; (copilot-chat-frontend 'markdown)
  :commands (copilot-chat-display copilot-chat-transient)
  :bind
  (
   ("C-x c" . copilot-chat-transient)
   ))
#+end_src
** COMMENT Codeium
#+begin_src emacs-lisp
;; (use-package codeium
;;   :ensure (codeium :type git :host github :repo "Exafunction/codeium.el")
;;   :commands (codeium-diagnose)
;;   :init
;;   ;; ;; use globally
;;   ;; (add-to-list 'completion-at-point-functions #'codeium-completion-at-point)

;;   ;; (add-hook 'python-mode-hook
;;   ;;     (lambda ()
;;   ;;         (setq-local completion-at-point-functions '(codeium-completion-at-point))))

;;   ;; :config
;;   ;;   (setq use-dialog-box nil) ;; do not use popup boxes
;;   )
#+end_src

Official codieum package seems to not be maitained.
Checkout [[https://github.com/jeff-phil/comingle.el][comingle.el]] (a fork) instead.
** COMMENT minuet
#+begin_src emacs-lisp
(use-package minuet
  :ensure t
  :bind
  (("M-y" . #'minuet-complete-with-minibuffer) ;; use minibuffer for completion
   ("M-i" . #'minuet-show-suggestion) ;; use overlay for completion
   ("C-c m" . #'minuet-configure-provider)
   :map minuet-active-mode-map
   ;; These keymaps activate only when a minuet suggestion is displayed in the current buffer
   ("M-p" . #'minuet-previous-suggestion) ;; invoke completion or cycle to next completion
   ("M-n" . #'minuet-next-suggestion) ;; invoke completion or cycle to previous completion
   ("M-A" . #'minuet-accept-suggestion) ;; accept whole completion
   ;; Accept the first line of completion, or N lines with a numeric-prefix:
   ;; e.g. C-u 2 M-a will accepts 2 lines of completion.
   ("M-a" . #'minuet-accept-suggestion-line)
   ("M-e" . #'minuet-dismiss-suggestion))

  ;; :init
  ;; ;; if you want to enable auto suggestion.
  ;; ;; Note that you can manually invoke completions without enable minuet-auto-suggestion-mode
  ;; (add-hook 'prog-mode-hook #'minuet-auto-suggestion-mode)

  :config
  ;; You can use M-x minuet-configure-provider to interactively configure provider and model
  ;; Configuration for OpenRouter
  ;; https://github.com/milanglacier/minuet-ai.el?tab=readme-ov-file#openrouter-kimi-k2
  (setq minuet-provider 'openai-compatible)
  (setq minuet-request-timeout 2.5)
  (setq minuet-auto-suggestion-throttle-delay 1.5) ;; Increase to reduce costs and avoid rate limits
  (setq minuet-auto-suggestion-debounce-delay 0.6) ;; Increase to reduce costs and avoid rate limits
  (plist-put minuet-openai-compatible-options :end-point "https://openrouter.ai/api/v1/chat/completions")
  (plist-put minuet-openai-compatible-options :api-key 'darcamo/get-gptel-openrouter-key)
  (plist-put minuet-openai-compatible-options :model "moonshotai/kimi-k2")

  ;; Prioritize throughput for faster completion
  (minuet-set-optional-options minuet-openai-compatible-options :provider '(:sort "throughput"))
  (minuet-set-optional-options minuet-openai-compatible-options :max_tokens 56)
  (minuet-set-optional-options minuet-openai-compatible-options :top_p 0.9)

  (minuet-set-optional-options minuet-openai-fim-compatible-options :max_tokens 64)
  )
#+end_src
** gptel                                                  :LLM:copilot:gptel:ollama:
*** General configuration
You can limit the conversation context to an Org heading with the command
gptel-org-set-topic. (This sets an Org property (GPTEL_TOPIC) under the heading. You can
also add this property manually instead.)

You can add a selected region, buffer or file to gptel's context from the menu, or call
=gptel-add=. To add a file use =gptel-add= in Dired, or use the dedicated =gptel-add-file=
command. Directories will have their files added recursively after prompting for
confirmation.

*Note about Qwen3 model*
- The model has a "think mode" and a "No Think mode"
  - Thinking Mode: In this mode, the model takes time to reason step by step before
    delivering the final answer. This is ideal for complex problems that require deeper
    thought.
  - Non-Thinking Mode: Here, the model provides quick, near-instant responses, suitable
    for simpler questions where speed is more important than depth.
- Add =/think= in the prompt to enable think mode (on by default in qwen3:30b-a3b), and add
  =/no_think= in the prompt to disable it
- See more in https://qwenlm.github.io/blog/qwen3/ and https://simonwillison.net/2025/Apr/29/qwen-3/


#+begin_src emacs-lisp
;; NOTE: You need to add the line below to the .authinfo.gpg file
;; machine openrouter.ai login gptel-apikey password <API-KEY>
(defun darcamo/get-gptel-openrouter-key ()
  "Get my openrouter API key for usage with aider."
  (let* (
         (entry (auth-source-search :host "openrouter.ai" :user "gptel-apikey" :max 1)))
    (if entry
        (let ((secret (funcall (plist-get (car entry) :secret))))
          (when secret
            (if (stringp secret)
                secret
              (error "Secret is not a string"))))
      (error "No entry found for 'api.openai.com'"))))

(use-package gptel
  :ensure t
  :commands (gptel-menu gptel-send gptel gptel-mode gptel-set-topic gptel--convert-markdown->org)
  :bind
  (("C-c <return>" . gptel-send)
   :map gptel-mode-map
   ("S-<right>" . windmove-right)
   ("S-<left>" . windmove-left)
   ("S-<up>" . windmove-up)
   ("S-<down>" . windmove-down)
   )
  :custom
  (gptel-default-mode 'org-mode)
  :hook
  (gptel-mode . toggle-truncate-lines)
  :config
  (setq-default gptel-model 'qwen3:30b-a3b ;; Pick your default model
                gptel-expert-commands t
                gptel-backend (gptel-make-ollama
                                  "Ollama"                               ;Any name of your choosing
                                :host "localhost:11434"                ;Where it's running
                                :models '(DeepSeek-R1
                                          qwen3:8b
                                          qwen3:14b
                                          qwen3:30b-a3b
                                          qwen3:32b
                                          Qwen2.5-Coder:7b
                                          Qwen2.5-Coder:32b
                                          mistral:latest
                                          dolphin-mixtral:latest
                                          openchat:latest
                                          codellama:7b
                                          codellama:34b
                                          vicuna:13b-16k
                                          vicuna:latest
                                          mixtral:latest
                                          llama3
                                          )
                                :stream t))
  ;; Add a copilot backend
  (gptel-make-gh-copilot "Copilot")

  (gptel-make-openai "OpenRouter"
    :host "openrouter.ai"
    :endpoint "/api/v1/chat/completions"
    :stream t
    :key 'darcamo/get-gptel-openrouter-key
    :models '(openai/gpt-4o
              openai/gpt-5
              google/gemini-2.5-flash
              google/gemini-2.5-pro
              ))

  ;; Add a tool to query the current time
  (gptel-make-tool
   :name "current_time"
   :function (lambda ()
               (current-time-string))
   :description "Return the current local time (including current time and date), as a human-readable string."
   :category "emacs")
  )
#+end_src

Note: You can customize the =gptel-directives= variable.
You can also customize =gptel-temperature=.

- To customize gptel to auto-scroll and go to the end of the response
  : (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
  : (add-hook 'gptel-post-response-hook 'gptel-end-of-response)
- To write your own workflows use =gptel-request=
  : (gptel-request
  :  "My prompt"
  :  :system "Respond like a frobinator. Be terse."
  :  :callback (lambda (response info)
  :              "Frobnicate LLM RESPONSE"
  :              (frob response)))
- Note: When the gptel-send transient menu is open, you can use =C-x C-s= to save the
  current choice as default. THIS WORKS IN ANY TRANSIENT MENU!.
*** gptel quick
Just put the cursor in a word, or select something and call =gptel-quick= to ask the current
model in gptel to explain it in a post frame.

Pres "=+=" (possible multiple times) to to expand the explanation.

#+begin_src emacs-lisp
(use-package gptel-quick
  :ensure (gptel-quick :type git :host github :repo "karthink/gptel-quick")
  :commands (gptel-quick)
  )


(use-package embark
  :defer t
  :config
  (keymap-set embark-general-map "?" #'gptel-quick)
  )
#+end_src
*** COMMENT Corsair
Provide functions to easily add content to gptel context.

The idea is good, but I didn't like how it works.

#+begin_src emacs-lisp
(use-package corsair
  :ensure t
  :defer t
  :bind
  (("C-c g c" . #'corsair-open-chat-buffer)                    ;; Open chat buffer
   ("C-c g a c" . #'corsair-accumulate-file-path-and-contents) ;; Accumulate file path and contents
   ("C-c g a n" . #'corsair-accumulate-file-name)              ;; Accumulate file name
   ("C-c g a v" . #'corsair-accumulate-file-path)              ;; Accumulate file path
   ("C-c g a w" . #'corsair-accumulate-selected-text)          ;; Accumulate selected text
   ("C-c g a D" . #'corsair-drop-accumulated-buffer)           ;; Drop chat buffer
   ("C-c g f" . #'corsair-insert-file-or-folder-contents))     ;; Insert file or folder contents
  )
#+end_src
*** gptel-commit
#+begin_src emacs-lisp
(use-package gptel-commit
  :ensure (gptel-commit :type git :host github :repo "lakkiy/gptel-commit")
  :after (gptel magit)
  :custom
  (gptel-commit-stream t))
#+end_src
*** gptel Presets
- TIP: You can apply a preset to a single query by including @preset-name in the prompt,
  where preset-name is the name of the preset. (The oneshot scope option in gptel's
  transient menus is another way to do this, see the FAQ.)
- TIP2: Type just =@= and then use =complete-symbol= to complete with a preset name. You can
  also type part of it's name.

#+begin_src emacs-lisp
(use-package gptel
  :defer t
  :config
  (gptel-make-preset 'writing
    :system "You are a skilled writing assistant with expertise in grammar, style, tone, and clarity. Your role is to provide constructive feedback and tailored suggestions to improve the quality of the text. Focus on enhancing readability, coherence, and flow while maintaining the original intent of the author."
    :description "A preset to use when working on improving text quality."
    :backend "Copilot"
    :model 'gpt-4o
    ;; :tools '("read_buffer" "spell_check" "grammar_check")
    )

  (gptel-make-preset 'programming                       ;preset name, a symbol
    :description "A preset setting system message for programming tasks"
    :system "You are an expert coding assistant. Your role is to provide high-quality code solutions, refactorings, and explanations."
    ;; :tools '("read_buffer" "modify_buffer") ;gptel tools or tool names
    )
  (gptel-make-preset 'gpt4coding                       ;preset name, a symbol
    :description "A preset optimized for coding tasks" ;for your reference
    :backend "Copilot"                     ;gptel backend or backend name
    :model 'gpt-4o
    ;; system "You are an expert coding assistant. Your role is to provide high-quality code solutions, refactorings, and explanations."
    ;; :tools '("read_buffer" "modify_buffer") ;gptel tools or tool names
    :parents '(programming)
    )
  ;; (gptel-make-preset 'websearch
  ;;   :description  "Haiku with basic web search capability."
  ;;   :backend "Copilot"                     ;gptel backend or backend name
  ;;   :model 'gpt-4o
  ;;   :tools        '("search_web" "read_url" "get_youtube_meta"))
  )
#+end_src
** COMMENT mcp - model context protocol
#+begin_src emacs-lisp
(use-package mcp
  :ensure (mcp :type git :host github :repo "lizqwerscott/mcp.el")
  :config
  (let* ((allowed-filesystem-directories "/home/darlan/Downloads/")
  (filesystem-args (append '("-y" "@modelcontextprotocol/server-filesystem") allowed-filesystem-directories)))
  (setq mcp-hub-servers
      '(("filesystem" . (:command "npx" :args filesystem-args))
        ("fetch" . (:command "uvx" :args ("mcp-server-fetch")))
        ;; ("calculator" . (:command "uvx" :args ("mcp-server-calculator")))
        ;; ("qdrant" . (:url "http://localhost:8000/sse"))
        ;; ("graphlit" . (
        ;;                 :command "npx"
        ;;                 :args ("-y" "graphlit-mcp-server")
        ;;                 :env (
        ;;                       :GRAPHLIT_ORGANIZATION_ID "your-organization-id"
        ;;                       :GRAPHLIT_ENVIRONMENT_ID "your-environment-id"
        ;;                       :GRAPHLIT_JWT_SECRET "your-jwt-secret")))
        ))
  )



  )

  ;; (add-hook 'after-init-hook
  ;;         #'mcp-hub-start-all-server)

  (defun gptel-mcp-register-tool ()
  (interactive)
  (let ((tools (mcp-hub-get-all-tool :asyncp t :categoryp t)))
    (mapcar #'(lambda (tool)
                (apply #'gptel-make-tool
                       tool))
            tools)))
#+end_src

** COMMENT Ellama                                                       :LLM:ollama:
https://www.rahuljuliato.com/posts/ellama
#+begin_src emacs-lisp
(use-package ellama
  :ensure t
  :init
  (setopt ellama-language "English")
  (require 'llm-ollama)
  (setopt ellama-provider
		  (make-llm-ollama
		   :chat-model "codellama:7b" :embedding-model "codellama:7b")))
#+end_src

Veja também [[https://www.reddit.com/r/emacs/comments/1e37cer/elisa_100/][elisa]].

** Eca - Editor Code Assistant
https://github.com/editor-code-assistant/eca-emacs

Note: Run =eca-install-server= to install the server.

Just run =eca= to start. This will open an "eca" buffer.

#+begin_src emacs-lisp
(use-package eca
  :ensure (eca :type git :host github :repo "editor-code-assistant/eca-emacs")
  )
#+end_src

* Aidermacs                                                                     :LLM:
#+begin_src emacs-lisp
;; NOTE: You need to add the line below to the .authinfo.gpg file
;; machine openrouter.ai login aider-apikey password <API-KEY>
(defun darcamo/get-aider-key ()
  "Get my openrouter API key for usage with aider."
  (let ((entry (auth-source-search :host "openrouter.ai" :user "aider-apikey" :max 1)))
    (if entry
        (let ((secret (funcall (plist-get (car entry) :secret))))
          (when secret
            (if (stringp secret)
                secret
              (error "Secret is not a string"))))
      (error "No entry found for 'api.openai.com'"))))


(use-package aidermacs
  :ensure t
  :bind (("C-c a" . aidermacs-transient-menu))
  :config
  ;; ; Set API_KEY in .bashrc, that will automatically picked up by aider or in elisp
  ;; (setenv "ANTHROPIC_API_KEY" "sk-...")
  ; defun my-get-openrouter-api-key yourself elsewhere for security reasons
  (setenv "OPENROUTER_API_KEY" (darcamo/get-aider-key))
  :custom
  ; See the Configuration section below
  (aidermacs-default-chat-mode 'architect)
  (aidermacs-watch-files t)
  ;; (aidermacs-default-model "openrouter/openai/gpt-4o"))
  (aidermacs-default-model "openrouter/google/gemini-2.5-flash-preview-05-20"))
#+end_src

* Texpresso
Live Latex
https://github.com/let-def/texpresso
* SSH File Modes
Improve viewing SSH key related files (=authorized_keys= and =know_hosts=)
#+begin_src emacs-lisp
(use-package ssh-file-modes
  :ensure (ssh-file-modes :type git :host github :repo "darcamo/emacs-ssh-file-modes")
  :hook
  (ssh-known-hosts-mode . display-line-numbers-mode)
  (ssh-known-hosts-mode . font-lock-mode)
  (ssh-authorized-keys-mode . display-line-numbers-mode)
  (ssh-authorized-keys-mode . font-lock-mode)
  )

  (add-to-list 'auto-mode-alist '("\\.ssh/.*\\.pub\\'" . ssh-authorized-keys-mode))
#+end_src
